
webServerH755_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015374  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003034  08015614  08015614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018648  08018648  0001eaf0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018648  08018648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018650  08018650  0001eaf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018650  08018650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018654  08018654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  24000000  08018658  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .Rx_PoolSection 00004983  240000ac  08018704  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  24004a30  0801d087  0001ea30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  24004a90  0801d0e7  0001ea90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000affc  24004af0  0801d147  0001eaf0  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2400faec  0801d147  0001faec  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0001eaf0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003850d  00000000  00000000  0001eb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007f85  00000000  00000000  0005702b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002610  00000000  00000000  0005efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e09  00000000  00000000  000615c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004be36  00000000  00000000  000633c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003aca2  00000000  00000000  000af1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001ade17  00000000  00000000  000e9ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00297cb8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a658  00000000  00000000  00297cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000061  00000000  00000000  002a2354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004af0 	.word	0x24004af0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080155fc 	.word	0x080155fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004af4 	.word	0x24004af4
 80002dc:	080155fc 	.word	0x080155fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <vApplicationGetIdleTaskMemory+0x2c>)
 8000848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <vApplicationGetIdleTaskMemory+0x30>)
 800084e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	24004b0c 	.word	0x24004b0c
 8000868:	24004bac 	.word	0x24004bac

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000872:	f000 f9d3 	bl	8000c1c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b71      	ldr	r3, [pc, #452]	@ (8000a3c <main+0x1d0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11b      	bne.n	80008ba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
}
 8000886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000888:	f3bf 8f6f 	isb	sy
}
 800088c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800088e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a3c <main+0x1d0>)
 8000890:	2200      	movs	r2, #0
 8000892:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000896:	f3bf 8f4f 	dsb	sy
}
 800089a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800089c:	f3bf 8f6f 	isb	sy
}
 80008a0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a2:	4b66      	ldr	r3, [pc, #408]	@ (8000a3c <main+0x1d0>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a65      	ldr	r2, [pc, #404]	@ (8000a3c <main+0x1d0>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
}
 80008b8:	e000      	b.n	80008bc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008bc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a3c <main+0x1d0>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d138      	bne.n	800093a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a3c <main+0x1d0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
}
 80008d4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008d6:	4b59      	ldr	r3, [pc, #356]	@ (8000a3c <main+0x1d0>)
 80008d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e0:	0b5b      	lsrs	r3, r3, #13
 80008e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008f0:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f4:	015a      	lsls	r2, r3, #5
 80008f6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80008fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008fc:	6a3a      	ldr	r2, [r7, #32]
 80008fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000900:	494e      	ldr	r1, [pc, #312]	@ (8000a3c <main+0x1d0>)
 8000902:	4313      	orrs	r3, r2
 8000904:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	623a      	str	r2, [r7, #32]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ef      	bne.n	80008f2 <main+0x86>
    } while(sets-- != 0U);
 8000912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	627a      	str	r2, [r7, #36]	@ 0x24
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e5      	bne.n	80008e8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800091c:	f3bf 8f4f 	dsb	sy
}
 8000920:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000922:	4b46      	ldr	r3, [pc, #280]	@ (8000a3c <main+0x1d0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a45      	ldr	r2, [pc, #276]	@ (8000a3c <main+0x1d0>)
 8000928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800092c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800092e:	f3bf 8f4f 	dsb	sy
}
 8000932:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000934:	f3bf 8f6f 	isb	sy
}
 8000938:	e000      	b.n	800093c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800093a:	bf00      	nop
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800093c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000942:	bf00      	nop
 8000944:	4b3e      	ldr	r3, [pc, #248]	@ (8000a40 <main+0x1d4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d004      	beq.n	800095a <main+0xee>
 8000950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000956:	2b00      	cmp	r3, #0
 8000958:	dcf4      	bgt.n	8000944 <main+0xd8>
  if ( timeout < 0 )
 800095a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095c:	2b00      	cmp	r3, #0
 800095e:	da01      	bge.n	8000964 <main+0xf8>
  {
  Error_Handler();
 8000960:	f000 f9c0 	bl	8000ce4 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f000 fe64 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f872 	bl	8000a50 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800096c:	4b34      	ldr	r3, [pc, #208]	@ (8000a40 <main+0x1d4>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a33      	ldr	r2, [pc, #204]	@ (8000a40 <main+0x1d4>)
 8000974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <main+0x1d4>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800098a:	2000      	movs	r0, #0
 800098c:	f002 ffee 	bl	800396c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f003 f804 	bl	80039a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800099e:	bf00      	nop
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <main+0x1d4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d104      	bne.n	80009b6 <main+0x14a>
 80009ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dcf4      	bgt.n	80009a0 <main+0x134>
if ( timeout < 0 )
 80009b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	da01      	bge.n	80009c0 <main+0x154>
{
Error_Handler();
 80009bc:	f000 f992 	bl	8000ce4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 f8c2 	bl	8000b48 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <main+0x1d8>)
 80009c6:	1d3c      	adds	r4, r7, #4
 80009c8:	461d      	mov	r5, r3
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fd16 	bl	800740c <osThreadCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <main+0x1dc>)
 80009e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fc3e 	bl	8001268 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 fc3b 	bl	8001268 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 fc38 	bl	8001268 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f8:	2101      	movs	r1, #1
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fcaa 	bl	8001354 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <main+0x1e0>)
 8000a02:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a06:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <main+0x1e0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <main+0x1e0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <main+0x1e0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <main+0x1e0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a20:	490a      	ldr	r1, [pc, #40]	@ (8000a4c <main+0x1e0>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fd26 	bl	8001474 <BSP_COM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <main+0x1c6>
  {
    Error_Handler();
 8000a2e:	f000 f959 	bl	8000ce4 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000a32:	f006 fcd4 	bl	80073de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a36:	bf00      	nop
 8000a38:	e7fd      	b.n	8000a36 <main+0x1ca>
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	58024400 	.word	0x58024400
 8000a44:	08015620 	.word	0x08015620
 8000a48:	24004dbc 	.word	0x24004dbc
 8000a4c:	24004dac 	.word	0x24004dac

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	@ 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	224c      	movs	r2, #76	@ 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f013 fecb 	bl	80147fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f013 fec5 	bl	80147fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a70:	2004      	movs	r0, #4
 8000a72:	f002 ffa9 	bl	80039c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa8:	bf00      	nop
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab6:	d1f8      	bne.n	8000aaa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000acc:	2310      	movs	r3, #16
 8000ace:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000ad0:	23c8      	movs	r3, #200	@ 0xc8
 8000ad2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 ffc3 	bl	8003a7c <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000afc:	f000 f8f2 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	233f      	movs	r3, #63	@ 0x3f
 8000b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b1e:	2340      	movs	r3, #64	@ 0x40
 8000b20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fc02 	bl	8004330 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b32:	f000 f8d7 	bl	8000ce4 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3770      	adds	r7, #112	@ 0x70
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58000400 	.word	0x58000400
 8000b44:	58024800 	.word	0x58024800

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	4a26      	ldr	r2, [pc, #152]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	4a1f      	ldr	r2, [pc, #124]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_GPIO_Init+0xb8>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bd6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000be8:	230a      	movs	r3, #10
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_GPIO_Init+0xbc>)
 8000bf4:	f002 fcf0 	bl	80035d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020000 	.word	0x58020000

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c10:	f005 fd52 	bl	80066b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f006 fc45 	bl	80074a4 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0xc>

08000c1c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c2e:	f000 fe5b 	bl	80018e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c3e:	231f      	movs	r3, #31
 8000c40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c42:	2387      	movs	r3, #135	@ 0x87
 8000c44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fe79 	bl	8001958 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MPU_Config+0x9c>)
 8000c6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fe67 	bl	8001958 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MPU_Config+0xa0>)
 8000c90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000c92:	2308      	movs	r3, #8
 8000c94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fe57 	bl	8001958 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000caa:	2004      	movs	r0, #4
 8000cac:	f000 fe34 	bl	8001918 <HAL_MPU_Enable>

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	30020000 	.word	0x30020000
 8000cbc:	30040000 	.word	0x30040000

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cd2:	f000 fce9 	bl	80016a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_MspInit+0x38>)
 8000cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_MspInit+0x38>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_MspInit+0x38>)
 8000d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	210f      	movs	r1, #15
 8000d18:	f06f 0001 	mvn.w	r0, #1
 8000d1c:	f000 fdbc 	bl	8001898 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	58024400 	.word	0x58024400

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	@ 0x40
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d827      	bhi.n	8000d8a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	2036      	movs	r0, #54	@ 0x36
 8000d40:	f000 fdaa 	bl	8001898 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d44:	2036      	movs	r0, #54	@ 0x36
 8000d46:	f000 fdc1 	bl	80018cc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d4a:	4a29      	ldr	r2, [pc, #164]	@ (8000df0 <HAL_InitTick+0xc4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_InitTick+0xc8>)
 8000d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d56:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <HAL_InitTick+0xc8>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_InitTick+0xc8>)
 8000d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6e:	f107 0210 	add.w	r2, r7, #16
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fe65 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d106      	bne.n	8000d96 <HAL_InitTick+0x6a>
 8000d88:	e001      	b.n	8000d8e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e02b      	b.n	8000de6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8e:	f003 fe2f 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8000d92:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d94:	e004      	b.n	8000da0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d96:	f003 fe2b 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_InitTick+0xcc>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9b      	lsrs	r3, r3, #18
 8000daa:	3b01      	subs	r3, #1
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000db0:	4a13      	ldr	r2, [pc, #76]	@ (8000e00 <HAL_InitTick+0xd4>)
 8000db2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000db6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dce:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000dd0:	f004 f93a 	bl	8005048 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dda:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <HAL_InitTick+0xd0>)
 8000ddc:	f004 f996 	bl	800510c <HAL_TIM_Base_Start_IT>
 8000de0:	4603      	mov	r3, r0
 8000de2:	e000      	b.n	8000de6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3740      	adds	r7, #64	@ 0x40
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	24000024 	.word	0x24000024
 8000df4:	58024400 	.word	0x58024400
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	24004dc0 	.word	0x24004dc0
 8000e00:	40001000 	.word	0x40001000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fafa 	bl	8001438 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM6_DAC_IRQHandler+0x10>)
 8000e4e:	f004 f9d5 	bl	80051fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	24004dc0 	.word	0x24004dc0

08000e5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <ETH_IRQHandler+0x10>)
 8000e62:	f001 f99f 	bl	80021a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	24004f10 	.word	0x24004f10

08000e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_kill>:

int _kill(int pid, int sig)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <_kill+0x20>)
 8000e8c:	2216      	movs	r2, #22
 8000e8e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	2400fadc 	.word	0x2400fadc

08000ea4 <_exit>:

void _exit (int status)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffe5 	bl	8000e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb6:	bf00      	nop
 8000eb8:	e7fd      	b.n	8000eb6 <_exit+0x12>

08000eba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e00a      	b.n	8000ee2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf0      	blt.n	8000ecc <_read+0x12>
  }

  return len;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e009      	b.n	8000f1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fb12 	bl	8001538 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf1      	blt.n	8000f06 <_write+0x12>
  }
  return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_close>:

int _close(int file)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
  return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_isatty>:

int _isatty(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d205      	bcs.n	8000fd0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <_sbrk+0x6c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	24080000 	.word	0x24080000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	24004e0c 	.word	0x24004e0c
 8000ffc:	2400faf0 	.word	0x2400faf0
 8001000:	2400fadc 	.word	0x2400fadc

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001040 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001008:	f7ff fbfe 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f7ff fb4e 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f013 fc8d 	bl	8014954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fc17 	bl	800086c <main>
  bx  lr
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001048:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 800104c:	08018658 	.word	0x08018658
  ldr r2, =_sbss
 8001050:	24004af0 	.word	0x24004af0
  ldr r4, =_ebss
 8001054:	2400faec 	.word	0x2400faec

08001058 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC3_IRQHandler>

0800105a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <LAN8742_RegisterBusIO+0x28>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <LAN8742_RegisterBusIO+0x28>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <LAN8742_RegisterBusIO+0x28>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001086:	e014      	b.n	80010b2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d139      	bne.n	800114e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e01c      	b.n	800112e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f107 020c 	add.w	r2, r7, #12
 80010fc:	2112      	movs	r1, #18
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	4798      	blx	r3
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	da03      	bge.n	8001110 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001108:	f06f 0304 	mvn.w	r3, #4
 800110c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800110e:	e00b      	b.n	8001128 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d105      	bne.n	8001128 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
         break;
 8001126:	e005      	b.n	8001134 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b1f      	cmp	r3, #31
 8001132:	d9df      	bls.n	80010f4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d902      	bls.n	8001142 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800113c:	f06f 0302 	mvn.w	r3, #2
 8001140:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800114e:	693b      	ldr	r3, [r7, #16]
 }
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6810      	ldr	r0, [r2, #0]
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	2101      	movs	r1, #1
 8001172:	4798      	blx	r3
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	da02      	bge.n	8001180 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800117a:	f06f 0304 	mvn.w	r3, #4
 800117e:	e06e      	b.n	800125e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	f107 020c 	add.w	r2, r7, #12
 800118c:	2101      	movs	r1, #1
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	da02      	bge.n	800119c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001196:	f06f 0304 	mvn.w	r3, #4
 800119a:	e060      	b.n	800125e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e059      	b.n	800125e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6810      	ldr	r0, [r2, #0]
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	2100      	movs	r1, #0
 80011b8:	4798      	blx	r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da02      	bge.n	80011c6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011c0:	f06f 0304 	mvn.w	r3, #4
 80011c4:	e04b      	b.n	800125e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11b      	bne.n	8001208 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <LAN8742_GetLinkState+0x90>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011e4:	2302      	movs	r3, #2
 80011e6:	e03a      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e033      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001200:	2304      	movs	r3, #4
 8001202:	e02c      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001204:	2305      	movs	r3, #5
 8001206:	e02a      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	f107 020c 	add.w	r2, r7, #12
 8001214:	211f      	movs	r1, #31
 8001216:	4798      	blx	r3
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	da02      	bge.n	8001224 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	e01c      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800122e:	2306      	movs	r3, #6
 8001230:	e015      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f003 031c 	and.w	r3, r3, #28
 8001238:	2b18      	cmp	r3, #24
 800123a:	d101      	bne.n	8001240 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800123c:	2302      	movs	r3, #2
 800123e:	e00e      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 031c 	and.w	r3, r3, #28
 8001246:	2b08      	cmp	r3, #8
 8001248:	d101      	bne.n	800124e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800124a:	2303      	movs	r3, #3
 800124c:	e007      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	2b14      	cmp	r3, #20
 8001256:	d101      	bne.n	800125c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001258:	2304      	movs	r3, #4
 800125a:	e000      	b.n	800125e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800125c:	2305      	movs	r3, #5
    }
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <BSP_LED_Init+0x28>
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d006      	beq.n	8001290 <BSP_LED_Init+0x28>
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d003      	beq.n	8001290 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001288:	f06f 0301 	mvn.w	r3, #1
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800128e:	e055      	b.n	800133c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <BSP_LED_Init+0xe0>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <BSP_LED_Init+0xe0>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a6:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	e021      	b.n	80012fa <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10f      	bne.n	80012dc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c2:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	e00e      	b.n	80012fa <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <BSP_LED_Init+0xe0>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a13      	ldr	r2, [pc, #76]	@ (800134c <BSP_LED_Init+0xe4>)
 80012fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001302:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a0f      	ldr	r2, [pc, #60]	@ (8001350 <BSP_LED_Init+0xe8>)
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	f107 0218 	add.w	r2, r7, #24
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f95a 	bl	80035d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <BSP_LED_Init+0xe8>)
 8001328:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4a07      	ldr	r2, [pc, #28]	@ (800134c <BSP_LED_Init+0xe4>)
 8001330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	f002 fafe 	bl	8003938 <HAL_GPIO_WritePin>
  }

  return ret;
 800133c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800133e:	4618      	mov	r0, r3
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58024400 	.word	0x58024400
 800134c:	0801840c 	.word	0x0801840c
 8001350:	2400000c 	.word	0x2400000c

08001354 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <BSP_PB_Init+0xcc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <BSP_PB_Init+0xcc>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <BSP_PB_Init+0xcc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001386:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001388:	2302      	movs	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <BSP_PB_Init+0xd0>)
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	f107 020c 	add.w	r2, r7, #12
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 f915 	bl	80035d8 <HAL_GPIO_Init>
 80013ae:	e031      	b.n	8001414 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013b4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <BSP_PB_Init+0xd0>)
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 f907 	bl	80035d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4a16      	ldr	r2, [pc, #88]	@ (8001428 <BSP_PB_Init+0xd4>)
 80013d0:	441a      	add	r2, r3
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4915      	ldr	r1, [pc, #84]	@ (800142c <BSP_PB_Init+0xd8>)
 80013d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f002 f8aa 	bl	8003536 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <BSP_PB_Init+0xd4>)
 80013e8:	1898      	adds	r0, r3, r2
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <BSP_PB_Init+0xdc>)
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	461a      	mov	r2, r3
 80013f4:	2100      	movs	r1, #0
 80013f6:	f002 f87f 	bl	80034f8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013fa:	2028      	movs	r0, #40	@ 0x28
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <BSP_PB_Init+0xe0>)
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	f000 fa46 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800140c:	2328      	movs	r3, #40	@ 0x28
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa5c 	bl	80018cc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	58024400 	.word	0x58024400
 8001424:	24000018 	.word	0x24000018
 8001428:	24004e10 	.word	0x24004e10
 800142c:	08018414 	.word	0x08018414
 8001430:	2400001c 	.word	0x2400001c
 8001434:	24000020 	.word	0x24000020

08001438 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <BSP_PB_IRQHandler+0x20>)
 8001448:	4413      	add	r3, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f002 f888 	bl	8003560 <HAL_EXTI_IRQHandler>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24004e10 	.word	0x24004e10

0800145c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800148a:	f06f 0301 	mvn.w	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e018      	b.n	80014c4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2294      	movs	r2, #148	@ 0x94
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <BSP_COM_Init+0x5c>)
 800149c:	4413      	add	r3, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f86e 	bl	8001580 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2294      	movs	r2, #148	@ 0x94
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <BSP_COM_Init+0x5c>)
 80014ae:	4413      	add	r3, r2
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f80e 	bl	80014d4 <MX_USART3_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014be:	f06f 0303 	mvn.w	r3, #3
 80014c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24004e18 	.word	0x24004e18

080014d4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_USART3_Init+0x60>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220c      	movs	r2, #12
 80014f2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	895b      	ldrh	r3, [r3, #10]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	891b      	ldrh	r3, [r3, #8]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	899b      	ldrh	r3, [r3, #12]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001520:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f004 f858 	bl	80055d8 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000008 	.word	0x24000008

08001538 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <__io_putchar+0x30>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	2394      	movs	r3, #148	@ 0x94
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	4a07      	ldr	r2, [pc, #28]	@ (800156c <__io_putchar+0x34>)
 800154e:	1898      	adds	r0, r3, r2
 8001550:	1d39      	adds	r1, r7, #4
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	2201      	movs	r2, #1
 8001558:	f004 f898 	bl	800568c <HAL_UART_Transmit>
  return ch;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24004eac 	.word	0x24004eac
 800156c:	24004e18 	.word	0x24004e18

08001570 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff71 	bl	800145c <BSP_PB_Callback>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <COM1_MspInit+0xa8>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	4a26      	ldr	r2, [pc, #152]	@ (8001628 <COM1_MspInit+0xa8>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001598:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <COM1_MspInit+0xa8>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <COM1_MspInit+0xa8>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <COM1_MspInit+0xa8>)
 80015ae:	f043 0308 	orr.w	r3, r3, #8
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <COM1_MspInit+0xa8>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <COM1_MspInit+0xa8>)
 80015c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <COM1_MspInit+0xa8>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <COM1_MspInit+0xa8>)
 80015d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80015e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2302      	movs	r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015f4:	2307      	movs	r3, #7
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <COM1_MspInit+0xac>)
 8001600:	f001 ffea 	bl	80035d8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001608:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <COM1_MspInit+0xac>)
 800161a:	f001 ffdd 	bl	80035d8 <HAL_GPIO_Init>
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
 800162c:	58020c00 	.word	0x58020c00

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f923 	bl	8001882 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800163c:	f003 f82e 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	4913      	ldr	r1, [pc, #76]	@ (800169c <HAL_Init+0x6c>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4a0e      	ldr	r2, [pc, #56]	@ (800169c <HAL_Init+0x6c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <HAL_Init+0x70>)
 8001672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_Init+0x74>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167a:	200f      	movs	r0, #15
 800167c:	f7ff fb56 	bl	8000d2c <HAL_InitTick>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e002      	b.n	8001690 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168a:	f7ff fb31 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024400 	.word	0x58024400
 800169c:	080183fc 	.word	0x080183fc
 80016a0:	24000004 	.word	0x24000004
 80016a4:	24000000 	.word	0x24000000

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	24000028 	.word	0x24000028
 80016cc:	24004eb0 	.word	0x24004eb0

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	24004eb0 	.word	0x24004eb0

080016e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetREVID+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0c1b      	lsrs	r3, r3, #16
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	5c001000 	.word	0x5c001000

08001700 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001710:	4904      	ldr	r1, [pc, #16]	@ (8001724 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	58000400 	.word	0x58000400

08001728 <__NVIC_SetPriorityGrouping>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <__NVIC_SetPriorityGrouping+0x40>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	05fa0000 	.word	0x05fa0000

08001770 <__NVIC_GetPriorityGrouping>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	@ (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ff4c 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a6:	f7ff ff63 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	6978      	ldr	r0, [r7, #20]
 80018b2:	f7ff ffb3 	bl	800181c <NVIC_EncodePriority>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff82 	bl	80017c8 <__NVIC_SetPriority>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff56 	bl	800178c <__NVIC_EnableIRQ>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018ec:	f3bf 8f5f 	dmb	sy
}
 80018f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_MPU_Disable+0x28>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <HAL_MPU_Disable+0x28>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_MPU_Disable+0x2c>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	e000ed90 	.word	0xe000ed90

08001918 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <HAL_MPU_Enable+0x38>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_MPU_Enable+0x3c>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_MPU_Enable+0x3c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001936:	f3bf 8f4f 	dsb	sy
}
 800193a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800193c:	f3bf 8f6f 	isb	sy
}
 8001940:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed90 	.word	0xe000ed90
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	785a      	ldrb	r2, [r3, #1]
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_MPU_ConfigRegion+0x7c>)
 8001966:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_MPU_ConfigRegion+0x7c>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <HAL_MPU_ConfigRegion+0x7c>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001974:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <HAL_MPU_ConfigRegion+0x7c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b1b      	ldrb	r3, [r3, #12]
 8001980:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7adb      	ldrb	r3, [r3, #11]
 8001986:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001988:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7a9b      	ldrb	r3, [r3, #10]
 800198e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7b9b      	ldrb	r3, [r3, #14]
 800199e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7bdb      	ldrb	r3, [r3, #15]
 80019a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a5b      	ldrb	r3, [r3, #9]
 80019ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7a1b      	ldrb	r3, [r3, #8]
 80019b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c4:	6113      	str	r3, [r2, #16]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed90 	.word	0xe000ed90

080019d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_GetCurrentCPUID+0x20>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e4:	2b70      	cmp	r3, #112	@ 0x70
 80019e6:	d101      	bne.n	80019ec <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e000      	b.n	80019ee <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80019ec:	2301      	movs	r3, #1
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0e3      	b.n	8001bd6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f005 fa5d 	bl	8006ee0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <HAL_ETH_Init+0x1e4>)
 8001a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a2c:	4a6c      	ldr	r2, [pc, #432]	@ (8001be0 <HAL_ETH_Init+0x1e4>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a36:	4b6a      	ldr	r3, [pc, #424]	@ (8001be0 <HAL_ETH_Init+0x1e4>)
 8001a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7a1b      	ldrb	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fe57 	bl	8001700 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a52:	e003      	b.n	8001a5c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a54:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a58:	f7ff fe52 	bl	8001700 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a5c:	4b61      	ldr	r3, [pc, #388]	@ (8001be4 <HAL_ETH_Init+0x1e8>)
 8001a5e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe2a 	bl	80016d0 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a7e:	e011      	b.n	8001aa4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a80:	f7ff fe26 	bl	80016d0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a8e:	d909      	bls.n	8001aa4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	22e0      	movs	r2, #224	@ 0xe0
 8001a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e098      	b.n	8001bd6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1e4      	bne.n	8001a80 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 ff32 	bl	8002920 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001abc:	f002 ff68 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <HAL_ETH_Init+0x1ec>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0c9a      	lsrs	r2, r3, #18
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f001 f92f 	bl	8002d38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001ae6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001af2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	22e0      	movs	r2, #224	@ 0xe0
 8001b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e05d      	b.n	8001bd6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b22:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b26:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <HAL_ETH_Init+0x1f0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6952      	ldr	r2, [r2, #20]
 8001b2e:	0051      	lsls	r1, r2, #1
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f001 f997 	bl	8002e72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f001 f9dd 	bl	8002f04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021a      	lsls	r2, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	061a      	lsls	r2, r3, #24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	3302      	adds	r3, #2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	3301      	adds	r3, #1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b96:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b98:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_ETH_Init+0x1f4>)
 8001baa:	430b      	orrs	r3, r1
 8001bac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_ETH_Init+0x1f8>)
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58000400 	.word	0x58000400
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	ffff8001 	.word	0xffff8001
 8001bf0:	0c020060 	.word	0x0c020060
 8001bf4:	0c20c000 	.word	0x0c20c000

08001bf8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d165      	bne.n	8001cd6 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9e4 	bl	8001fec <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c3c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c58:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c74:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0202 	orr.w	r2, r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cee:	2b40      	cmp	r3, #64	@ 0x40
 8001cf0:	d165      	bne.n	8001dbe <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d02:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_ETH_Stop_IT+0xec>)
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d12:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d2e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d4a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0202 	bic.w	r2, r2, #2
 8001d80:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e00e      	b.n	8001da6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	3212      	adds	r2, #18
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d9ed      	bls.n	8001d88 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	ffff2f3e 	.word	0xffff2f3e

08001dd0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e03a      	b.n	8001e6a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfa:	2b40      	cmp	r3, #64	@ 0x40
 8001dfc:	d134      	bne.n	8001e68 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e06:	2201      	movs	r2, #1
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 f8d8 	bl	8002fc0 <ETH_Prepare_Tx_Descriptors>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1c:	f043 0202 	orr.w	r2, r3, #2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e01f      	b.n	8001e6a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2a:	f3bf 8f4f 	dsb	sy
}
 8001e2e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d904      	bls.n	8001e4c <HAL_ETH_Transmit_IT+0x7c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	1f1a      	subs	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3106      	adds	r1, #6
 8001e58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e60:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b088      	sub	sp, #32
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0a2      	b.n	8001fe4 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea4:	2b40      	cmp	r3, #64	@ 0x40
 8001ea6:	d001      	beq.n	8001eac <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e09b      	b.n	8001fe4 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	3212      	adds	r2, #18
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec2:	f1c3 0304 	rsb	r3, r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ec8:	e064      	b.n	8001f94 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_ETH_ReadData+0x88>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03a      	beq.n	8001f70 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f005 f9a8 	bl	80072a4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d902      	bls.n	8001f82 <HAL_ETH_ReadData+0x110>
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	3212      	adds	r2, #18
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db06      	blt.n	8001faa <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d202      	bcs.n	8001faa <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d08f      	beq.n	8001eca <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f814 	bl	8001fec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002000:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	3212      	adds	r2, #18
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002012:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002014:	e038      	b.n	8002088 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f90e 	bl	8007244 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	74fb      	strb	r3, [r7, #19]
 8002032:	e007      	b.n	8002044 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	461a      	mov	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	461a      	mov	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01e      	beq.n	8002088 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	e003      	b.n	8002064 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002062:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3301      	adds	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d902      	bls.n	8002076 <ETH_UpdateDescriptor+0x8a>
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3b04      	subs	r3, #4
 8002074:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	3212      	adds	r2, #18
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	617b      	str	r3, [r7, #20]
      desccount--;
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	3b01      	subs	r3, #1
 8002086:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <ETH_UpdateDescriptor+0xa8>
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1c0      	bne.n	8002016 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	429a      	cmp	r2, r3
 800209c:	d01b      	beq.n	80020d6 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3303      	adds	r3, #3
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80020a8:	f3bf 8f5f 	dmb	sy
}
 80020ac:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	18ca      	adds	r2, r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3318      	adds	r3, #24
 80020ea:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020fc:	e047      	b.n	800218e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80020fe:	2301      	movs	r3, #1
 8002100:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3b01      	subs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3304      	adds	r3, #4
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	3301      	adds	r3, #1
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d902      	bls.n	800212a <HAL_ETH_ReleaseTxPacket+0x4c>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	3b04      	subs	r3, #4
 8002128:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02c      	beq.n	800218e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68d9      	ldr	r1, [r3, #12]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db1f      	blt.n	800218a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	3304      	adds	r3, #4
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f005 f90c 	bl	8007374 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3304      	adds	r3, #4
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	3301      	adds	r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d902      	bls.n	800217c <HAL_ETH_ReleaseTxPacket+0x9e>
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3b04      	subs	r3, #4
 800217a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002188:	e001      	b.n	800218e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_ETH_ReleaseTxPacket+0xbc>
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1b1      	bne.n	80020fe <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021be:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80021c2:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80021d2:	4b77      	ldr	r3, [pc, #476]	@ (80023b0 <HAL_ETH_IRQHandler+0x20c>)
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 80021d8:	4b76      	ldr	r3, [pc, #472]	@ (80023b4 <HAL_ETH_IRQHandler+0x210>)
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_ETH_IRQHandler+0x66>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fa:	461a      	mov	r2, r3
 80021fc:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002200:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 fb99 	bl	800693c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_ETH_IRQHandler+0x92>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002226:	461a      	mov	r2, r3
 8002228:	f248 0301 	movw	r3, #32769	@ 0x8001
 800222c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f004 fb93 	bl	800695c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d047      	beq.n	80022d0 <HAL_ETH_IRQHandler+0x12c>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d042      	beq.n	80022d0 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	f043 0208 	orr.w	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01e      	beq.n	80022a2 <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002270:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002284:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002290:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002294:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	22e0      	movs	r2, #224	@ 0xe0
 800229c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022a0:	e013      	b.n	80022ca <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80022ae:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80022c6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f004 fb56 	bl	800697c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d019      	beq.n	8002318 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	22e0      	movs	r2, #224	@ 0xe0
 8002306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f004 fb36 	bl	800697c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00f      	beq.n	8002342 <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800232a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f83f 	bl	80023b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00f      	beq.n	800236c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f834 	bl	80023cc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800236c:	f7ff fb34 	bl	80019d8 <HAL_GetCurrentCPUID>
 8002370:	4603      	mov	r3, r0
 8002372:	2b03      	cmp	r3, #3
 8002374:	d10c      	bne.n	8002390 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_ETH_IRQHandler+0x20c>)
 8002382:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f829 	bl	80023e0 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800238e:	e00b      	b.n	80023a8 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_ETH_IRQHandler+0x210>)
 800239c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f81c 	bl	80023e0 <HAL_ETH_WakeUpCallback>
}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	58000080 	.word	0x58000080
 80023b4:	580000c0 	.word	0x580000c0

080023b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e03e      	b.n	8002494 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800241e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	055b      	lsls	r3, r3, #21
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f043 030c 	orr.w	r3, r3, #12
 8002442:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002456:	f7ff f93b 	bl	80016d0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800245c:	e009      	b.n	8002472 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800245e:	f7ff f937 	bl	80016d0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800246c:	d901      	bls.n	8002472 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e010      	b.n	8002494 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ed      	bne.n	800245e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03c      	b.n	8002538 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	055b      	lsls	r3, r3, #21
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 030c 	bic.w	r3, r3, #12
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_ETH_WritePHYRegister+0xa4>)
 80024fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002502:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <HAL_ETH_WritePHYRegister+0xa4>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800250a:	f7ff f8e1 	bl	80016d0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002510:	e009      	b.n	8002526 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002512:	f7ff f8dd 	bl	80016d0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002520:	d901      	bls.n	8002526 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e008      	b.n	8002538 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ed      	bne.n	8002512 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40028000 	.word	0x40028000

08002544 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e1c3      	b.n	80028e0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80025e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80026d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002768:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0e5b      	lsrs	r3, r3, #25
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	b29a      	uxth	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800286c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800287c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e00b      	b.n	8002918 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002906:	2b10      	cmp	r3, #16
 8002908:	d105      	bne.n	8002916 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f871 	bl	80029f4 <ETH_SetMACConfig>

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002930:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002938:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800293a:	f002 f829 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 800293e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d804      	bhi.n	8002952 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e022      	b.n	8002998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4a16      	ldr	r2, [pc, #88]	@ (80029b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d204      	bcs.n	8002964 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	e019      	b.n	8002998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d915      	bls.n	8002998 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d804      	bhi.n	800297e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e00c      	b.n	8002998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a0e      	ldr	r2, [pc, #56]	@ (80029bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d804      	bhi.n	8002990 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e003      	b.n	8002998 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	02160ebf 	.word	0x02160ebf
 80029b0:	03938700 	.word	0x03938700
 80029b4:	05f5e0ff 	.word	0x05f5e0ff
 80029b8:	08f0d17f 	.word	0x08f0d17f
 80029bc:	0ee6b27f 	.word	0x0ee6b27f

080029c0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	7b1b      	ldrb	r3, [r3, #12]
 8002a14:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7b5b      	ldrb	r3, [r3, #13]
 8002a1c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	7b9b      	ldrb	r3, [r3, #14]
 8002a24:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7bdb      	ldrb	r3, [r3, #15]
 8002a2c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	7c12      	ldrb	r2, [r2, #16]
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d102      	bne.n	8002a3e <ETH_SetMACConfig+0x4a>
 8002a38:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a3c:	e000      	b.n	8002a40 <ETH_SetMACConfig+0x4c>
 8002a3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a40:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	7c52      	ldrb	r2, [r2, #17]
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d102      	bne.n	8002a50 <ETH_SetMACConfig+0x5c>
 8002a4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a4e:	e000      	b.n	8002a52 <ETH_SetMACConfig+0x5e>
 8002a50:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	7c9b      	ldrb	r3, [r3, #18]
 8002a58:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a5a:	431a      	orrs	r2, r3
               macconf->Speed |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a60:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7f1b      	ldrb	r3, [r3, #28]
 8002a6c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f5b      	ldrb	r3, [r3, #29]
 8002a74:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	7f92      	ldrb	r2, [r2, #30]
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d102      	bne.n	8002a86 <ETH_SetMACConfig+0x92>
 8002a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x94>
 8002a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7fdb      	ldrb	r3, [r3, #31]
 8002a8e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d102      	bne.n	8002aa2 <ETH_SetMACConfig+0xae>
 8002a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa0:	e000      	b.n	8002aa4 <ETH_SetMACConfig+0xb0>
 8002aa2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002aa4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ab2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002ab4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b56      	ldr	r3, [pc, #344]	@ (8002c20 <ETH_SetMACConfig+0x22c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ade:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ae0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ae8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002af2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002af4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d102      	bne.n	8002b06 <ETH_SetMACConfig+0x112>
 8002b00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b04:	e000      	b.n	8002b08 <ETH_SetMACConfig+0x114>
 8002b06:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b08:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4b42      	ldr	r3, [pc, #264]	@ (8002c24 <ETH_SetMACConfig+0x230>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <ETH_SetMACConfig+0x234>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b50:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d101      	bne.n	8002b66 <ETH_SetMACConfig+0x172>
 8002b62:	2280      	movs	r2, #128	@ 0x80
 8002b64:	e000      	b.n	8002b68 <ETH_SetMACConfig+0x174>
 8002b66:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b68:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b7a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002b90:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002b98:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	f023 0103 	bic.w	r1, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002bbe:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d101      	bne.n	8002be2 <ETH_SetMACConfig+0x1ee>
 8002bde:	2240      	movs	r2, #64	@ 0x40
 8002be0:	e000      	b.n	8002be4 <ETH_SetMACConfig+0x1f0>
 8002be2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002be4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002bec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002bf6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002c04:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	00048083 	.word	0x00048083
 8002c24:	c0f88000 	.word	0xc0f88000
 8002c28:	fffffef0 	.word	0xfffffef0

08002c2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <ETH_SetDMAConfig+0xf8>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c52:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	791b      	ldrb	r3, [r3, #4]
 8002c58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7b1b      	ldrb	r3, [r3, #12]
 8002c64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <ETH_SetDMAConfig+0xfc>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c84:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7b5b      	ldrb	r3, [r3, #13]
 8002c8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002ca0:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <ETH_SetDMAConfig+0x100>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	430b      	orrs	r3, r1
 8002cac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7d1b      	ldrb	r3, [r3, #20]
 8002cbc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cbe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7f5b      	ldrb	r3, [r3, #29]
 8002cc4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002cd6:	4b16      	ldr	r3, [pc, #88]	@ (8002d30 <ETH_SetDMAConfig+0x104>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ce6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	7f1b      	ldrb	r3, [r3, #28]
 8002cee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d00:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <ETH_SetDMAConfig+0x108>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d14:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	ffff87fd 	.word	0xffff87fd
 8002d28:	ffff2ffe 	.word	0xffff2ffe
 8002d2c:	fffec000 	.word	0xfffec000
 8002d30:	ffc0efef 	.word	0xffc0efef
 8002d34:	7fc0ffff 	.word	0x7fc0ffff

08002d38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0a4      	sub	sp, #144	@ 0x90
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d46:	2300      	movs	r3, #0
 8002d48:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d78:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d90:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002d94:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002db2:	2300      	movs	r3, #0
 8002db4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002de2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002de8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dec:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e12:	2300      	movs	r3, #0
 8002e14:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff fde6 	bl	80029f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e58:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fee1 	bl	8002c2c <ETH_SetDMAConfig>
}
 8002e6a:	bf00      	nop
 8002e6c:	3790      	adds	r7, #144	@ 0x90
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e01d      	b.n	8002ebc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68d9      	ldr	r1, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	3206      	adds	r2, #6
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d9de      	bls.n	8002e80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e023      	b.n	8002f5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	3212      	adds	r2, #18
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d9d8      	bls.n	8002f12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f86:	461a      	mov	r2, r3
 8002f88:	2303      	movs	r3, #3
 8002f8a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b091      	sub	sp, #68	@ 0x44
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3318      	adds	r3, #24
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003002:	d007      	beq.n	8003014 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003008:	3304      	adds	r3, #4
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003014:	2302      	movs	r3, #2
 8003016:	e266      	b.n	80034e6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d044      	beq.n	80030ae <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b75      	ldr	r3, [pc, #468]	@ (8003200 <ETH_Prepare_Tx_Descriptors+0x240>)
 800302a:	4013      	ands	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003030:	431a      	orrs	r2, r3
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003050:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d027      	beq.n	80030ae <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	b29a      	uxth	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	431a      	orrs	r2, r3
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800309c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80030ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <ETH_Prepare_Tx_Descriptors+0x244>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	6992      	ldr	r2, [r2, #24]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d036      	beq.n	800315e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80030fc:	f3bf 8f5f 	dmb	sy
}
 8003100:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800310e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003110:	3301      	adds	r3, #1
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003116:	2b03      	cmp	r3, #3
 8003118:	d902      	bls.n	8003120 <ETH_Prepare_Tx_Descriptors+0x160>
 800311a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311c:	3b04      	subs	r3, #4
 800311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	3301      	adds	r3, #1
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800313c:	d10f      	bne.n	800315e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003146:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003148:	f3bf 8f5f 	dmb	sy
}
 800314c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e1c3      	b.n	80034e6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	3301      	adds	r3, #1
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003174:	4013      	ands	r3, r2
 8003176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003178:	6852      	ldr	r2, [r2, #4]
 800317a:	431a      	orrs	r2, r3
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	4b1a      	ldr	r3, [pc, #104]	@ (8003208 <ETH_Prepare_Tx_Descriptors+0x248>)
 800319e:	4013      	ands	r3, r2
 80031a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a2:	6852      	ldr	r2, [r2, #4]
 80031a4:	0412      	lsls	r2, r2, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e008      	b.n	80031c0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <ETH_Prepare_Tx_Descriptors+0x248>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031be:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d021      	beq.n	8003210 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	04db      	lsls	r3, r3, #19
 80031da:	431a      	orrs	r2, r3
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <ETH_Prepare_Tx_Descriptors+0x24c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	69d2      	ldr	r2, [r2, #28]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e02e      	b.n	800325e <ETH_Prepare_Tx_Descriptors+0x29e>
 8003200:	ffff0000 	.word	0xffff0000
 8003204:	ffffc000 	.word	0xffffc000
 8003208:	c000ffff 	.word	0xc000ffff
 800320c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b7b      	ldr	r3, [pc, #492]	@ (8003404 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	6852      	ldr	r2, [r2, #4]
 800321c:	431a      	orrs	r2, r3
 800321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003220:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	431a      	orrs	r2, r3
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	431a      	orrs	r2, r3
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003294:	f3bf 8f5f 	dmb	sy
}
 8003298:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80da 	beq.w	8003468 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80032c6:	e0cf      	b.n	8003468 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80032d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d6:	3301      	adds	r3, #1
 80032d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d902      	bls.n	80032e6 <ETH_Prepare_Tx_Descriptors+0x326>
 80032e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e2:	3b04      	subs	r3, #4
 80032e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003308:	d007      	beq.n	800331a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330e:	3304      	adds	r3, #4
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d029      	beq.n	800336e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003328:	2300      	movs	r3, #0
 800332a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800332c:	e019      	b.n	8003362 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800332e:	f3bf 8f5f 	dmb	sy
}
 8003332:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003342:	3301      	adds	r3, #1
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	2b03      	cmp	r3, #3
 800334a:	d902      	bls.n	8003352 <ETH_Prepare_Tx_Descriptors+0x392>
 800334c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334e:	3b04      	subs	r3, #4
 8003350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	3301      	adds	r3, #1
 8003360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003362:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	429a      	cmp	r2, r3
 8003368:	d3e1      	bcc.n	800332e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e0bb      	b.n	80034e6 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800336e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003370:	3301      	adds	r3, #1
 8003372:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003382:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <ETH_Prepare_Tx_Descriptors+0x448>)
 800338a:	4013      	ands	r3, r2
 800338c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338e:	6852      	ldr	r2, [r2, #4]
 8003390:	431a      	orrs	r2, r3
 8003392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003394:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80033a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	4b16      	ldr	r3, [pc, #88]	@ (800340c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b8:	6852      	ldr	r2, [r2, #4]
 80033ba:	0412      	lsls	r2, r2, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	e008      	b.n	80033d6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <ETH_Prepare_Tx_Descriptors+0x450>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	69d2      	ldr	r2, [r2, #28]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	e020      	b.n	8003444 <ETH_Prepare_Tx_Descriptors+0x484>
 8003402:	bf00      	nop
 8003404:	ffff8000 	.word	0xffff8000
 8003408:	ffffc000 	.word	0xffffc000
 800340c:	c000ffff 	.word	0xc000ffff
 8003410:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	4b36      	ldr	r3, [pc, #216]	@ (80034f4 <ETH_Prepare_Tx_Descriptors+0x534>)
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	6852      	ldr	r2, [r2, #4]
 8003420:	431a      	orrs	r2, r3
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	3301      	adds	r3, #1
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800344a:	f3bf 8f5f 	dmb	sy
}
 800344e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f af2b 	bne.w	80032c8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e005      	b.n	8003492 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a6:	3304      	adds	r3, #4
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b4:	f3ef 8310 	mrs	r3, PRIMASK
 80034b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ba:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	4413      	add	r3, r2
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3744      	adds	r7, #68	@ 0x44
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	ffff8000 	.word	0xffff8000

080034f8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	460b      	mov	r3, r1
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e00a      	b.n	800352a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]
      break;
 8003520:	e002      	b.n	8003528 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	bf00      	nop
  }

  return status;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
}
 800352a:	4618      	mov	r0, r3
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e003      	b.n	8003552 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003550:	2300      	movs	r3, #0
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8003584:	f7fe fa28 	bl	80019d8 <HAL_GetCurrentCPUID>
 8003588:	4603      	mov	r3, r0
 800358a:	2b03      	cmp	r3, #3
 800358c:	d105      	bne.n	800359a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	011a      	lsls	r2, r3, #4
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_EXTI_IRQHandler+0x70>)
 8003594:	4413      	add	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e004      	b.n	80035a4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	011a      	lsls	r2, r3, #4
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <HAL_EXTI_IRQHandler+0x74>)
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4013      	ands	r3, r2
 80035ac:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4798      	blx	r3
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58000088 	.word	0x58000088
 80035d4:	580000c8 	.word	0x580000c8

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	@ 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035e6:	4b89      	ldr	r3, [pc, #548]	@ (800380c <HAL_GPIO_Init+0x234>)
 80035e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035ea:	e194      	b.n	8003916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8186 	beq.w	8003910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d005      	beq.n	800361c <HAL_GPIO_Init+0x44>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b03      	cmp	r3, #3
 8003688:	d017      	beq.n	80036ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d123      	bne.n	800370e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	08da      	lsrs	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3208      	adds	r2, #8
 80036ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80e0 	beq.w	8003910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003750:	4b2f      	ldr	r3, [pc, #188]	@ (8003810 <HAL_GPIO_Init+0x238>)
 8003752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003756:	4a2e      	ldr	r2, [pc, #184]	@ (8003810 <HAL_GPIO_Init+0x238>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003760:	4b2b      	ldr	r3, [pc, #172]	@ (8003810 <HAL_GPIO_Init+0x238>)
 8003762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376e:	4a29      	ldr	r2, [pc, #164]	@ (8003814 <HAL_GPIO_Init+0x23c>)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a20      	ldr	r2, [pc, #128]	@ (8003818 <HAL_GPIO_Init+0x240>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d052      	beq.n	8003840 <HAL_GPIO_Init+0x268>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1f      	ldr	r2, [pc, #124]	@ (800381c <HAL_GPIO_Init+0x244>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d031      	beq.n	8003806 <HAL_GPIO_Init+0x22e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003820 <HAL_GPIO_Init+0x248>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02b      	beq.n	8003802 <HAL_GPIO_Init+0x22a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <HAL_GPIO_Init+0x24c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d025      	beq.n	80037fe <HAL_GPIO_Init+0x226>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <HAL_GPIO_Init+0x250>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <HAL_GPIO_Init+0x222>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_GPIO_Init+0x254>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d019      	beq.n	80037f6 <HAL_GPIO_Init+0x21e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_GPIO_Init+0x258>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_GPIO_Init+0x21a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_GPIO_Init+0x25c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00d      	beq.n	80037ee <HAL_GPIO_Init+0x216>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_GPIO_Init+0x260>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d007      	beq.n	80037ea <HAL_GPIO_Init+0x212>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a17      	ldr	r2, [pc, #92]	@ (800383c <HAL_GPIO_Init+0x264>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_GPIO_Init+0x20e>
 80037e2:	2309      	movs	r3, #9
 80037e4:	e02d      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037e6:	230a      	movs	r3, #10
 80037e8:	e02b      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037ea:	2308      	movs	r3, #8
 80037ec:	e029      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e027      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037f2:	2306      	movs	r3, #6
 80037f4:	e025      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037f6:	2305      	movs	r3, #5
 80037f8:	e023      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037fa:	2304      	movs	r3, #4
 80037fc:	e021      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 80037fe:	2303      	movs	r3, #3
 8003800:	e01f      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 8003802:	2302      	movs	r3, #2
 8003804:	e01d      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 8003806:	2301      	movs	r3, #1
 8003808:	e01b      	b.n	8003842 <HAL_GPIO_Init+0x26a>
 800380a:	bf00      	nop
 800380c:	58000080 	.word	0x58000080
 8003810:	58024400 	.word	0x58024400
 8003814:	58000400 	.word	0x58000400
 8003818:	58020000 	.word	0x58020000
 800381c:	58020400 	.word	0x58020400
 8003820:	58020800 	.word	0x58020800
 8003824:	58020c00 	.word	0x58020c00
 8003828:	58021000 	.word	0x58021000
 800382c:	58021400 	.word	0x58021400
 8003830:	58021800 	.word	0x58021800
 8003834:	58021c00 	.word	0x58021c00
 8003838:	58022000 	.word	0x58022000
 800383c:	58022400 	.word	0x58022400
 8003840:	2300      	movs	r3, #0
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003852:	4938      	ldr	r1, [pc, #224]	@ (8003934 <HAL_GPIO_Init+0x35c>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f ae63 	bne.w	80035ec <HAL_GPIO_Init+0x14>
  }
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	3724      	adds	r7, #36	@ 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	58000400 	.word	0x58000400

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003954:	e003      	b.n	800395e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	041a      	lsls	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003974:	4a08      	ldr	r2, [pc, #32]	@ (8003998 <HAL_HSEM_FastTake+0x2c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	4a07      	ldr	r2, [pc, #28]	@ (800399c <HAL_HSEM_FastTake+0x30>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	58026400 	.word	0x58026400
 800399c:	80000300 	.word	0x80000300

080039a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039aa:	4906      	ldr	r1, [pc, #24]	@ (80039c4 <HAL_HSEM_Release+0x24>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	58026400 	.word	0x58026400

080039c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039d0:	4b29      	ldr	r3, [pc, #164]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d00a      	beq.n	80039f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039dc:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d001      	beq.n	80039ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e040      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e03e      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039f2:	4b21      	ldr	r3, [pc, #132]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039fa:	491f      	ldr	r1, [pc, #124]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a02:	f7fd fe65 	bl	80016d0 <HAL_GetTick>
 8003a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a08:	e009      	b.n	8003a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a0a:	f7fd fe61 	bl	80016d0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a18:	d901      	bls.n	8003a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e028      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2a:	d1ee      	bne.n	8003a0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b1e      	cmp	r3, #30
 8003a30:	d008      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a36:	d005      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b1d      	cmp	r3, #29
 8003a3c:	d002      	beq.n	8003a44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a42:	d114      	bne.n	8003a6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a44:	f7fd fe44 	bl	80016d0 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a4a:	e009      	b.n	8003a60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a4c:	f7fd fe40 	bl	80016d0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a5a:	d901      	bls.n	8003a60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6c:	d1ee      	bne.n	8003a4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024800 	.word	0x58024800

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 bc48 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8088 	beq.w	8003bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b99      	ldr	r3, [pc, #612]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa8:	4b96      	ldr	r3, [pc, #600]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d007      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x48>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	2b18      	cmp	r3, #24
 8003ab8:	d111      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d06d      	beq.n	8003bac <HAL_RCC_OscConfig+0x130>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d169      	bne.n	8003bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f000 bc21 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x7a>
 8003ae8:	4b86      	ldr	r3, [pc, #536]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a85      	ldr	r2, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x9c>
 8003afe:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a80      	ldr	r2, [pc, #512]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b22:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a74      	ldr	r2, [pc, #464]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b3c:	4b71      	ldr	r3, [pc, #452]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a70      	ldr	r2, [pc, #448]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6e      	ldr	r3, [pc, #440]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fdb8 	bl	80016d0 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fdb4 	bl	80016d0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e3d4      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b76:	4b63      	ldr	r3, [pc, #396]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fda4 	bl	80016d0 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fda0 	bl	80016d0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e3c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9e:	4b59      	ldr	r3, [pc, #356]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x110>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ca 	beq.w	8003d50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbc:	4b51      	ldr	r3, [pc, #324]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCC_OscConfig+0x166>
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b18      	cmp	r3, #24
 8003bd6:	d156      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d151      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x17e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e392      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0219 	bic.w	r2, r3, #25
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	493f      	ldr	r1, [pc, #252]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fd60 	bl	80016d0 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd fd5c 	bl	80016d0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e37c      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	f7fd fd59 	bl	80016e8 <HAL_GetREVID>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d817      	bhi.n	8003c70 <HAL_RCC_OscConfig+0x1f4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d108      	bne.n	8003c5a <HAL_RCC_OscConfig+0x1de>
 8003c48:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e07a      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	4926      	ldr	r1, [pc, #152]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6e:	e06f      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c84:	e064      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d047      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0219 	bic.w	r2, r3, #25
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	491a      	ldr	r1, [pc, #104]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fd16 	bl	80016d0 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fd12 	bl	80016d0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e332      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	f7fd fd0f 	bl	80016e8 <HAL_GetREVID>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d819      	bhi.n	8003d08 <HAL_RCC_OscConfig+0x28c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d108      	bne.n	8003cee <HAL_RCC_OscConfig+0x272>
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	6053      	str	r3, [r2, #4]
 8003cec:	e030      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	031b      	lsls	r3, r3, #12
 8003cfc:	4901      	ldr	r1, [pc, #4]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e025      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003d04:	58024400 	.word	0x58024400
 8003d08:	4b9a      	ldr	r3, [pc, #616]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	4997      	ldr	r1, [pc, #604]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a94      	ldr	r2, [pc, #592]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fcd1 	bl	80016d0 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fccd 	bl	80016d0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2ed      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d44:	4b8b      	ldr	r3, [pc, #556]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a9 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b82      	ldr	r3, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x308>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d13a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b80      	cmp	r3, #128	@ 0x80
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e2c1      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9c:	f7fd fca4 	bl	80016e8 <HAL_GetREVID>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d817      	bhi.n	8003dda <HAL_RCC_OscConfig+0x35e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x348>
 8003db2:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003dba:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dc2:	e075      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	4968      	ldr	r1, [pc, #416]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd8:	e06a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dda:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	4962      	ldr	r1, [pc, #392]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dee:	e05f      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d042      	beq.n	8003e7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003df8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fc64 	bl	80016d0 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fc60 	bl	80016d0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e280      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e1e:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e2a:	f7fd fc5d 	bl	80016e8 <HAL_GetREVID>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d817      	bhi.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d108      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3d6>
 8003e40:	4b4c      	ldr	r3, [pc, #304]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e02e      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	069b      	lsls	r3, r3, #26
 8003e60:	4944      	ldr	r1, [pc, #272]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e023      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e68:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	493f      	ldr	r1, [pc, #252]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3c      	ldr	r2, [pc, #240]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fc21 	bl	80016d0 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fd fc1d 	bl	80016d0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e23d      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d036      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fbfe 	bl	80016d0 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fbfa 	bl	80016d0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e21a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x45c>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fbe4 	bl	80016d0 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fbe0 	bl	80016d0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e200      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d039      	beq.n	8003faa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fbc1 	bl	80016d0 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fd fbbd 	bl	80016d0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1dd      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4d6>
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x52e>
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f78:	4b9b      	ldr	r3, [pc, #620]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f84:	f7fd fba4 	bl	80016d0 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f8c:	f7fd fba0 	bl	80016d0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f9e:	4b92      	ldr	r3, [pc, #584]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8081 	beq.w	80040ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a8b      	ldr	r2, [pc, #556]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fb84 	bl	80016d0 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd fb80 	bl	80016d0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1a0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fde:	4b83      	ldr	r3, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x584>
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e02d      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8004008:	4b77      	ldr	r3, [pc, #476]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a76      	ldr	r2, [pc, #472]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b74      	ldr	r3, [pc, #464]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a73      	ldr	r2, [pc, #460]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x5c8>
 800402a:	4b6f      	ldr	r3, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a6e      	ldr	r2, [pc, #440]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
 8004036:	4b6c      	ldr	r3, [pc, #432]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a6b      	ldr	r2, [pc, #428]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004044:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	4b65      	ldr	r3, [pc, #404]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a64      	ldr	r2, [pc, #400]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd fb34 	bl	80016d0 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fb30 	bl	80016d0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e14e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004082:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x5f0>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fb1e 	bl	80016d0 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd fb1a 	bl	80016d0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e138      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ae:	4b4e      	ldr	r3, [pc, #312]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 812d 	beq.w	800431e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c4:	4b48      	ldr	r3, [pc, #288]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040cc:	2b18      	cmp	r3, #24
 80040ce:	f000 80bd 	beq.w	800424c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 809e 	bne.w	8004218 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a41      	ldr	r2, [pc, #260]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd faf2 	bl	80016d0 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd faee 	bl	80016d0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e10e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004112:	4b37      	ldr	r3, [pc, #220]	@ (80041f0 <HAL_RCC_OscConfig+0x774>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	430a      	orrs	r2, r1
 8004122:	4931      	ldr	r1, [pc, #196]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	628b      	str	r3, [r1, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	3b01      	subs	r3, #1
 800412e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	3b01      	subs	r3, #1
 8004138:	025b      	lsls	r3, r3, #9
 800413a:	b29b      	uxth	r3, r3
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	3b01      	subs	r3, #1
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	3b01      	subs	r3, #1
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004158:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800416a:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x778>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004176:	00d2      	lsls	r2, r2, #3
 8004178:	491b      	ldr	r1, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4917      	ldr	r1, [pc, #92]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	f023 0202 	bic.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	4912      	ldr	r1, [pc, #72]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4a07      	ldr	r2, [pc, #28]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd fa77 	bl	80016d0 <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e4:	e011      	b.n	800420a <HAL_RCC_OscConfig+0x78e>
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	58024800 	.word	0x58024800
 80041f0:	fffffc0c 	.word	0xfffffc0c
 80041f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fa6a 	bl	80016d0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e08a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x77c>
 8004216:	e082      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fa54 	bl	80016d0 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd fa50 	bl	80016d0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e070      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423e:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x7b0>
 800424a:	e068      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800424c:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004252:	4b35      	ldr	r3, [pc, #212]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2b01      	cmp	r3, #1
 800425e:	d031      	beq.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d12a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d122      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0a5b      	lsrs	r3, r3, #9
 8004292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02b      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042c8:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d01f      	beq.n	800431e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ea:	f7fd f9f1 	bl	80016d0 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042f0:	bf00      	nop
 80042f2:	f7fd f9ed 	bl	80016d0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d0f9      	beq.n	80042f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_OscConfig+0x8b0>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004312:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3730      	adds	r7, #48	@ 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	58024400 	.word	0x58024400
 800432c:	ffff0007 	.word	0xffff0007

08004330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e19c      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b8a      	ldr	r3, [pc, #552]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b87      	ldr	r3, [pc, #540]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	4985      	ldr	r1, [pc, #532]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b83      	ldr	r3, [pc, #524]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e184      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	4b7b      	ldr	r3, [pc, #492]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004390:	4b78      	ldr	r3, [pc, #480]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4975      	ldr	r1, [pc, #468]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d908      	bls.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	496a      	ldr	r1, [pc, #424]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b64      	ldr	r3, [pc, #400]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d908      	bls.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ec:	4b61      	ldr	r3, [pc, #388]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	495e      	ldr	r1, [pc, #376]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800441a:	4b56      	ldr	r3, [pc, #344]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4953      	ldr	r1, [pc, #332]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004428:	4313      	orrs	r3, r2
 800442a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	429a      	cmp	r2, r3
 8004446:	d908      	bls.n	800445a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f023 020f 	bic.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4947      	ldr	r1, [pc, #284]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d055      	beq.n	8004512 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004466:	4b43      	ldr	r3, [pc, #268]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4940      	ldr	r1, [pc, #256]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004474:	4313      	orrs	r3, r2
 8004476:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004480:	4b3c      	ldr	r3, [pc, #240]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b36      	ldr	r3, [pc, #216]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ea      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b0:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0de      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0d6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044d0:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 0207 	bic.w	r2, r3, #7
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4925      	ldr	r1, [pc, #148]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e2:	f7fd f8f5 	bl	80016d0 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd f8f1 	bl	80016d0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0be      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	429a      	cmp	r2, r3
 8004510:	d1eb      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	429a      	cmp	r2, r3
 800452c:	d208      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	490e      	ldr	r1, [pc, #56]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d214      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4906      	ldr	r1, [pc, #24]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e086      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
 8004570:	52002000 	.word	0x52002000
 8004574:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d208      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004594:	4b3c      	ldr	r3, [pc, #240]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4939      	ldr	r1, [pc, #228]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045be:	429a      	cmp	r2, r3
 80045c0:	d208      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	492e      	ldr	r1, [pc, #184]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d208      	bcs.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4922      	ldr	r1, [pc, #136]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800461a:	429a      	cmp	r2, r3
 800461c:	d208      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800461e:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4917      	ldr	r1, [pc, #92]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800462c:	4313      	orrs	r3, r2
 800462e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004630:	f000 f834 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4912      	ldr	r1, [pc, #72]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464e:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004658:	5cd3      	ldrb	r3, [r2, r3]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x360>)
 8004666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004668:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x364>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <HAL_RCC_ClockConfig+0x368>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fb5a 	bl	8000d2c <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	080183fc 	.word	0x080183fc
 8004690:	24000004 	.word	0x24000004
 8004694:	24000000 	.word	0x24000000
 8004698:	24000024 	.word	0x24000024

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	@ 0x24
 80046a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	f200 8155 	bhi.w	800495a <HAL_RCC_GetSysClockFreq+0x2be>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800495b 	.word	0x0800495b
 80046c0:	0800495b 	.word	0x0800495b
 80046c4:	0800495b 	.word	0x0800495b
 80046c8:	0800495b 	.word	0x0800495b
 80046cc:	0800495b 	.word	0x0800495b
 80046d0:	0800495b 	.word	0x0800495b
 80046d4:	0800495b 	.word	0x0800495b
 80046d8:	08004743 	.word	0x08004743
 80046dc:	0800495b 	.word	0x0800495b
 80046e0:	0800495b 	.word	0x0800495b
 80046e4:	0800495b 	.word	0x0800495b
 80046e8:	0800495b 	.word	0x0800495b
 80046ec:	0800495b 	.word	0x0800495b
 80046f0:	0800495b 	.word	0x0800495b
 80046f4:	0800495b 	.word	0x0800495b
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800495b 	.word	0x0800495b
 8004700:	0800495b 	.word	0x0800495b
 8004704:	0800495b 	.word	0x0800495b
 8004708:	0800495b 	.word	0x0800495b
 800470c:	0800495b 	.word	0x0800495b
 8004710:	0800495b 	.word	0x0800495b
 8004714:	0800495b 	.word	0x0800495b
 8004718:	0800474f 	.word	0x0800474f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b94      	ldr	r3, [pc, #592]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004728:	4b91      	ldr	r3, [pc, #580]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a90      	ldr	r2, [pc, #576]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800473a:	e111      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	e10e      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004742:	4b8d      	ldr	r3, [pc, #564]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
      break;
 8004746:	e10b      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004748:	4b8c      	ldr	r3, [pc, #560]	@ (800497c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800474a:	61bb      	str	r3, [r7, #24]
      break;
 800474c:	e108      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474e:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004758:	4b85      	ldr	r3, [pc, #532]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004762:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004764:	4b82      	ldr	r3, [pc, #520]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476e:	4b80      	ldr	r3, [pc, #512]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80e1 	beq.w	8004954 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	f000 8083 	beq.w	80048a0 <HAL_RCC_GetSysClockFreq+0x204>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b02      	cmp	r3, #2
 800479e:	f200 80a1 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x114>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d056      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x1c0>
 80047ae:	e099      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b62      	ldr	r3, [pc, #392]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004816:	e087      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b51      	ldr	r3, [pc, #324]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485a:	e065      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489e:	e043      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800498c <HAL_RCC_GetSysClockFreq+0x2f0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048e2:	e021      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a02 	vldr	s12, [r7, #8]
 800490a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004926:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004928:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004932:	3301      	adds	r3, #1
 8004934:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 3a90 	vmov	r3, s15
 8004950:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
      break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	bf00      	nop
  }

  return sysclockfreq;
 8004960:	69bb      	ldr	r3, [r7, #24]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3724      	adds	r7, #36	@ 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	003d0900 	.word	0x003d0900
 800497c:	017d7840 	.word	0x017d7840
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4bbebc20 	.word	0x4bbebc20

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004996:	f7ff fe81 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490f      	ldr	r1, [pc, #60]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ce:	4a07      	ldr	r2, [pc, #28]	@ (80049ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400
 80049e4:	080183fc 	.word	0x080183fc
 80049e8:	24000004 	.word	0x24000004
 80049ec:	24000000 	.word	0x24000000

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049f4:	f7ff ffcc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	080183fc 	.word	0x080183fc

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a20:	f7ff ffb6 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58024400 	.word	0x58024400
 8004a44:	080183fc 	.word	0x080183fc

08004a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223f      	movs	r2, #63	@ 0x3f
 8004a56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0207 	and.w	r2, r3, #7
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a64:	4b17      	ldr	r3, [pc, #92]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a7c:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004aa0:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x7c>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_GetClockConfig+0x80>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	52002000 	.word	0x52002000

08004acc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ad0:	f7ff ff5e 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	@ (8004af4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	58024400 	.word	0x58024400
 8004af4:	080183fc 	.word	0x080183fc

08004af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	@ 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b00:	4ba1      	ldr	r3, [pc, #644]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b0a:	4b9f      	ldr	r3, [pc, #636]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	0b1b      	lsrs	r3, r3, #12
 8004b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b16:	4b9c      	ldr	r3, [pc, #624]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b22:	4b99      	ldr	r3, [pc, #612]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8111 	beq.w	8004d68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	f000 8083 	beq.w	8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f200 80a1 	bhi.w	8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d056      	beq.n	8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b62:	e099      	b.n	8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b64:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d02d      	beq.n	8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b70:	4b85      	ldr	r3, [pc, #532]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	08db      	lsrs	r3, r3, #3
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	4a84      	ldr	r2, [pc, #528]	@ (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bca:	e087      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0e:	e065      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c52:	e043      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b48      	ldr	r3, [pc, #288]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c96:	e021      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	0a5b      	lsrs	r3, r3, #9
 8004ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d02:	ee17 2a90 	vmov	r2, s15
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d30:	ee17 2a90 	vmov	r2, s15
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d38:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	0e1b      	lsrs	r3, r3, #24
 8004d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5e:	ee17 2a90 	vmov	r2, s15
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	3724      	adds	r7, #36	@ 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	03d09000 	.word	0x03d09000
 8004d90:	46000000 	.word	0x46000000
 8004d94:	4c742400 	.word	0x4c742400
 8004d98:	4a742400 	.word	0x4a742400
 8004d9c:	4bbebc20 	.word	0x4bbebc20

08004da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da8:	4ba1      	ldr	r3, [pc, #644]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004db2:	4b9f      	ldr	r3, [pc, #636]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	0d1b      	lsrs	r3, r3, #20
 8004db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dca:	4b99      	ldr	r3, [pc, #612]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8111 	beq.w	8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f200 80a1 	bhi.w	8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d056      	beq.n	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e0a:	e099      	b.n	8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e0c:	4b88      	ldr	r3, [pc, #544]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e18:	4b85      	ldr	r3, [pc, #532]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	4a84      	ldr	r2, [pc, #528]	@ (8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e72:	e087      	b.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800503c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b6a      	ldr	r3, [pc, #424]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb6:	e065      	b.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ede:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efa:	e043      	b.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b48      	ldr	r3, [pc, #288]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3e:	e021      	b.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f84:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd8:	ee17 2a90 	vmov	r2, s15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005006:	ee17 2a90 	vmov	r2, s15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
}
 8005022:	bf00      	nop
 8005024:	3724      	adds	r7, #36	@ 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	46000000 	.word	0x46000000
 800503c:	4c742400 	.word	0x4c742400
 8005040:	4a742400 	.word	0x4a742400
 8005044:	4bbebc20 	.word	0x4bbebc20

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e049      	b.n	80050ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f841 	bl	80050f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 f9e8 	bl	800545c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e054      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a26      	ldr	r2, [pc, #152]	@ (80051dc <HAL_TIM_Base_Start_IT+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514e:	d01d      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a22      	ldr	r2, [pc, #136]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a21      	ldr	r2, [pc, #132]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1e      	ldr	r2, [pc, #120]	@ (80051ec <HAL_TIM_Base_Start_IT+0xe0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1c      	ldr	r2, [pc, #112]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x80>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d115      	bne.n	80051b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	4b19      	ldr	r3, [pc, #100]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xec>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d015      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xbe>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d011      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	e008      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e000      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40001800 	.word	0x40001800
 80051f4:	40014000 	.word	0x40014000
 80051f8:	00010007 	.word	0x00010007

080051fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8e9 	bl	800541e <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8db 	bl	800540a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f8ec 	bl	8005432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0204 	mvn.w	r2, #4
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8c3 	bl	800541e <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8b5 	bl	800540a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f8c6 	bl	8005432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f89d 	bl	800541e <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f88f 	bl	800540a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8a0 	bl	8005432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0210 	mvn.w	r2, #16
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2208      	movs	r2, #8
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f877 	bl	800541e <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f869 	bl	800540a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f87a 	bl	8005432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0201 	mvn.w	r2, #1
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fb fcac 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f90d 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f905 	bl	80055c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00c      	beq.n	80053de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f834 	bl	8005446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0220 	mvn.w	r2, #32
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8cd 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a43      	ldr	r2, [pc, #268]	@ (800557c <TIM_Base_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547a:	d00f      	beq.n	800549c <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a40      	ldr	r2, [pc, #256]	@ (8005580 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3f      	ldr	r2, [pc, #252]	@ (8005584 <TIM_Base_SetConfig+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a3e      	ldr	r2, [pc, #248]	@ (8005588 <TIM_Base_SetConfig+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3d      	ldr	r2, [pc, #244]	@ (800558c <TIM_Base_SetConfig+0x130>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a32      	ldr	r2, [pc, #200]	@ (800557c <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005580 <TIM_Base_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005584 <TIM_Base_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005588 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	@ (800558c <TIM_Base_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005590 <TIM_Base_SetConfig+0x134>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005594 <TIM_Base_SetConfig+0x138>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0x9a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <TIM_Base_SetConfig+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a14      	ldr	r2, [pc, #80]	@ (800557c <TIM_Base_SetConfig+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00f      	beq.n	800554e <TIM_Base_SetConfig+0xf2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a16      	ldr	r2, [pc, #88]	@ (800558c <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_Base_SetConfig+0xf2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a15      	ldr	r2, [pc, #84]	@ (8005590 <TIM_Base_SetConfig+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_Base_SetConfig+0xf2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a14      	ldr	r2, [pc, #80]	@ (8005594 <TIM_Base_SetConfig+0x138>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0xf2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a13      	ldr	r2, [pc, #76]	@ (8005598 <TIM_Base_SetConfig+0x13c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d103      	bne.n	8005556 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e042      	b.n	8005670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f83b 	bl	8005678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2224      	movs	r2, #36	@ 0x24
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fe28 	bl	8006278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8bd 	bl	80057a8 <UART_SetConfig>
 800562e:	4603      	mov	r3, r0
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e01b      	b.n	8005670 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fea7 	bl	80063bc <UART_CheckIdleState>
 800566e:	4603      	mov	r3, r0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d17b      	bne.n	800579e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_UART_Transmit+0x26>
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e074      	b.n	80057a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2221      	movs	r2, #33	@ 0x21
 80056c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c6:	f7fc f803 	bl	80016d0 <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e4:	d108      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e003      	b.n	8005700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005700:	e030      	b.n	8005764 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 feff 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03d      	b.n	80057a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3302      	adds	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e007      	b.n	8005752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1c8      	bne.n	8005702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	2140      	movs	r1, #64	@ 0x40
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fec8 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e006      	b.n	80057a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ac:	b092      	sub	sp, #72	@ 0x48
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ad0 <UART_SetConfig+0x328>)
 80057d8:	4013      	ands	r3, r2
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4ab3      	ldr	r2, [pc, #716]	@ (8005ad4 <UART_SetConfig+0x32c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005810:	4313      	orrs	r3, r2
 8005812:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4baf      	ldr	r3, [pc, #700]	@ (8005ad8 <UART_SetConfig+0x330>)
 800581c:	4013      	ands	r3, r2
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005824:	430b      	orrs	r3, r1
 8005826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582e:	f023 010f 	bic.w	r1, r3, #15
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4aa6      	ldr	r2, [pc, #664]	@ (8005adc <UART_SetConfig+0x334>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d177      	bne.n	8005938 <UART_SetConfig+0x190>
 8005848:	4ba5      	ldr	r3, [pc, #660]	@ (8005ae0 <UART_SetConfig+0x338>)
 800584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005850:	2b28      	cmp	r3, #40	@ 0x28
 8005852:	d86d      	bhi.n	8005930 <UART_SetConfig+0x188>
 8005854:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <UART_SetConfig+0xb4>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005901 	.word	0x08005901
 8005860:	08005931 	.word	0x08005931
 8005864:	08005931 	.word	0x08005931
 8005868:	08005931 	.word	0x08005931
 800586c:	08005931 	.word	0x08005931
 8005870:	08005931 	.word	0x08005931
 8005874:	08005931 	.word	0x08005931
 8005878:	08005931 	.word	0x08005931
 800587c:	08005909 	.word	0x08005909
 8005880:	08005931 	.word	0x08005931
 8005884:	08005931 	.word	0x08005931
 8005888:	08005931 	.word	0x08005931
 800588c:	08005931 	.word	0x08005931
 8005890:	08005931 	.word	0x08005931
 8005894:	08005931 	.word	0x08005931
 8005898:	08005931 	.word	0x08005931
 800589c:	08005911 	.word	0x08005911
 80058a0:	08005931 	.word	0x08005931
 80058a4:	08005931 	.word	0x08005931
 80058a8:	08005931 	.word	0x08005931
 80058ac:	08005931 	.word	0x08005931
 80058b0:	08005931 	.word	0x08005931
 80058b4:	08005931 	.word	0x08005931
 80058b8:	08005931 	.word	0x08005931
 80058bc:	08005919 	.word	0x08005919
 80058c0:	08005931 	.word	0x08005931
 80058c4:	08005931 	.word	0x08005931
 80058c8:	08005931 	.word	0x08005931
 80058cc:	08005931 	.word	0x08005931
 80058d0:	08005931 	.word	0x08005931
 80058d4:	08005931 	.word	0x08005931
 80058d8:	08005931 	.word	0x08005931
 80058dc:	08005921 	.word	0x08005921
 80058e0:	08005931 	.word	0x08005931
 80058e4:	08005931 	.word	0x08005931
 80058e8:	08005931 	.word	0x08005931
 80058ec:	08005931 	.word	0x08005931
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005931 	.word	0x08005931
 80058f8:	08005931 	.word	0x08005931
 80058fc:	08005929 	.word	0x08005929
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e222      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e21e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e21a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e216      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e212      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005928:	2340      	movs	r3, #64	@ 0x40
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e20e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005930:	2380      	movs	r3, #128	@ 0x80
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e20a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a69      	ldr	r2, [pc, #420]	@ (8005ae4 <UART_SetConfig+0x33c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d130      	bne.n	80059a4 <UART_SetConfig+0x1fc>
 8005942:	4b67      	ldr	r3, [pc, #412]	@ (8005ae0 <UART_SetConfig+0x338>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b05      	cmp	r3, #5
 800594c:	d826      	bhi.n	800599c <UART_SetConfig+0x1f4>
 800594e:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <UART_SetConfig+0x1ac>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005995 	.word	0x08005995
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e1ec      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e1e8      	b.n	8005d4e <UART_SetConfig+0x5a6>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e1e4      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e1e0      	b.n	8005d4e <UART_SetConfig+0x5a6>
 800598c:	2320      	movs	r3, #32
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e1dc      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005994:	2340      	movs	r3, #64	@ 0x40
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e1d8      	b.n	8005d4e <UART_SetConfig+0x5a6>
 800599c:	2380      	movs	r3, #128	@ 0x80
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e1d4      	b.n	8005d4e <UART_SetConfig+0x5a6>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a4f      	ldr	r2, [pc, #316]	@ (8005ae8 <UART_SetConfig+0x340>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d130      	bne.n	8005a10 <UART_SetConfig+0x268>
 80059ae:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae0 <UART_SetConfig+0x338>)
 80059b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d826      	bhi.n	8005a08 <UART_SetConfig+0x260>
 80059ba:	a201      	add	r2, pc, #4	@ (adr r2, 80059c0 <UART_SetConfig+0x218>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059d9 	.word	0x080059d9
 80059c4:	080059e1 	.word	0x080059e1
 80059c8:	080059e9 	.word	0x080059e9
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e1b6      	b.n	8005d4e <UART_SetConfig+0x5a6>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e1b2      	b.n	8005d4e <UART_SetConfig+0x5a6>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e1ae      	b.n	8005d4e <UART_SetConfig+0x5a6>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e1aa      	b.n	8005d4e <UART_SetConfig+0x5a6>
 80059f8:	2320      	movs	r3, #32
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e1a6      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a00:	2340      	movs	r3, #64	@ 0x40
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e1a2      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e19e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a35      	ldr	r2, [pc, #212]	@ (8005aec <UART_SetConfig+0x344>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d130      	bne.n	8005a7c <UART_SetConfig+0x2d4>
 8005a1a:	4b31      	ldr	r3, [pc, #196]	@ (8005ae0 <UART_SetConfig+0x338>)
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	d826      	bhi.n	8005a74 <UART_SetConfig+0x2cc>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x284>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a45 	.word	0x08005a45
 8005a30:	08005a4d 	.word	0x08005a4d
 8005a34:	08005a55 	.word	0x08005a55
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e180      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e17c      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e178      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e174      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a64:	2320      	movs	r3, #32
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e170      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a6c:	2340      	movs	r3, #64	@ 0x40
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e16c      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e168      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	@ (8005af0 <UART_SetConfig+0x348>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d142      	bne.n	8005b0c <UART_SetConfig+0x364>
 8005a86:	4b16      	ldr	r3, [pc, #88]	@ (8005ae0 <UART_SetConfig+0x338>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d838      	bhi.n	8005b04 <UART_SetConfig+0x35c>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <UART_SetConfig+0x2f0>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e14a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e146      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e142      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e13e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005ad0:	cfff69f3 	.word	0xcfff69f3
 8005ad4:	58000c00 	.word	0x58000c00
 8005ad8:	11fff4ff 	.word	0x11fff4ff
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	40004400 	.word	0x40004400
 8005ae8:	40004800 	.word	0x40004800
 8005aec:	40004c00 	.word	0x40004c00
 8005af0:	40005000 	.word	0x40005000
 8005af4:	2320      	movs	r3, #32
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e128      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005afc:	2340      	movs	r3, #64	@ 0x40
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e124      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e120      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4acb      	ldr	r2, [pc, #812]	@ (8005e40 <UART_SetConfig+0x698>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d176      	bne.n	8005c04 <UART_SetConfig+0x45c>
 8005b16:	4bcb      	ldr	r3, [pc, #812]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1e:	2b28      	cmp	r3, #40	@ 0x28
 8005b20:	d86c      	bhi.n	8005bfc <UART_SetConfig+0x454>
 8005b22:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <UART_SetConfig+0x380>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005bcd 	.word	0x08005bcd
 8005b2c:	08005bfd 	.word	0x08005bfd
 8005b30:	08005bfd 	.word	0x08005bfd
 8005b34:	08005bfd 	.word	0x08005bfd
 8005b38:	08005bfd 	.word	0x08005bfd
 8005b3c:	08005bfd 	.word	0x08005bfd
 8005b40:	08005bfd 	.word	0x08005bfd
 8005b44:	08005bfd 	.word	0x08005bfd
 8005b48:	08005bd5 	.word	0x08005bd5
 8005b4c:	08005bfd 	.word	0x08005bfd
 8005b50:	08005bfd 	.word	0x08005bfd
 8005b54:	08005bfd 	.word	0x08005bfd
 8005b58:	08005bfd 	.word	0x08005bfd
 8005b5c:	08005bfd 	.word	0x08005bfd
 8005b60:	08005bfd 	.word	0x08005bfd
 8005b64:	08005bfd 	.word	0x08005bfd
 8005b68:	08005bdd 	.word	0x08005bdd
 8005b6c:	08005bfd 	.word	0x08005bfd
 8005b70:	08005bfd 	.word	0x08005bfd
 8005b74:	08005bfd 	.word	0x08005bfd
 8005b78:	08005bfd 	.word	0x08005bfd
 8005b7c:	08005bfd 	.word	0x08005bfd
 8005b80:	08005bfd 	.word	0x08005bfd
 8005b84:	08005bfd 	.word	0x08005bfd
 8005b88:	08005be5 	.word	0x08005be5
 8005b8c:	08005bfd 	.word	0x08005bfd
 8005b90:	08005bfd 	.word	0x08005bfd
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005bfd 	.word	0x08005bfd
 8005b9c:	08005bfd 	.word	0x08005bfd
 8005ba0:	08005bfd 	.word	0x08005bfd
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005bed 	.word	0x08005bed
 8005bac:	08005bfd 	.word	0x08005bfd
 8005bb0:	08005bfd 	.word	0x08005bfd
 8005bb4:	08005bfd 	.word	0x08005bfd
 8005bb8:	08005bfd 	.word	0x08005bfd
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	08005bfd 	.word	0x08005bfd
 8005bc4:	08005bfd 	.word	0x08005bfd
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e0bc      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e0b8      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e0b4      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e0b0      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005bec:	2320      	movs	r3, #32
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e0ac      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005bf4:	2340      	movs	r3, #64	@ 0x40
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e0a8      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005bfc:	2380      	movs	r3, #128	@ 0x80
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e0a4      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a8f      	ldr	r2, [pc, #572]	@ (8005e48 <UART_SetConfig+0x6a0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d130      	bne.n	8005c70 <UART_SetConfig+0x4c8>
 8005c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d826      	bhi.n	8005c68 <UART_SetConfig+0x4c0>
 8005c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <UART_SetConfig+0x478>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c39 	.word	0x08005c39
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	08005c49 	.word	0x08005c49
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e086      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c40:	2304      	movs	r3, #4
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e082      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e07e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e07a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e076      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c60:	2340      	movs	r3, #64	@ 0x40
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e072      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e06e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a75      	ldr	r2, [pc, #468]	@ (8005e4c <UART_SetConfig+0x6a4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d130      	bne.n	8005cdc <UART_SetConfig+0x534>
 8005c7a:	4b72      	ldr	r3, [pc, #456]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d826      	bhi.n	8005cd4 <UART_SetConfig+0x52c>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <UART_SetConfig+0x4e4>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005ca5 	.word	0x08005ca5
 8005c90:	08005cad 	.word	0x08005cad
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e050      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e04c      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e048      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e044      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e040      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005ccc:	2340      	movs	r3, #64	@ 0x40
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e03c      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e038      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5b      	ldr	r2, [pc, #364]	@ (8005e50 <UART_SetConfig+0x6a8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d130      	bne.n	8005d48 <UART_SetConfig+0x5a0>
 8005ce6:	4b57      	ldr	r3, [pc, #348]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d826      	bhi.n	8005d40 <UART_SetConfig+0x598>
 8005cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <UART_SetConfig+0x550>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d21 	.word	0x08005d21
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e01a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e016      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e012      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e00e      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e00a      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d38:	2340      	movs	r3, #64	@ 0x40
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e006      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e002      	b.n	8005d4e <UART_SetConfig+0x5a6>
 8005d48:	2380      	movs	r3, #128	@ 0x80
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	@ (8005e50 <UART_SetConfig+0x6a8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	f040 80f8 	bne.w	8005f4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	dc46      	bgt.n	8005df0 <UART_SetConfig+0x648>
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	f2c0 8082 	blt.w	8005e6c <UART_SetConfig+0x6c4>
 8005d68:	3b02      	subs	r3, #2
 8005d6a:	2b1e      	cmp	r3, #30
 8005d6c:	d87e      	bhi.n	8005e6c <UART_SetConfig+0x6c4>
 8005d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0x5cc>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005df7 	.word	0x08005df7
 8005d78:	08005e6d 	.word	0x08005e6d
 8005d7c:	08005dff 	.word	0x08005dff
 8005d80:	08005e6d 	.word	0x08005e6d
 8005d84:	08005e6d 	.word	0x08005e6d
 8005d88:	08005e6d 	.word	0x08005e6d
 8005d8c:	08005e0f 	.word	0x08005e0f
 8005d90:	08005e6d 	.word	0x08005e6d
 8005d94:	08005e6d 	.word	0x08005e6d
 8005d98:	08005e6d 	.word	0x08005e6d
 8005d9c:	08005e6d 	.word	0x08005e6d
 8005da0:	08005e6d 	.word	0x08005e6d
 8005da4:	08005e6d 	.word	0x08005e6d
 8005da8:	08005e6d 	.word	0x08005e6d
 8005dac:	08005e1f 	.word	0x08005e1f
 8005db0:	08005e6d 	.word	0x08005e6d
 8005db4:	08005e6d 	.word	0x08005e6d
 8005db8:	08005e6d 	.word	0x08005e6d
 8005dbc:	08005e6d 	.word	0x08005e6d
 8005dc0:	08005e6d 	.word	0x08005e6d
 8005dc4:	08005e6d 	.word	0x08005e6d
 8005dc8:	08005e6d 	.word	0x08005e6d
 8005dcc:	08005e6d 	.word	0x08005e6d
 8005dd0:	08005e6d 	.word	0x08005e6d
 8005dd4:	08005e6d 	.word	0x08005e6d
 8005dd8:	08005e6d 	.word	0x08005e6d
 8005ddc:	08005e6d 	.word	0x08005e6d
 8005de0:	08005e6d 	.word	0x08005e6d
 8005de4:	08005e6d 	.word	0x08005e6d
 8005de8:	08005e6d 	.word	0x08005e6d
 8005dec:	08005e5f 	.word	0x08005e5f
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d037      	beq.n	8005e64 <UART_SetConfig+0x6bc>
 8005df4:	e03a      	b.n	8005e6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005df6:	f7fe fe69 	bl	8004acc <HAL_RCCEx_GetD3PCLK1Freq>
 8005dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005dfc:	e03c      	b.n	8005e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fe78 	bl	8004af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0c:	e034      	b.n	8005e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e0e:	f107 0318 	add.w	r3, r7, #24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe ffc4 	bl	8004da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e1c:	e02c      	b.n	8005e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1e:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e2a:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <UART_SetConfig+0x69c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	4a07      	ldr	r2, [pc, #28]	@ (8005e54 <UART_SetConfig+0x6ac>)
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e3c:	e01c      	b.n	8005e78 <UART_SetConfig+0x6d0>
 8005e3e:	bf00      	nop
 8005e40:	40011400 	.word	0x40011400
 8005e44:	58024400 	.word	0x58024400
 8005e48:	40007800 	.word	0x40007800
 8005e4c:	40007c00 	.word	0x40007c00
 8005e50:	58000c00 	.word	0x58000c00
 8005e54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e58:	4b9d      	ldr	r3, [pc, #628]	@ (80060d0 <UART_SetConfig+0x928>)
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5c:	e00c      	b.n	8005e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e5e:	4b9d      	ldr	r3, [pc, #628]	@ (80060d4 <UART_SetConfig+0x92c>)
 8005e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e62:	e009      	b.n	8005e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6a:	e005      	b.n	8005e78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 81de 	beq.w	800623c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	4a94      	ldr	r2, [pc, #592]	@ (80060d8 <UART_SetConfig+0x930>)
 8005e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d305      	bcc.n	8005eb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d903      	bls.n	8005eb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005eb6:	e1c1      	b.n	800623c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eba:	2200      	movs	r2, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	60fa      	str	r2, [r7, #12]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	4a84      	ldr	r2, [pc, #528]	@ (80060d8 <UART_SetConfig+0x930>)
 8005ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eda:	f7fa fa51 	bl	8000380 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	020b      	lsls	r3, r1, #8
 8005ef0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ef4:	0202      	lsls	r2, r0, #8
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	6849      	ldr	r1, [r1, #4]
 8005efa:	0849      	lsrs	r1, r1, #1
 8005efc:	2000      	movs	r0, #0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4605      	mov	r5, r0
 8005f02:	eb12 0804 	adds.w	r8, r2, r4
 8005f06:	eb43 0905 	adc.w	r9, r3, r5
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	469a      	mov	sl, r3
 8005f12:	4693      	mov	fp, r2
 8005f14:	4652      	mov	r2, sl
 8005f16:	465b      	mov	r3, fp
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fa30 	bl	8000380 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4613      	mov	r3, r2
 8005f26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2e:	d308      	bcc.n	8005f42 <UART_SetConfig+0x79a>
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f36:	d204      	bcs.n	8005f42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e17c      	b.n	800623c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f48:	e178      	b.n	800623c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f52:	f040 80c5 	bne.w	80060e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	dc48      	bgt.n	8005ff0 <UART_SetConfig+0x848>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	db7b      	blt.n	800605a <UART_SetConfig+0x8b2>
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d879      	bhi.n	800605a <UART_SetConfig+0x8b2>
 8005f66:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <UART_SetConfig+0x7c4>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	08005fff 	.word	0x08005fff
 8005f74:	0800605b 	.word	0x0800605b
 8005f78:	0800605b 	.word	0x0800605b
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	0800605b 	.word	0x0800605b
 8005f84:	0800605b 	.word	0x0800605b
 8005f88:	0800605b 	.word	0x0800605b
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	0800605b 	.word	0x0800605b
 8005f94:	0800605b 	.word	0x0800605b
 8005f98:	0800605b 	.word	0x0800605b
 8005f9c:	0800605b 	.word	0x0800605b
 8005fa0:	0800605b 	.word	0x0800605b
 8005fa4:	0800605b 	.word	0x0800605b
 8005fa8:	0800605b 	.word	0x0800605b
 8005fac:	08006027 	.word	0x08006027
 8005fb0:	0800605b 	.word	0x0800605b
 8005fb4:	0800605b 	.word	0x0800605b
 8005fb8:	0800605b 	.word	0x0800605b
 8005fbc:	0800605b 	.word	0x0800605b
 8005fc0:	0800605b 	.word	0x0800605b
 8005fc4:	0800605b 	.word	0x0800605b
 8005fc8:	0800605b 	.word	0x0800605b
 8005fcc:	0800605b 	.word	0x0800605b
 8005fd0:	0800605b 	.word	0x0800605b
 8005fd4:	0800605b 	.word	0x0800605b
 8005fd8:	0800605b 	.word	0x0800605b
 8005fdc:	0800605b 	.word	0x0800605b
 8005fe0:	0800605b 	.word	0x0800605b
 8005fe4:	0800605b 	.word	0x0800605b
 8005fe8:	0800605b 	.word	0x0800605b
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d02e      	beq.n	8006052 <UART_SetConfig+0x8aa>
 8005ff4:	e031      	b.n	800605a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f7fe fcfb 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8005ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ffc:	e033      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffe:	f7fe fd0d 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8006002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006004:	e02f      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fd74 	bl	8004af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006014:	e027      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006016:	f107 0318 	add.w	r3, r7, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fec0 	bl	8004da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006024:	e01f      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006026:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <UART_SetConfig+0x934>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006032:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <UART_SetConfig+0x934>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	4a24      	ldr	r2, [pc, #144]	@ (80060d0 <UART_SetConfig+0x928>)
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006044:	e00f      	b.n	8006066 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006046:	4b22      	ldr	r3, [pc, #136]	@ (80060d0 <UART_SetConfig+0x928>)
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604a:	e00c      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800604c:	4b21      	ldr	r3, [pc, #132]	@ (80060d4 <UART_SetConfig+0x92c>)
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e009      	b.n	8006066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	e005      	b.n	8006066 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80e7 	beq.w	800623c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	4a19      	ldr	r2, [pc, #100]	@ (80060d8 <UART_SetConfig+0x930>)
 8006074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006078:	461a      	mov	r2, r3
 800607a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006080:	005a      	lsls	r2, r3, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	441a      	add	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d916      	bls.n	80060c8 <UART_SetConfig+0x920>
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d212      	bcs.n	80060c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f023 030f 	bic.w	r3, r3, #15
 80060aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060ba:	4313      	orrs	r3, r2
 80060bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e0b9      	b.n	800623c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060ce:	e0b5      	b.n	800623c <UART_SetConfig+0xa94>
 80060d0:	03d09000 	.word	0x03d09000
 80060d4:	003d0900 	.word	0x003d0900
 80060d8:	08018418 	.word	0x08018418
 80060dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	dc49      	bgt.n	800617c <UART_SetConfig+0x9d4>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db7c      	blt.n	80061e6 <UART_SetConfig+0xa3e>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d87a      	bhi.n	80061e6 <UART_SetConfig+0xa3e>
 80060f0:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <UART_SetConfig+0x950>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006183 	.word	0x08006183
 80060fc:	0800618b 	.word	0x0800618b
 8006100:	080061e7 	.word	0x080061e7
 8006104:	080061e7 	.word	0x080061e7
 8006108:	08006193 	.word	0x08006193
 800610c:	080061e7 	.word	0x080061e7
 8006110:	080061e7 	.word	0x080061e7
 8006114:	080061e7 	.word	0x080061e7
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061e7 	.word	0x080061e7
 8006120:	080061e7 	.word	0x080061e7
 8006124:	080061e7 	.word	0x080061e7
 8006128:	080061e7 	.word	0x080061e7
 800612c:	080061e7 	.word	0x080061e7
 8006130:	080061e7 	.word	0x080061e7
 8006134:	080061e7 	.word	0x080061e7
 8006138:	080061b3 	.word	0x080061b3
 800613c:	080061e7 	.word	0x080061e7
 8006140:	080061e7 	.word	0x080061e7
 8006144:	080061e7 	.word	0x080061e7
 8006148:	080061e7 	.word	0x080061e7
 800614c:	080061e7 	.word	0x080061e7
 8006150:	080061e7 	.word	0x080061e7
 8006154:	080061e7 	.word	0x080061e7
 8006158:	080061e7 	.word	0x080061e7
 800615c:	080061e7 	.word	0x080061e7
 8006160:	080061e7 	.word	0x080061e7
 8006164:	080061e7 	.word	0x080061e7
 8006168:	080061e7 	.word	0x080061e7
 800616c:	080061e7 	.word	0x080061e7
 8006170:	080061e7 	.word	0x080061e7
 8006174:	080061e7 	.word	0x080061e7
 8006178:	080061d9 	.word	0x080061d9
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d02e      	beq.n	80061de <UART_SetConfig+0xa36>
 8006180:	e031      	b.n	80061e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fe fc35 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8006186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006188:	e033      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618a:	f7fe fc47 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 800618e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006190:	e02f      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fcae 	bl	8004af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e027      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a2:	f107 0318 	add.w	r3, r7, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fdfa 	bl	8004da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b0:	e01f      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006268 <UART_SetConfig+0xac0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061be:	4b2a      	ldr	r3, [pc, #168]	@ (8006268 <UART_SetConfig+0xac0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	08db      	lsrs	r3, r3, #3
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	4a28      	ldr	r2, [pc, #160]	@ (800626c <UART_SetConfig+0xac4>)
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d0:	e00f      	b.n	80061f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061d2:	4b26      	ldr	r3, [pc, #152]	@ (800626c <UART_SetConfig+0xac4>)
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d6:	e00c      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d8:	4b25      	ldr	r3, [pc, #148]	@ (8006270 <UART_SetConfig+0xac8>)
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e009      	b.n	80061f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e4:	e005      	b.n	80061f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061f0:	bf00      	nop
    }

    if (pclk != 0U)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d021      	beq.n	800623c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <UART_SetConfig+0xacc>)
 80061fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006202:	461a      	mov	r2, r3
 8006204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006206:	fbb3 f2f2 	udiv	r2, r3, r2
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	441a      	add	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	fbb2 f3f3 	udiv	r3, r2, r3
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	2b0f      	cmp	r3, #15
 8006220:	d909      	bls.n	8006236 <UART_SetConfig+0xa8e>
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006228:	d205      	bcs.n	8006236 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	b29a      	uxth	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	e002      	b.n	800623c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2201      	movs	r2, #1
 8006248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006258:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800625c:	4618      	mov	r0, r3
 800625e:	3748      	adds	r7, #72	@ 0x48
 8006260:	46bd      	mov	sp, r7
 8006262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006266:	bf00      	nop
 8006268:	58024400 	.word	0x58024400
 800626c:	03d09000 	.word	0x03d09000
 8006270:	003d0900 	.word	0x003d0900
 8006274:	08018418 	.word	0x08018418

08006278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01a      	beq.n	800638e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006376:	d10a      	bne.n	800638e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b098      	sub	sp, #96	@ 0x60
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063cc:	f7fb f980 	bl	80016d0 <HAL_GetTick>
 80063d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d12f      	bne.n	8006440 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e8:	2200      	movs	r2, #0
 80063ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f88e 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006418:	647b      	str	r3, [r7, #68]	@ 0x44
 800641a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800641e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e063      	b.n	8006508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d149      	bne.n	80064e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006456:	2200      	movs	r2, #0
 8006458:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f857 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d03c      	beq.n	80064e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800647c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006486:	633b      	str	r3, [r7, #48]	@ 0x30
 8006488:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800648c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e6      	bne.n	8006468 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ba:	61fa      	str	r2, [r7, #28]
 80064bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	617b      	str	r3, [r7, #20]
   return(result);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e012      	b.n	8006508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3758      	adds	r7, #88	@ 0x58
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e04f      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006528:	d04b      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fb f8d1 	bl	80016d0 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e04e      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d037      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b80      	cmp	r3, #128	@ 0x80
 8006556:	d034      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b40      	cmp	r3, #64	@ 0x40
 800655c:	d031      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d110      	bne.n	800658e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f839 	bl	80065ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2208      	movs	r2, #8
 800657e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e029      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659c:	d111      	bne.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f81f 	bl	80065ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e00f      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d0a0      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b095      	sub	sp, #84	@ 0x54
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006612:	643b      	str	r3, [r7, #64]	@ 0x40
 8006614:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	61fb      	str	r3, [r7, #28]
   return(result);
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	4b1e      	ldr	r3, [pc, #120]	@ (80066b4 <UART_EndRxTransfer+0xc8>)
 800663a:	4013      	ands	r3, r2
 800663c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800664c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d118      	bne.n	8006694 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 0310 	bic.w	r3, r3, #16
 8006676:	647b      	str	r3, [r7, #68]	@ 0x44
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6979      	ldr	r1, [r7, #20]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	613b      	str	r3, [r7, #16]
   return(result);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e6      	bne.n	8006662 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066a8:	bf00      	nop
 80066aa:	3754      	adds	r7, #84	@ 0x54
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	effffffe 	.word	0xeffffffe

080066b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80066b8:	b5b0      	push	{r4, r5, r7, lr}
 80066ba:	b08c      	sub	sp, #48	@ 0x30
 80066bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80066be:	4b8f      	ldr	r3, [pc, #572]	@ (80068fc <MX_LWIP_Init+0x244>)
 80066c0:	22c0      	movs	r2, #192	@ 0xc0
 80066c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80066c4:	4b8d      	ldr	r3, [pc, #564]	@ (80068fc <MX_LWIP_Init+0x244>)
 80066c6:	22a8      	movs	r2, #168	@ 0xa8
 80066c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80066ca:	4b8c      	ldr	r3, [pc, #560]	@ (80068fc <MX_LWIP_Init+0x244>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 138;
 80066d0:	4b8a      	ldr	r3, [pc, #552]	@ (80068fc <MX_LWIP_Init+0x244>)
 80066d2:	228a      	movs	r2, #138	@ 0x8a
 80066d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80066d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006900 <MX_LWIP_Init+0x248>)
 80066d8:	22ff      	movs	r2, #255	@ 0xff
 80066da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80066dc:	4b88      	ldr	r3, [pc, #544]	@ (8006900 <MX_LWIP_Init+0x248>)
 80066de:	22ff      	movs	r2, #255	@ 0xff
 80066e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80066e2:	4b87      	ldr	r3, [pc, #540]	@ (8006900 <MX_LWIP_Init+0x248>)
 80066e4:	22ff      	movs	r2, #255	@ 0xff
 80066e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80066e8:	4b85      	ldr	r3, [pc, #532]	@ (8006900 <MX_LWIP_Init+0x248>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80066ee:	4b85      	ldr	r3, [pc, #532]	@ (8006904 <MX_LWIP_Init+0x24c>)
 80066f0:	22c0      	movs	r2, #192	@ 0xc0
 80066f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80066f4:	4b83      	ldr	r3, [pc, #524]	@ (8006904 <MX_LWIP_Init+0x24c>)
 80066f6:	22a8      	movs	r2, #168	@ 0xa8
 80066f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80066fa:	4b82      	ldr	r3, [pc, #520]	@ (8006904 <MX_LWIP_Init+0x24c>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 8006700:	4b80      	ldr	r3, [pc, #512]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006702:	22fe      	movs	r2, #254	@ 0xfe
 8006704:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006706:	2100      	movs	r1, #0
 8006708:	2000      	movs	r0, #0
 800670a:	f00d fb6f 	bl	8013dec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800670e:	4b7b      	ldr	r3, [pc, #492]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	061a      	lsls	r2, r3, #24
 8006714:	4b79      	ldr	r3, [pc, #484]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	431a      	orrs	r2, r3
 800671c:	4b77      	ldr	r3, [pc, #476]	@ (80068fc <MX_LWIP_Init+0x244>)
 800671e:	789b      	ldrb	r3, [r3, #2]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	4313      	orrs	r3, r2
 8006724:	4a75      	ldr	r2, [pc, #468]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006726:	78d2      	ldrb	r2, [r2, #3]
 8006728:	4313      	orrs	r3, r2
 800672a:	061a      	lsls	r2, r3, #24
 800672c:	4b73      	ldr	r3, [pc, #460]	@ (80068fc <MX_LWIP_Init+0x244>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	0619      	lsls	r1, r3, #24
 8006732:	4b72      	ldr	r3, [pc, #456]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	4319      	orrs	r1, r3
 800673a:	4b70      	ldr	r3, [pc, #448]	@ (80068fc <MX_LWIP_Init+0x244>)
 800673c:	789b      	ldrb	r3, [r3, #2]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	430b      	orrs	r3, r1
 8006742:	496e      	ldr	r1, [pc, #440]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006744:	78c9      	ldrb	r1, [r1, #3]
 8006746:	430b      	orrs	r3, r1
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800674e:	431a      	orrs	r2, r3
 8006750:	4b6a      	ldr	r3, [pc, #424]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	0619      	lsls	r1, r3, #24
 8006756:	4b69      	ldr	r3, [pc, #420]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	4319      	orrs	r1, r3
 800675e:	4b67      	ldr	r3, [pc, #412]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006760:	789b      	ldrb	r3, [r3, #2]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	430b      	orrs	r3, r1
 8006766:	4965      	ldr	r1, [pc, #404]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006768:	78c9      	ldrb	r1, [r1, #3]
 800676a:	430b      	orrs	r3, r1
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006772:	431a      	orrs	r2, r3
 8006774:	4b61      	ldr	r3, [pc, #388]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	0619      	lsls	r1, r3, #24
 800677a:	4b60      	ldr	r3, [pc, #384]	@ (80068fc <MX_LWIP_Init+0x244>)
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	4319      	orrs	r1, r3
 8006782:	4b5e      	ldr	r3, [pc, #376]	@ (80068fc <MX_LWIP_Init+0x244>)
 8006784:	789b      	ldrb	r3, [r3, #2]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	430b      	orrs	r3, r1
 800678a:	495c      	ldr	r1, [pc, #368]	@ (80068fc <MX_LWIP_Init+0x244>)
 800678c:	78c9      	ldrb	r1, [r1, #3]
 800678e:	430b      	orrs	r3, r1
 8006790:	0e1b      	lsrs	r3, r3, #24
 8006792:	4313      	orrs	r3, r2
 8006794:	4a5c      	ldr	r2, [pc, #368]	@ (8006908 <MX_LWIP_Init+0x250>)
 8006796:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006798:	4b59      	ldr	r3, [pc, #356]	@ (8006900 <MX_LWIP_Init+0x248>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	061a      	lsls	r2, r3, #24
 800679e:	4b58      	ldr	r3, [pc, #352]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	431a      	orrs	r2, r3
 80067a6:	4b56      	ldr	r3, [pc, #344]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067a8:	789b      	ldrb	r3, [r3, #2]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	4313      	orrs	r3, r2
 80067ae:	4a54      	ldr	r2, [pc, #336]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067b0:	78d2      	ldrb	r2, [r2, #3]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	061a      	lsls	r2, r3, #24
 80067b6:	4b52      	ldr	r3, [pc, #328]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	0619      	lsls	r1, r3, #24
 80067bc:	4b50      	ldr	r3, [pc, #320]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	4319      	orrs	r1, r3
 80067c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	430b      	orrs	r3, r1
 80067cc:	494c      	ldr	r1, [pc, #304]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067ce:	78c9      	ldrb	r1, [r1, #3]
 80067d0:	430b      	orrs	r3, r1
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067d8:	431a      	orrs	r2, r3
 80067da:	4b49      	ldr	r3, [pc, #292]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	0619      	lsls	r1, r3, #24
 80067e0:	4b47      	ldr	r3, [pc, #284]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	041b      	lsls	r3, r3, #16
 80067e6:	4319      	orrs	r1, r3
 80067e8:	4b45      	ldr	r3, [pc, #276]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067ea:	789b      	ldrb	r3, [r3, #2]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	430b      	orrs	r3, r1
 80067f0:	4943      	ldr	r1, [pc, #268]	@ (8006900 <MX_LWIP_Init+0x248>)
 80067f2:	78c9      	ldrb	r1, [r1, #3]
 80067f4:	430b      	orrs	r3, r1
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80067fc:	431a      	orrs	r2, r3
 80067fe:	4b40      	ldr	r3, [pc, #256]	@ (8006900 <MX_LWIP_Init+0x248>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	0619      	lsls	r1, r3, #24
 8006804:	4b3e      	ldr	r3, [pc, #248]	@ (8006900 <MX_LWIP_Init+0x248>)
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	4319      	orrs	r1, r3
 800680c:	4b3c      	ldr	r3, [pc, #240]	@ (8006900 <MX_LWIP_Init+0x248>)
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	430b      	orrs	r3, r1
 8006814:	493a      	ldr	r1, [pc, #232]	@ (8006900 <MX_LWIP_Init+0x248>)
 8006816:	78c9      	ldrb	r1, [r1, #3]
 8006818:	430b      	orrs	r3, r1
 800681a:	0e1b      	lsrs	r3, r3, #24
 800681c:	4313      	orrs	r3, r2
 800681e:	4a3b      	ldr	r2, [pc, #236]	@ (800690c <MX_LWIP_Init+0x254>)
 8006820:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006822:	4b38      	ldr	r3, [pc, #224]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	061a      	lsls	r2, r3, #24
 8006828:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <MX_LWIP_Init+0x24c>)
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	431a      	orrs	r2, r3
 8006830:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006832:	789b      	ldrb	r3, [r3, #2]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	4313      	orrs	r3, r2
 8006838:	4a32      	ldr	r2, [pc, #200]	@ (8006904 <MX_LWIP_Init+0x24c>)
 800683a:	78d2      	ldrb	r2, [r2, #3]
 800683c:	4313      	orrs	r3, r2
 800683e:	061a      	lsls	r2, r3, #24
 8006840:	4b30      	ldr	r3, [pc, #192]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	0619      	lsls	r1, r3, #24
 8006846:	4b2f      	ldr	r3, [pc, #188]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	4319      	orrs	r1, r3
 800684e:	4b2d      	ldr	r3, [pc, #180]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006850:	789b      	ldrb	r3, [r3, #2]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	430b      	orrs	r3, r1
 8006856:	492b      	ldr	r1, [pc, #172]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006858:	78c9      	ldrb	r1, [r1, #3]
 800685a:	430b      	orrs	r3, r1
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006862:	431a      	orrs	r2, r3
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	0619      	lsls	r1, r3, #24
 800686a:	4b26      	ldr	r3, [pc, #152]	@ (8006904 <MX_LWIP_Init+0x24c>)
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	4319      	orrs	r1, r3
 8006872:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006874:	789b      	ldrb	r3, [r3, #2]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	430b      	orrs	r3, r1
 800687a:	4922      	ldr	r1, [pc, #136]	@ (8006904 <MX_LWIP_Init+0x24c>)
 800687c:	78c9      	ldrb	r1, [r1, #3]
 800687e:	430b      	orrs	r3, r1
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006886:	431a      	orrs	r2, r3
 8006888:	4b1e      	ldr	r3, [pc, #120]	@ (8006904 <MX_LWIP_Init+0x24c>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	0619      	lsls	r1, r3, #24
 800688e:	4b1d      	ldr	r3, [pc, #116]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	4319      	orrs	r1, r3
 8006896:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <MX_LWIP_Init+0x24c>)
 8006898:	789b      	ldrb	r3, [r3, #2]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	430b      	orrs	r3, r1
 800689e:	4919      	ldr	r1, [pc, #100]	@ (8006904 <MX_LWIP_Init+0x24c>)
 80068a0:	78c9      	ldrb	r1, [r1, #3]
 80068a2:	430b      	orrs	r3, r1
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	4313      	orrs	r3, r2
 80068a8:	4a19      	ldr	r2, [pc, #100]	@ (8006910 <MX_LWIP_Init+0x258>)
 80068aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80068ac:	4b19      	ldr	r3, [pc, #100]	@ (8006914 <MX_LWIP_Init+0x25c>)
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	4b19      	ldr	r3, [pc, #100]	@ (8006918 <MX_LWIP_Init+0x260>)
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	2300      	movs	r3, #0
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <MX_LWIP_Init+0x258>)
 80068ba:	4a14      	ldr	r2, [pc, #80]	@ (800690c <MX_LWIP_Init+0x254>)
 80068bc:	4912      	ldr	r1, [pc, #72]	@ (8006908 <MX_LWIP_Init+0x250>)
 80068be:	4817      	ldr	r0, [pc, #92]	@ (800691c <MX_LWIP_Init+0x264>)
 80068c0:	f006 fde0 	bl	800d484 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80068c4:	4815      	ldr	r0, [pc, #84]	@ (800691c <MX_LWIP_Init+0x264>)
 80068c6:	f006 ff8f 	bl	800d7e8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80068ca:	4814      	ldr	r0, [pc, #80]	@ (800691c <MX_LWIP_Init+0x264>)
 80068cc:	f006 ff9c 	bl	800d808 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80068d0:	4913      	ldr	r1, [pc, #76]	@ (8006920 <MX_LWIP_Init+0x268>)
 80068d2:	4812      	ldr	r0, [pc, #72]	@ (800691c <MX_LWIP_Init+0x264>)
 80068d4:	f007 f89a 	bl	800da0c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80068d8:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <MX_LWIP_Init+0x26c>)
 80068da:	1d3c      	adds	r4, r7, #4
 80068dc:	461d      	mov	r5, r3
 80068de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	490b      	ldr	r1, [pc, #44]	@ (800691c <MX_LWIP_Init+0x264>)
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fd8c 	bl	800740c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80068f4:	bf00      	nop
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bdb0      	pop	{r4, r5, r7, pc}
 80068fc:	24004ef4 	.word	0x24004ef4
 8006900:	24004ef8 	.word	0x24004ef8
 8006904:	24004efc 	.word	0x24004efc
 8006908:	24004ee8 	.word	0x24004ee8
 800690c:	24004eec 	.word	0x24004eec
 8006910:	24004ef0 	.word	0x24004ef0
 8006914:	08013d29 	.word	0x08013d29
 8006918:	08006e35 	.word	0x08006e35
 800691c:	24004eb4 	.word	0x24004eb4
 8006920:	08006929 	.word	0x08006929
 8006924:	08015644 	.word	0x08015644

08006928 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <HAL_ETH_RxCpltCallback+0x1c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fedb 	bl	8007704 <osSemaphoreRelease>
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	24004f08 	.word	0x24004f08

0800695c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006964:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <HAL_ETH_TxCpltCallback+0x1c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fecb 	bl	8007704 <osSemaphoreRelease>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	24004f0c 	.word	0x24004f0c

0800697c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fc f828 	bl	80029da <HAL_ETH_GetDMAError>
 800698a:	4603      	mov	r3, r0
 800698c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006990:	2b80      	cmp	r3, #128	@ 0x80
 8006992:	d104      	bne.n	800699e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <HAL_ETH_ErrorCallback+0x2c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 feb3 	bl	8007704 <osSemaphoreRelease>
  }
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	24004f08 	.word	0x24004f08

080069ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80069ac:	b5b0      	push	{r4, r5, r7, lr}
 80069ae:	b0ac      	sub	sp, #176	@ 0xb0
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80069c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80069ca:	2264      	movs	r2, #100	@ 0x64
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f00d ff13 	bl	80147fa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80069d4:	4b93      	ldr	r3, [pc, #588]	@ (8006c24 <low_level_init+0x278>)
 80069d6:	4a94      	ldr	r2, [pc, #592]	@ (8006c28 <low_level_init+0x27c>)
 80069d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 80069e6:	23e1      	movs	r3, #225	@ 0xe1
 80069e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 80069fe:	4a89      	ldr	r2, [pc, #548]	@ (8006c24 <low_level_init+0x278>)
 8006a00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a04:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006a06:	4b87      	ldr	r3, [pc, #540]	@ (8006c24 <low_level_init+0x278>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006a0c:	4b85      	ldr	r3, [pc, #532]	@ (8006c24 <low_level_init+0x278>)
 8006a0e:	4a87      	ldr	r2, [pc, #540]	@ (8006c2c <low_level_init+0x280>)
 8006a10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006a12:	4b84      	ldr	r3, [pc, #528]	@ (8006c24 <low_level_init+0x278>)
 8006a14:	4a86      	ldr	r2, [pc, #536]	@ (8006c30 <low_level_init+0x284>)
 8006a16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006a18:	4b82      	ldr	r3, [pc, #520]	@ (8006c24 <low_level_init+0x278>)
 8006a1a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006a1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a20:	4880      	ldr	r0, [pc, #512]	@ (8006c24 <low_level_init+0x278>)
 8006a22:	f7fa ffeb 	bl	80019fc <HAL_ETH_Init>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006a2c:	2238      	movs	r2, #56	@ 0x38
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4880      	ldr	r0, [pc, #512]	@ (8006c34 <low_level_init+0x288>)
 8006a32:	f00d fee2 	bl	80147fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006a36:	4b7f      	ldr	r3, [pc, #508]	@ (8006c34 <low_level_init+0x288>)
 8006a38:	2221      	movs	r2, #33	@ 0x21
 8006a3a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006a3c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c34 <low_level_init+0x288>)
 8006a3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006a42:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006a44:	4b7b      	ldr	r3, [pc, #492]	@ (8006c34 <low_level_init+0x288>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006a4a:	487b      	ldr	r0, [pc, #492]	@ (8006c38 <low_level_init+0x28c>)
 8006a4c:	f006 fbd4 	bl	800d1f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2206      	movs	r2, #6
 8006a54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006a58:	4b72      	ldr	r3, [pc, #456]	@ (8006c24 <low_level_init+0x278>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006a64:	4b6f      	ldr	r3, [pc, #444]	@ (8006c24 <low_level_init+0x278>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	785a      	ldrb	r2, [r3, #1]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006a70:	4b6c      	ldr	r3, [pc, #432]	@ (8006c24 <low_level_init+0x278>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	789a      	ldrb	r2, [r3, #2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006a7c:	4b69      	ldr	r3, [pc, #420]	@ (8006c24 <low_level_init+0x278>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	78da      	ldrb	r2, [r3, #3]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006a88:	4b66      	ldr	r3, [pc, #408]	@ (8006c24 <low_level_init+0x278>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	791a      	ldrb	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a94:	4b63      	ldr	r3, [pc, #396]	@ (8006c24 <low_level_init+0x278>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	795a      	ldrb	r2, [r3, #5]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006aa6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006aae:	f043 030a 	orr.w	r3, r3, #10
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8006aba:	2300      	movs	r3, #0
 8006abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006abe:	2300      	movs	r3, #0
 8006ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fd9b 	bl	8007604 <osSemaphoreCreate>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8006c3c <low_level_init+0x290>)
 8006ad2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad8:	2300      	movs	r3, #0
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8006adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fd8e 	bl	8007604 <osSemaphoreCreate>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	4a55      	ldr	r2, [pc, #340]	@ (8006c40 <low_level_init+0x294>)
 8006aec:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006aee:	4b53      	ldr	r3, [pc, #332]	@ (8006c3c <low_level_init+0x290>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fdb7 	bl	8007668 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8006afa:	4b51      	ldr	r3, [pc, #324]	@ (8006c40 <low_level_init+0x294>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fdb1 	bl	8007668 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006b06:	4b4f      	ldr	r3, [pc, #316]	@ (8006c44 <low_level_init+0x298>)
 8006b08:	f107 0408 	add.w	r4, r7, #8
 8006b0c:	461d      	mov	r5, r3
 8006b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fc73 	bl	800740c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006b26:	4948      	ldr	r1, [pc, #288]	@ (8006c48 <low_level_init+0x29c>)
 8006b28:	4848      	ldr	r0, [pc, #288]	@ (8006c4c <low_level_init+0x2a0>)
 8006b2a:	f7fa fa96 	bl	800105a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006b2e:	4847      	ldr	r0, [pc, #284]	@ (8006c4c <low_level_init+0x2a0>)
 8006b30:	f7fa fac5 	bl	80010be <LAN8742_Init>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f006 ff36 	bl	800d9ac <netif_set_link_down>
    netif_set_down(netif);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f006 fecd 	bl	800d8e0 <netif_set_down>
 8006b46:	e06a      	b.n	8006c1e <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006b48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d164      	bne.n	8006c1a <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b50:	483e      	ldr	r0, [pc, #248]	@ (8006c4c <low_level_init+0x2a0>)
 8006b52:	f7fa fb01 	bl	8001158 <LAN8742_GetLinkState>
 8006b56:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	dc06      	bgt.n	8006b70 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f006 ff22 	bl	800d9ac <netif_set_link_down>
      netif_set_down(netif);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f006 feb9 	bl	800d8e0 <netif_set_down>
 8006b6e:	e056      	b.n	8006c1e <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8006b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b74:	3b02      	subs	r3, #2
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d82a      	bhi.n	8006bd0 <low_level_init+0x224>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <low_level_init+0x1d4>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006ba3 	.word	0x08006ba3
 8006b88:	08006bb3 	.word	0x08006bb3
 8006b8c:	08006bc3 	.word	0x08006bc3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006ba0:	e01f      	b.n	8006be2 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006ba8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006bb0:	e017      	b.n	8006be2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006bc0:	e00f      	b.n	8006be2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006bce:	e008      	b.n	8006be2 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006bd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006be0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006be6:	4619      	mov	r1, r3
 8006be8:	480e      	ldr	r0, [pc, #56]	@ (8006c24 <low_level_init+0x278>)
 8006bea:	f7fb fcab 	bl	8002544 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bf2:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8006bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bf8:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006bfa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4808      	ldr	r0, [pc, #32]	@ (8006c24 <low_level_init+0x278>)
 8006c02:	f7fb fe73 	bl	80028ec <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006c06:	4807      	ldr	r0, [pc, #28]	@ (8006c24 <low_level_init+0x278>)
 8006c08:	f7fa fff6 	bl	8001bf8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f006 fdfb 	bl	800d808 <netif_set_up>
    netif_set_link_up(netif);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f006 fe96 	bl	800d944 <netif_set_link_up>
 8006c18:	e001      	b.n	8006c1e <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8006c1a:	f7fa f863 	bl	8000ce4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006c1e:	37b0      	adds	r7, #176	@ 0xb0
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bdb0      	pop	{r4, r5, r7, pc}
 8006c24:	24004f10 	.word	0x24004f10
 8006c28:	40028000 	.word	0x40028000
 8006c2c:	24004a90 	.word	0x24004a90
 8006c30:	24004a30 	.word	0x24004a30
 8006c34:	24004fc0 	.word	0x24004fc0
 8006c38:	08018430 	.word	0x08018430
 8006c3c:	24004f08 	.word	0x24004f08
 8006c40:	24004f0c 	.word	0x24004f0c
 8006c44:	08015668 	.word	0x08015668
 8006c48:	2400002c 	.word	0x2400002c
 8006c4c:	24004ff8 	.word	0x24004ff8

08006c50 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b092      	sub	sp, #72	@ 0x48
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	2230      	movs	r2, #48	@ 0x30
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f00d fdc2 	bl	80147fa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	2230      	movs	r2, #48	@ 0x30
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00d fdbb 	bl	80147fa <memset>

  for(q = p; q != NULL; q = q->next)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c88:	e045      	b.n	8006d16 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d902      	bls.n	8006c96 <low_level_output+0x46>
      return ERR_IF;
 8006c90:	f06f 030b 	mvn.w	r3, #11
 8006c94:	e07f      	b.n	8006d96 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8006c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c98:	6859      	ldr	r1, [r3, #4]
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	3348      	adds	r3, #72	@ 0x48
 8006ca6:	443b      	add	r3, r7
 8006ca8:	3b3c      	subs	r3, #60	@ 0x3c
 8006caa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cae:	895b      	ldrh	r3, [r3, #10]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	3348      	adds	r3, #72	@ 0x48
 8006cbe:	443b      	add	r3, r7
 8006cc0:	3b38      	subs	r3, #56	@ 0x38
 8006cc2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ccc:	1e5a      	subs	r2, r3, #1
 8006cce:	f107 000c 	add.w	r0, r7, #12
 8006cd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	18c1      	adds	r1, r0, r3
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3348      	adds	r3, #72	@ 0x48
 8006ce8:	443b      	add	r3, r7
 8006cea:	3b34      	subs	r3, #52	@ 0x34
 8006cec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	3348      	adds	r3, #72	@ 0x48
 8006d02:	443b      	add	r3, r7
 8006d04:	3b34      	subs	r3, #52	@ 0x34
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1b6      	bne.n	8006c8a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b1f      	ldr	r3, [pc, #124]	@ (8006da0 <low_level_output+0x150>)
 8006d24:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006d26:	4a1e      	ldr	r2, [pc, #120]	@ (8006da0 <low_level_output+0x150>)
 8006d28:	f107 030c 	add.w	r3, r7, #12
 8006d2c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006da0 <low_level_output+0x150>)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006d34:	6838      	ldr	r0, [r7, #0]
 8006d36:	f007 fabd 	bl	800e2b4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8006d3a:	4919      	ldr	r1, [pc, #100]	@ (8006da0 <low_level_output+0x150>)
 8006d3c:	4819      	ldr	r0, [pc, #100]	@ (8006da4 <low_level_output+0x154>)
 8006d3e:	f7fb f847 	bl	8001dd0 <HAL_ETH_Transmit_IT>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006d4e:	e01b      	b.n	8006d88 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006d50:	4814      	ldr	r0, [pc, #80]	@ (8006da4 <low_level_output+0x154>)
 8006d52:	f7fb fe35 	bl	80029c0 <HAL_ETH_GetError>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00d      	beq.n	8006d7c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006d60:	4b11      	ldr	r3, [pc, #68]	@ (8006da8 <low_level_output+0x158>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fc7d 	bl	8007668 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006d6e:	480d      	ldr	r0, [pc, #52]	@ (8006da4 <low_level_output+0x154>)
 8006d70:	f7fb f9b5 	bl	80020de <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006d74:	23fe      	movs	r3, #254	@ 0xfe
 8006d76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006d7a:	e005      	b.n	8006d88 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006d7c:	6838      	ldr	r0, [r7, #0]
 8006d7e:	f007 f9f3 	bl	800e168 <pbuf_free>
        errval =  ERR_IF;
 8006d82:	23f4      	movs	r3, #244	@ 0xf4
 8006d84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8006d88:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006d8c:	f113 0f02 	cmn.w	r3, #2
 8006d90:	d0d3      	beq.n	8006d3a <low_level_output+0xea>

  return errval;
 8006d92:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3748      	adds	r7, #72	@ 0x48
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	24004fc0 	.word	0x24004fc0
 8006da4:	24004f10 	.word	0x24004f10
 8006da8:	24004f0c 	.word	0x24004f0c

08006dac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006db8:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <low_level_input+0x2c>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006dc0:	f107 030c 	add.w	r3, r7, #12
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4805      	ldr	r0, [pc, #20]	@ (8006ddc <low_level_input+0x30>)
 8006dc8:	f7fb f853 	bl	8001e72 <HAL_ETH_ReadData>
  }

  return p;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	24004f04 	.word	0x24004f04
 8006ddc:	24004f10 	.word	0x24004f10

08006de0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006df0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e30 <ethernetif_input+0x50>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fc35 	bl	8007668 <osSemaphoreWait>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f5      	bne.n	8006df0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006e04:	68b8      	ldr	r0, [r7, #8]
 8006e06:	f7ff ffd1 	bl	8006dac <low_level_input>
 8006e0a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	4798      	blx	r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f007 f9a0 	bl	800e168 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1ea      	bne.n	8006e04 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e2e:	e7df      	b.n	8006df0 <ethernetif_input+0x10>
 8006e30:	24004f08 	.word	0x24004f08

08006e34 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <ethernetif_init+0x1c>
 8006e42:	4b0e      	ldr	r3, [pc, #56]	@ (8006e7c <ethernetif_init+0x48>)
 8006e44:	f240 2216 	movw	r2, #534	@ 0x216
 8006e48:	490d      	ldr	r1, [pc, #52]	@ (8006e80 <ethernetif_init+0x4c>)
 8006e4a:	480e      	ldr	r0, [pc, #56]	@ (8006e84 <ethernetif_init+0x50>)
 8006e4c:	f00d fc70 	bl	8014730 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2273      	movs	r2, #115	@ 0x73
 8006e54:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2274      	movs	r2, #116	@ 0x74
 8006e5c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a09      	ldr	r2, [pc, #36]	@ (8006e88 <ethernetif_init+0x54>)
 8006e64:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <ethernetif_init+0x58>)
 8006e6a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fd9d 	bl	80069ac <low_level_init>

  return ERR_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	08015684 	.word	0x08015684
 8006e80:	080156a0 	.word	0x080156a0
 8006e84:	080156b0 	.word	0x080156b0
 8006e88:	0800ab55 	.word	0x0800ab55
 8006e8c:	08006c51 	.word	0x08006c51

08006e90 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	4809      	ldr	r0, [pc, #36]	@ (8006ec4 <pbuf_free_custom+0x34>)
 8006ea0:	f006 fa9a 	bl	800d3d8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006ea4:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <pbuf_free_custom+0x38>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <pbuf_free_custom+0x38>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006eb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <pbuf_free_custom+0x3c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fc24 	bl	8007704 <osSemaphoreRelease>
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	08018430 	.word	0x08018430
 8006ec8:	24004f04 	.word	0x24004f04
 8006ecc:	24004f08 	.word	0x24004f08

08006ed0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ed4:	f7fa fbfc 	bl	80016d0 <HAL_GetTick>
 8006ed8:	4603      	mov	r3, r0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	@ 0x38
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	60da      	str	r2, [r3, #12]
 8006ef6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5d      	ldr	r2, [pc, #372]	@ (8007074 <HAL_ETH_MspInit+0x194>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	f040 80b3 	bne.w	800706a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006f04:	4b5c      	ldr	r3, [pc, #368]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f14:	4b58      	ldr	r3, [pc, #352]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f1e:	623b      	str	r3, [r7, #32]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006f22:	4b55      	ldr	r3, [pc, #340]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f28:	4a53      	ldr	r2, [pc, #332]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f32:	4b51      	ldr	r3, [pc, #324]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006f40:	4b4d      	ldr	r3, [pc, #308]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f46:	4a4c      	ldr	r2, [pc, #304]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f50:	4b49      	ldr	r3, [pc, #292]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f5e:	4b46      	ldr	r3, [pc, #280]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f64:	4a44      	ldr	r2, [pc, #272]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f66:	f043 0304 	orr.w	r3, r3, #4
 8006f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f6e:	4b42      	ldr	r3, [pc, #264]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f82:	4a3d      	ldr	r2, [pc, #244]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f9a:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa0:	4a35      	ldr	r2, [pc, #212]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006faa:	4b33      	ldr	r3, [pc, #204]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007078 <HAL_ETH_MspInit+0x198>)
 8006fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006fd6:	2332      	movs	r3, #50	@ 0x32
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006fe6:	230b      	movs	r3, #11
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4822      	ldr	r0, [pc, #136]	@ (800707c <HAL_ETH_MspInit+0x19c>)
 8006ff2:	f7fc faf1 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006ff6:	2386      	movs	r3, #134	@ 0x86
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007002:	2300      	movs	r3, #0
 8007004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007006:	230b      	movs	r3, #11
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800700a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800700e:	4619      	mov	r1, r3
 8007010:	481b      	ldr	r0, [pc, #108]	@ (8007080 <HAL_ETH_MspInit+0x1a0>)
 8007012:	f7fc fae1 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701c:	2302      	movs	r3, #2
 800701e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007020:	2300      	movs	r3, #0
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007024:	2300      	movs	r3, #0
 8007026:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007028:	230b      	movs	r3, #11
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800702c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007030:	4619      	mov	r1, r3
 8007032:	4814      	ldr	r0, [pc, #80]	@ (8007084 <HAL_ETH_MspInit+0x1a4>)
 8007034:	f7fc fad0 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007038:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703e:	2302      	movs	r3, #2
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007042:	2300      	movs	r3, #0
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007046:	2300      	movs	r3, #0
 8007048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800704a:	230b      	movs	r3, #11
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800704e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007052:	4619      	mov	r1, r3
 8007054:	480c      	ldr	r0, [pc, #48]	@ (8007088 <HAL_ETH_MspInit+0x1a8>)
 8007056:	f7fc fabf 	bl	80035d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800705a:	2200      	movs	r2, #0
 800705c:	2105      	movs	r1, #5
 800705e:	203d      	movs	r0, #61	@ 0x3d
 8007060:	f7fa fc1a 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007064:	203d      	movs	r0, #61	@ 0x3d
 8007066:	f7fa fc31 	bl	80018cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800706a:	bf00      	nop
 800706c:	3738      	adds	r7, #56	@ 0x38
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40028000 	.word	0x40028000
 8007078:	58024400 	.word	0x58024400
 800707c:	58020800 	.word	0x58020800
 8007080:	58020000 	.word	0x58020000
 8007084:	58020400 	.word	0x58020400
 8007088:	58021800 	.word	0x58021800

0800708c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007090:	4802      	ldr	r0, [pc, #8]	@ (800709c <ETH_PHY_IO_Init+0x10>)
 8007092:	f7fb fc45 	bl	8002920 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	bd80      	pop	{r7, pc}
 800709c:	24004f10 	.word	0x24004f10

080070a0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return 0;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	68f9      	ldr	r1, [r7, #12]
 80070c2:	4807      	ldr	r0, [pc, #28]	@ (80070e0 <ETH_PHY_IO_ReadReg+0x30>)
 80070c4:	f7fb f996 	bl	80023f4 <HAL_ETH_ReadPHYRegister>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80070ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070d2:	e000      	b.n	80070d6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	24004f10 	.word	0x24004f10

080070e4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	4807      	ldr	r0, [pc, #28]	@ (8007114 <ETH_PHY_IO_WriteReg+0x30>)
 80070f8:	f7fb f9d0 	bl	800249c <HAL_ETH_WritePHYRegister>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007106:	e000      	b.n	800710a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	24004f10 	.word	0x24004f10

08007118 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800711c:	f7fa fad8 	bl	80016d0 <HAL_GetTick>
 8007120:	4603      	mov	r3, r0
}
 8007122:	4618      	mov	r0, r3
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b0a0      	sub	sp, #128	@ 0x80
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	2264      	movs	r2, #100	@ 0x64
 8007136:	2100      	movs	r1, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f00d fb5e 	bl	80147fa <memset>
  int32_t PHYLinkState = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007146:	2300      	movs	r3, #0
 8007148:	67bb      	str	r3, [r7, #120]	@ 0x78
 800714a:	2300      	movs	r3, #0
 800714c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007152:	483a      	ldr	r0, [pc, #232]	@ (800723c <ethernet_link_thread+0x114>)
 8007154:	f7fa f800 	bl	8001158 <LAN8742_GetLinkState>
 8007158:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800715a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007160:	089b      	lsrs	r3, r3, #2
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00c      	beq.n	8007186 <ethernet_link_thread+0x5e>
 800716c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800716e:	2b01      	cmp	r3, #1
 8007170:	dc09      	bgt.n	8007186 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007172:	4833      	ldr	r0, [pc, #204]	@ (8007240 <ethernet_link_thread+0x118>)
 8007174:	f7fa fdb4 	bl	8001ce0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007178:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800717a:	f006 fbb1 	bl	800d8e0 <netif_set_down>
    netif_set_link_down(netif);
 800717e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007180:	f006 fc14 	bl	800d9ac <netif_set_link_down>
 8007184:	e055      	b.n	8007232 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007188:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d14e      	bne.n	8007232 <ethernet_link_thread+0x10a>
 8007194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007196:	2b01      	cmp	r3, #1
 8007198:	dd4b      	ble.n	8007232 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 800719a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800719c:	3b02      	subs	r3, #2
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d82a      	bhi.n	80071f8 <ethernet_link_thread+0xd0>
 80071a2:	a201      	add	r2, pc, #4	@ (adr r2, 80071a8 <ethernet_link_thread+0x80>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071cb 	.word	0x080071cb
 80071b0:	080071db 	.word	0x080071db
 80071b4:	080071eb 	.word	0x080071eb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80071b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071bc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071c4:	2301      	movs	r3, #1
 80071c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071c8:	e017      	b.n	80071fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071d4:	2301      	movs	r3, #1
 80071d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071d8:	e00f      	b.n	80071fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80071da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071de:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80071e0:	2300      	movs	r3, #0
 80071e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071e4:	2301      	movs	r3, #1
 80071e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071e8:	e007      	b.n	80071fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80071ee:	2300      	movs	r3, #0
 80071f0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071f6:	e000      	b.n	80071fa <ethernet_link_thread+0xd2>
    default:
      break;
 80071f8:	bf00      	nop
    }

    if(linkchanged)
 80071fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d018      	beq.n	8007232 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4619      	mov	r1, r3
 8007206:	480e      	ldr	r0, [pc, #56]	@ (8007240 <ethernet_link_thread+0x118>)
 8007208:	f7fb f99c 	bl	8002544 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800720c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800720e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007212:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007214:	f107 0308 	add.w	r3, r7, #8
 8007218:	4619      	mov	r1, r3
 800721a:	4809      	ldr	r0, [pc, #36]	@ (8007240 <ethernet_link_thread+0x118>)
 800721c:	f7fb fb66 	bl	80028ec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007220:	4807      	ldr	r0, [pc, #28]	@ (8007240 <ethernet_link_thread+0x118>)
 8007222:	f7fa fce9 	bl	8001bf8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007226:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007228:	f006 faee 	bl	800d808 <netif_set_up>
      netif_set_link_up(netif);
 800722c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800722e:	f006 fb89 	bl	800d944 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007232:	2064      	movs	r0, #100	@ 0x64
 8007234:	f000 f936 	bl	80074a4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007238:	e78b      	b.n	8007152 <ethernet_link_thread+0x2a>
 800723a:	bf00      	nop
 800723c:	24004ff8 	.word	0x24004ff8
 8007240:	24004f10 	.word	0x24004f10

08007244 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af02      	add	r7, sp, #8
 800724a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800724c:	4812      	ldr	r0, [pc, #72]	@ (8007298 <HAL_ETH_RxAllocateCallback+0x54>)
 800724e:	f006 f84f 	bl	800d2f0 <memp_malloc_pool>
 8007252:	60f8      	str	r0, [r7, #12]
  if (p)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f103 0220 	add.w	r2, r3, #32
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a0d      	ldr	r2, [pc, #52]	@ (800729c <HAL_ETH_RxAllocateCallback+0x58>)
 8007268:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2241      	movs	r2, #65	@ 0x41
 800727a:	2100      	movs	r1, #0
 800727c:	2000      	movs	r0, #0
 800727e:	f006 fdbb 	bl	800ddf8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007282:	e005      	b.n	8007290 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007284:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	08018430 	.word	0x08018430
 800729c:	08006e91 	.word	0x08006e91
 80072a0:	24004f04 	.word	0x24004f04

080072a4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b08d      	sub	sp, #52	@ 0x34
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3b20      	subs	r3, #32
 80072c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	2200      	movs	r2, #0
 80072ce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	887a      	ldrh	r2, [r7, #2]
 80072d4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80072de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e003      	b.n	80072ee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072f2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fa:	e009      	b.n	8007310 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	891a      	ldrh	r2, [r3, #8]
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	4413      	add	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007308:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f2      	bne.n	80072fc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	623a      	str	r2, [r7, #32]
 800731c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	2b00      	cmp	r3, #0
 8007322:	dd1d      	ble.n	8007360 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f003 021f 	and.w	r2, r3, #31
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007334:	f3bf 8f4f 	dsb	sy
}
 8007338:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800733a:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <HAL_ETH_RxLinkCallback+0xcc>)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3320      	adds	r3, #32
 8007346:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	3b20      	subs	r3, #32
 800734c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dcf2      	bgt.n	800733a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007354:	f3bf 8f4f 	dsb	sy
}
 8007358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800735a:	f3bf 8f6f 	isb	sy
}
 800735e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8007360:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007362:	bf00      	nop
 8007364:	3734      	adds	r7, #52	@ 0x34
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	e000ed00 	.word	0xe000ed00

08007374 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f006 fef3 	bl	800e168 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	4603      	mov	r3, r0
 8007392:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800739c:	2b84      	cmp	r3, #132	@ 0x84
 800739e:	d005      	beq.n	80073ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	3303      	adds	r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c0:	f3ef 8305 	mrs	r3, IPSR
 80073c4:	607b      	str	r3, [r7, #4]
  return(result);
 80073c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf14      	ite	ne
 80073cc:	2301      	movne	r3, #1
 80073ce:	2300      	moveq	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073e2:	f002 f8d3 	bl	800958c <vTaskStartScheduler>
  
  return osOK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}

080073ec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80073f0:	f7ff ffe3 	bl	80073ba <inHandlerMode>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80073fa:	f002 f9ed 	bl	80097d8 <xTaskGetTickCountFromISR>
 80073fe:	4603      	mov	r3, r0
 8007400:	e002      	b.n	8007408 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007402:	f002 f9d9 	bl	80097b8 <xTaskGetTickCount>
 8007406:	4603      	mov	r3, r0
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}

0800740c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800740c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740e:	b089      	sub	sp, #36	@ 0x24
 8007410:	af04      	add	r7, sp, #16
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d020      	beq.n	8007460 <osThreadCreate+0x54>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685c      	ldr	r4, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691e      	ldr	r6, [r3, #16]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ffa6 	bl	800738a <makeFreeRtosPriority>
 800743e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007448:	9202      	str	r2, [sp, #8]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	9100      	str	r1, [sp, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	4632      	mov	r2, r6
 8007452:	4629      	mov	r1, r5
 8007454:	4620      	mov	r0, r4
 8007456:	f001 feb3 	bl	80091c0 <xTaskCreateStatic>
 800745a:	4603      	mov	r3, r0
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	e01c      	b.n	800749a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685c      	ldr	r4, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800746c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ff88 	bl	800738a <makeFreeRtosPriority>
 800747a:	4602      	mov	r2, r0
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	9200      	str	r2, [sp, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	4632      	mov	r2, r6
 8007488:	4629      	mov	r1, r5
 800748a:	4620      	mov	r0, r4
 800748c:	f001 fef8 	bl	8009280 <xTaskCreate>
 8007490:	4603      	mov	r3, r0
 8007492:	2b01      	cmp	r3, #1
 8007494:	d001      	beq.n	800749a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	e000      	b.n	800749c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <osDelay+0x16>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e000      	b.n	80074bc <osDelay+0x18>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 f82f 	bl	8009520 <vTaskDelay>
  
  return osOK;
 80074c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	4619      	mov	r1, r3
 80074e2:	2001      	movs	r0, #1
 80074e4:	f001 f885 	bl	80085f2 <xQueueCreateMutexStatic>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e003      	b.n	80074f4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80074ec:	2001      	movs	r0, #1
 80074ee:	f001 f868 	bl	80085c2 <xQueueCreateMutex>
 80074f2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <osMutexWait+0x18>
    return osErrorParameter;
 8007510:	2380      	movs	r3, #128	@ 0x80
 8007512:	e03a      	b.n	800758a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800751e:	d103      	bne.n	8007528 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e009      	b.n	800753c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d006      	beq.n	800753c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <osMutexWait+0x40>
      ticks = 1;
 8007538:	2301      	movs	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800753c:	f7ff ff3d 	bl	80073ba <inHandlerMode>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d017      	beq.n	8007576 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	461a      	mov	r2, r3
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fc8c 	bl	8008e6c <xQueueReceiveFromISR>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d001      	beq.n	800755e <osMutexWait+0x62>
      return osErrorOS;
 800755a:	23ff      	movs	r3, #255	@ 0xff
 800755c:	e015      	b.n	800758a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <osMutexWait+0x8c>
 8007564:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <osMutexWait+0x98>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	e008      	b.n	8007588 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fb67 	bl	8008c4c <xQueueSemaphoreTake>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d001      	beq.n	8007588 <osMutexWait+0x8c>
    return osErrorOS;
 8007584:	23ff      	movs	r3, #255	@ 0xff
 8007586:	e000      	b.n	800758a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80075a8:	f7ff ff07 	bl	80073ba <inHandlerMode>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f9d5 	bl	8008968 <xQueueGiveFromISR>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d001      	beq.n	80075c8 <osMutexRelease+0x30>
      return osErrorOS;
 80075c4:	23ff      	movs	r3, #255	@ 0xff
 80075c6:	e017      	b.n	80075f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d013      	beq.n	80075f6 <osMutexRelease+0x5e>
 80075ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <osMutexRelease+0x68>)
 80075d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	e00a      	b.n	80075f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80075e0:	2300      	movs	r3, #0
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f81e 	bl	8008628 <xQueueGenericSend>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d001      	beq.n	80075f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80075f2:	23ff      	movs	r3, #255	@ 0xff
 80075f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af02      	add	r7, sp, #8
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00f      	beq.n	8007636 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d10a      	bne.n	8007632 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2203      	movs	r2, #3
 8007622:	9200      	str	r2, [sp, #0]
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	2001      	movs	r0, #1
 800762a:	f000 fed9 	bl	80083e0 <xQueueGenericCreateStatic>
 800762e:	4603      	mov	r3, r0
 8007630:	e016      	b.n	8007660 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	e014      	b.n	8007660 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d110      	bne.n	800765e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800763c:	2203      	movs	r2, #3
 800763e:	2100      	movs	r1, #0
 8007640:	2001      	movs	r0, #1
 8007642:	f000 ff4a 	bl	80084da <xQueueGenericCreate>
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <osSemaphoreCreate+0x56>
 800764e:	2300      	movs	r3, #0
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 ffe7 	bl	8008628 <xQueueGenericSend>
      return sema;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	e000      	b.n	8007660 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800765e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800767c:	2380      	movs	r3, #128	@ 0x80
 800767e:	e03a      	b.n	80076f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800768a:	d103      	bne.n	8007694 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e009      	b.n	80076a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d006      	beq.n	80076a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80076a8:	f7ff fe87 	bl	80073ba <inHandlerMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d017      	beq.n	80076e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	461a      	mov	r2, r3
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fbd6 	bl	8008e6c <xQueueReceiveFromISR>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d001      	beq.n	80076ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80076c6:	23ff      	movs	r3, #255	@ 0xff
 80076c8:	e015      	b.n	80076f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d011      	beq.n	80076f4 <osSemaphoreWait+0x8c>
 80076d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <osSemaphoreWait+0x98>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	e008      	b.n	80076f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fab1 	bl	8008c4c <xQueueSemaphoreTake>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80076f0:	23ff      	movs	r3, #255	@ 0xff
 80076f2:	e000      	b.n	80076f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007714:	f7ff fe51 	bl	80073ba <inHandlerMode>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d016      	beq.n	800774c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f91f 	bl	8008968 <xQueueGiveFromISR>
 800772a:	4603      	mov	r3, r0
 800772c:	2b01      	cmp	r3, #1
 800772e:	d001      	beq.n	8007734 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007730:	23ff      	movs	r3, #255	@ 0xff
 8007732:	e017      	b.n	8007764 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d013      	beq.n	8007762 <osSemaphoreRelease+0x5e>
 800773a:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <osSemaphoreRelease+0x68>)
 800773c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	e00a      	b.n	8007762 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800774c:	2300      	movs	r3, #0
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 ff68 	bl	8008628 <xQueueGenericSend>
 8007758:	4603      	mov	r3, r0
 800775a:	2b01      	cmp	r3, #1
 800775c:	d001      	beq.n	8007762 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800775e:	23ff      	movs	r3, #255	@ 0xff
 8007760:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	e000ed04 	.word	0xe000ed04

08007770 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b085      	sub	sp, #20
 8007774:	af02      	add	r7, sp, #8
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <osMessageCreate+0x36>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6859      	ldr	r1, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2400      	movs	r4, #0
 800779c:	9400      	str	r4, [sp, #0]
 800779e:	f000 fe1f 	bl	80083e0 <xQueueGenericCreateStatic>
 80077a2:	4603      	mov	r3, r0
 80077a4:	e008      	b.n	80077b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	4619      	mov	r1, r3
 80077b2:	f000 fe92 	bl	80084da <xQueueGenericCreate>
 80077b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <osMessagePut+0x1e>
    ticks = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80077de:	f7ff fdec 	bl	80073ba <inHandlerMode>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d018      	beq.n	800781a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80077e8:	f107 0210 	add.w	r2, r7, #16
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	2300      	movs	r3, #0
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f001 f81a 	bl	800882c <xQueueGenericSendFromISR>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d001      	beq.n	8007802 <osMessagePut+0x42>
      return osErrorOS;
 80077fe:	23ff      	movs	r3, #255	@ 0xff
 8007800:	e018      	b.n	8007834 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d014      	beq.n	8007832 <osMessagePut+0x72>
 8007808:	4b0c      	ldr	r3, [pc, #48]	@ (800783c <osMessagePut+0x7c>)
 800780a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	e00b      	b.n	8007832 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800781a:	f107 0108 	add.w	r1, r7, #8
 800781e:	2300      	movs	r3, #0
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 ff00 	bl	8008628 <xQueueGenericSend>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d001      	beq.n	8007832 <osMessagePut+0x72>
      return osErrorOS;
 800782e:	23ff      	movs	r3, #255	@ 0xff
 8007830:	e000      	b.n	8007834 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b08b      	sub	sp, #44	@ 0x2c
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800785a:	2380      	movs	r3, #128	@ 0x80
 800785c:	617b      	str	r3, [r7, #20]
    return event;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	461c      	mov	r4, r3
 8007862:	f107 0314 	add.w	r3, r7, #20
 8007866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800786a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800786e:	e054      	b.n	800791a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007870:	2300      	movs	r3, #0
 8007872:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800787e:	d103      	bne.n	8007888 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
 8007886:	e009      	b.n	800789c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <osMessageGet+0x5c>
      ticks = 1;
 8007898:	2301      	movs	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800789c:	f7ff fd8d 	bl	80073ba <inHandlerMode>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01c      	beq.n	80078e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80078a6:	f107 0220 	add.w	r2, r7, #32
 80078aa:	f107 0314 	add.w	r3, r7, #20
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	68b8      	ldr	r0, [r7, #8]
 80078b4:	f001 fada 	bl	8008e6c <xQueueReceiveFromISR>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d102      	bne.n	80078c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80078be:	2310      	movs	r3, #16
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e001      	b.n	80078c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01d      	beq.n	800790a <osMessageGet+0xca>
 80078ce:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <osMessageGet+0xe4>)
 80078d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	e014      	b.n	800790a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	3304      	adds	r3, #4
 80078e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e8:	4619      	mov	r1, r3
 80078ea:	68b8      	ldr	r0, [r7, #8]
 80078ec:	f001 f8cc 	bl	8008a88 <xQueueReceive>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d102      	bne.n	80078fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80078f6:	2310      	movs	r3, #16
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e006      	b.n	800790a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <osMessageGet+0xc6>
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <osMessageGet+0xc8>
 8007906:	2340      	movs	r3, #64	@ 0x40
 8007908:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	461c      	mov	r4, r3
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	372c      	adds	r7, #44	@ 0x2c
 800791e:	46bd      	mov	sp, r7
 8007920:	bd90      	pop	{r4, r7, pc}
 8007922:	bf00      	nop
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	@ 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007934:	f001 fe94 	bl	8009660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007938:	4b5c      	ldr	r3, [pc, #368]	@ (8007aac <pvPortMalloc+0x184>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007940:	f000 f924 	bl	8007b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007944:	4b5a      	ldr	r3, [pc, #360]	@ (8007ab0 <pvPortMalloc+0x188>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8095 	bne.w	8007a7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01e      	beq.n	8007996 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007958:	2208      	movs	r2, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d015      	beq.n	8007996 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	3308      	adds	r3, #8
 8007972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d06f      	beq.n	8007a7c <pvPortMalloc+0x154>
 800799c:	4b45      	ldr	r3, [pc, #276]	@ (8007ab4 <pvPortMalloc+0x18c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d86a      	bhi.n	8007a7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079a6:	4b44      	ldr	r3, [pc, #272]	@ (8007ab8 <pvPortMalloc+0x190>)
 80079a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079aa:	4b43      	ldr	r3, [pc, #268]	@ (8007ab8 <pvPortMalloc+0x190>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079b0:	e004      	b.n	80079bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d903      	bls.n	80079ce <pvPortMalloc+0xa6>
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f1      	bne.n	80079b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ce:	4b37      	ldr	r3, [pc, #220]	@ (8007aac <pvPortMalloc+0x184>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d051      	beq.n	8007a7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2208      	movs	r2, #8
 80079de:	4413      	add	r3, r2
 80079e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	2308      	movs	r3, #8
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d920      	bls.n	8007a3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <pvPortMalloc+0xfc>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	613b      	str	r3, [r7, #16]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a36:	69b8      	ldr	r0, [r7, #24]
 8007a38:	f000 f90a 	bl	8007c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab4 <pvPortMalloc+0x18c>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab4 <pvPortMalloc+0x18c>)
 8007a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <pvPortMalloc+0x18c>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007abc <pvPortMalloc+0x194>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d203      	bcs.n	8007a5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a56:	4b17      	ldr	r3, [pc, #92]	@ (8007ab4 <pvPortMalloc+0x18c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <pvPortMalloc+0x194>)
 8007a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4b13      	ldr	r3, [pc, #76]	@ (8007ab0 <pvPortMalloc+0x188>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a72:	4b13      	ldr	r3, [pc, #76]	@ (8007ac0 <pvPortMalloc+0x198>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a11      	ldr	r2, [pc, #68]	@ (8007ac0 <pvPortMalloc+0x198>)
 8007a7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a7c:	f001 fdfe 	bl	800967c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <pvPortMalloc+0x17a>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60fb      	str	r3, [r7, #12]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <pvPortMalloc+0x176>
	return pvReturn;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3728      	adds	r7, #40	@ 0x28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	24008c20 	.word	0x24008c20
 8007ab0:	24008c34 	.word	0x24008c34
 8007ab4:	24008c24 	.word	0x24008c24
 8007ab8:	24008c18 	.word	0x24008c18
 8007abc:	24008c28 	.word	0x24008c28
 8007ac0:	24008c2c 	.word	0x24008c2c

08007ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d04f      	beq.n	8007b76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	425b      	negs	r3, r3
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4413      	add	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <vPortFree+0xbc>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4013      	ands	r3, r2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <vPortFree+0x46>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60fb      	str	r3, [r7, #12]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <vPortFree+0x66>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60bb      	str	r3, [r7, #8]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	4b14      	ldr	r3, [pc, #80]	@ (8007b80 <vPortFree+0xbc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11a      	bne.n	8007b76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4b0e      	ldr	r3, [pc, #56]	@ (8007b80 <vPortFree+0xbc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b50:	f001 fd86 	bl	8009660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	4b0a      	ldr	r3, [pc, #40]	@ (8007b84 <vPortFree+0xc0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	4a09      	ldr	r2, [pc, #36]	@ (8007b84 <vPortFree+0xc0>)
 8007b60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f000 f874 	bl	8007c50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b68:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <vPortFree+0xc4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	4a06      	ldr	r2, [pc, #24]	@ (8007b88 <vPortFree+0xc4>)
 8007b70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b72:	f001 fd83 	bl	800967c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b76:	bf00      	nop
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	24008c34 	.word	0x24008c34
 8007b84:	24008c24 	.word	0x24008c24
 8007b88:	24008c30 	.word	0x24008c30

08007b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b98:	4b27      	ldr	r3, [pc, #156]	@ (8007c38 <prvHeapInit+0xac>)
 8007b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00c      	beq.n	8007bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	4a1f      	ldr	r2, [pc, #124]	@ (8007c38 <prvHeapInit+0xac>)
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c3c <prvHeapInit+0xb0>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bca:	4b1c      	ldr	r3, [pc, #112]	@ (8007c3c <prvHeapInit+0xb0>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bd8:	2208      	movs	r2, #8
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <prvHeapInit+0xb4>)
 8007bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bee:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <prvHeapInit+0xb4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <prvHeapInit+0xb4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c40 <prvHeapInit+0xb4>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a0a      	ldr	r2, [pc, #40]	@ (8007c44 <prvHeapInit+0xb8>)
 8007c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a09      	ldr	r2, [pc, #36]	@ (8007c48 <prvHeapInit+0xbc>)
 8007c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c24:	4b09      	ldr	r3, [pc, #36]	@ (8007c4c <prvHeapInit+0xc0>)
 8007c26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c2a:	601a      	str	r2, [r3, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	24005018 	.word	0x24005018
 8007c3c:	24008c18 	.word	0x24008c18
 8007c40:	24008c20 	.word	0x24008c20
 8007c44:	24008c28 	.word	0x24008c28
 8007c48:	24008c24 	.word	0x24008c24
 8007c4c:	24008c34 	.word	0x24008c34

08007c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c58:	4b28      	ldr	r3, [pc, #160]	@ (8007cfc <prvInsertBlockIntoFreeList+0xac>)
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e002      	b.n	8007c64 <prvInsertBlockIntoFreeList+0x14>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d8f7      	bhi.n	8007c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d108      	bne.n	8007c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	441a      	add	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	441a      	add	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d118      	bne.n	8007cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b15      	ldr	r3, [pc, #84]	@ (8007d00 <prvInsertBlockIntoFreeList+0xb0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d00d      	beq.n	8007cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e008      	b.n	8007ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cce:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <prvInsertBlockIntoFreeList+0xb0>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e003      	b.n	8007ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d002      	beq.n	8007cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	24008c18 	.word	0x24008c18
 8007d00:	24008c20 	.word	0x24008c20

08007d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f103 0208 	add.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f103 0208 	add.w	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f103 0208 	add.w	r2, r3, #8
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dbc:	d103      	bne.n	8007dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e00c      	b.n	8007de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	e002      	b.n	8007dd4 <vListInsert+0x2e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d2f6      	bcs.n	8007dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6852      	ldr	r2, [r2, #4]
 8007e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d103      	bne.n	8007e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3b04      	subs	r3, #4
 8007e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f023 0201 	bic.w	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ed0 <pxPortInitialiseStack+0x64>)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3b14      	subs	r3, #20
 8007ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f06f 0202 	mvn.w	r2, #2
 8007eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b20      	subs	r3, #32
 8007ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	08007ed5 	.word	0x08007ed5

08007ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ede:	4b13      	ldr	r3, [pc, #76]	@ (8007f2c <prvTaskExitError+0x58>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ee6:	d00b      	beq.n	8007f00 <prvTaskExitError+0x2c>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60fb      	str	r3, [r7, #12]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <prvTaskExitError+0x28>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60bb      	str	r3, [r7, #8]
}
 8007f12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f14:	bf00      	nop
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0fc      	beq.n	8007f16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	24000040 	.word	0x24000040

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	24008c40 	.word	0x24008c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	@ (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f86:	4b47      	ldr	r3, [pc, #284]	@ (80080a4 <xPortStartScheduler+0x124>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a47      	ldr	r2, [pc, #284]	@ (80080a8 <xPortStartScheduler+0x128>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10b      	bne.n	8007fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80080a4 <xPortStartScheduler+0x124>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3f      	ldr	r2, [pc, #252]	@ (80080ac <xPortStartScheduler+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10b      	bne.n	8007fca <xPortStartScheduler+0x4a>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	613b      	str	r3, [r7, #16]
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	e7fd      	b.n	8007fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fca:	4b39      	ldr	r3, [pc, #228]	@ (80080b0 <xPortStartScheduler+0x130>)
 8007fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	22ff      	movs	r2, #255	@ 0xff
 8007fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	4b31      	ldr	r3, [pc, #196]	@ (80080b4 <xPortStartScheduler+0x134>)
 8007ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ff2:	4b31      	ldr	r3, [pc, #196]	@ (80080b8 <xPortStartScheduler+0x138>)
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff8:	e009      	b.n	800800e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80080b8 <xPortStartScheduler+0x138>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4a2d      	ldr	r2, [pc, #180]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	b2db      	uxtb	r3, r3
 800800c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d0ef      	beq.n	8007ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800801a:	4b27      	ldr	r3, [pc, #156]	@ (80080b8 <xPortStartScheduler+0x138>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f1c3 0307 	rsb	r3, r3, #7
 8008022:	2b04      	cmp	r3, #4
 8008024:	d00b      	beq.n	800803e <xPortStartScheduler+0xbe>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800803e:	4b1e      	ldr	r3, [pc, #120]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	4a1c      	ldr	r2, [pc, #112]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008048:	4b1b      	ldr	r3, [pc, #108]	@ (80080b8 <xPortStartScheduler+0x138>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008050:	4a19      	ldr	r2, [pc, #100]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800805c:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <xPortStartScheduler+0x13c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a16      	ldr	r2, [pc, #88]	@ (80080bc <xPortStartScheduler+0x13c>)
 8008062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008068:	4b14      	ldr	r3, [pc, #80]	@ (80080bc <xPortStartScheduler+0x13c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a13      	ldr	r2, [pc, #76]	@ (80080bc <xPortStartScheduler+0x13c>)
 800806e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008074:	f000 f8da 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008078:	4b11      	ldr	r3, [pc, #68]	@ (80080c0 <xPortStartScheduler+0x140>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800807e:	f000 f8f9 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <xPortStartScheduler+0x144>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a0f      	ldr	r2, [pc, #60]	@ (80080c4 <xPortStartScheduler+0x144>)
 8008088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800808c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800808e:	f7ff ff63 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008092:	f001 fc6d 	bl	8009970 <vTaskSwitchContext>
	prvTaskExitError();
 8008096:	f7ff ff1d 	bl	8007ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	e000ed00 	.word	0xe000ed00
 80080a8:	410fc271 	.word	0x410fc271
 80080ac:	410fc270 	.word	0x410fc270
 80080b0:	e000e400 	.word	0xe000e400
 80080b4:	24008c38 	.word	0x24008c38
 80080b8:	24008c3c 	.word	0x24008c3c
 80080bc:	e000ed20 	.word	0xe000ed20
 80080c0:	24000040 	.word	0x24000040
 80080c4:	e000ef34 	.word	0xe000ef34

080080c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080e2:	4b10      	ldr	r3, [pc, #64]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d110      	bne.n	8008116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <vPortEnterCritical+0x60>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <vPortEnterCritical+0x4e>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	603b      	str	r3, [r7, #0]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <vPortEnterCritical+0x4a>
	}
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	24000040 	.word	0x24000040
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008132:	4b12      	ldr	r3, [pc, #72]	@ (800817c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <vPortExitCritical+0x26>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008152:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	4a08      	ldr	r2, [pc, #32]	@ (800817c <vPortExitCritical+0x50>)
 800815a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800815c:	4b07      	ldr	r3, [pc, #28]	@ (800817c <vPortExitCritical+0x50>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d105      	bne.n	8008170 <vPortExitCritical+0x44>
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800816e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	24000040 	.word	0x24000040

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f001 fbde 	bl	8009970 <vTaskSwitchContext>
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f380 8811 	msr	BASEPRI, r0
 80081bc:	bc09      	pop	{r0, r3}
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	f01e 0f10 	tst.w	lr, #16
 80081ca:	bf08      	it	eq
 80081cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d0:	f380 8809 	msr	PSP, r0
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst>:
 80081e0:	24008c40 	.word	0x24008c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008202:	f001 fafb 	bl	80097fc <xTaskIncrementTick>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820c:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <SysTick_Handler+0x40>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	@ (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	@ (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	24000000 	.word	0x24000000
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d915      	bls.n	80082c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800829a:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <vPortValidateInterruptPriority+0x74>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082a4:	4b16      	ldr	r3, [pc, #88]	@ (8008300 <vPortValidateInterruptPriority+0x78>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20b      	bcs.n	80082c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <vPortValidateInterruptPriority+0x7c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <vPortValidateInterruptPriority+0x80>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d90b      	bls.n	80082ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	603b      	str	r3, [r7, #0]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <vPortValidateInterruptPriority+0x62>
	}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	e000e3f0 	.word	0xe000e3f0
 8008300:	24008c38 	.word	0x24008c38
 8008304:	e000ed0c 	.word	0xe000ed0c
 8008308:	24008c3c 	.word	0x24008c3c

0800830c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xQueueGenericReset+0x2c>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60bb      	str	r3, [r7, #8]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008338:	f7ff fec6 	bl	80080c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	441a      	add	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008368:	3b01      	subs	r3, #1
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800836e:	fb01 f303 	mul.w	r3, r1, r3
 8008372:	441a      	add	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	22ff      	movs	r2, #255	@ 0xff
 800837c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	22ff      	movs	r2, #255	@ 0xff
 8008384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d114      	bne.n	80083b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01a      	beq.n	80083cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3310      	adds	r3, #16
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fb72 	bl	8009a84 <xTaskRemoveFromEventList>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d012      	beq.n	80083cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083a6:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <xQueueGenericReset+0xd0>)
 80083a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	e009      	b.n	80083cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3310      	adds	r3, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fca1 	bl	8007d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3324      	adds	r3, #36	@ 0x24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fc9c 	bl	8007d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083cc:	f7ff feae 	bl	800812c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083d0:	2301      	movs	r3, #1
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	@ 0x38
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <xQueueGenericCreateStatic+0x56>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <xQueueGenericCreateStatic+0x5a>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueGenericCreateStatic+0x5c>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10b      	bne.n	8008458 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	623b      	str	r3, [r7, #32]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <xQueueGenericCreateStatic+0x84>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <xQueueGenericCreateStatic+0x88>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <xQueueGenericCreateStatic+0x8a>
 8008468:	2300      	movs	r3, #0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	61fb      	str	r3, [r7, #28]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008486:	2348      	movs	r3, #72	@ 0x48
 8008488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b48      	cmp	r3, #72	@ 0x48
 800848e:	d00b      	beq.n	80084a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61bb      	str	r3, [r7, #24]
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f840 	bl	8008550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3730      	adds	r7, #48	@ 0x30
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b08a      	sub	sp, #40	@ 0x28
 80084de:	af02      	add	r7, sp, #8
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <xQueueGenericCreate+0x2c>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	613b      	str	r3, [r7, #16]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	3348      	adds	r3, #72	@ 0x48
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fa07 	bl	8007928 <pvPortMalloc>
 800851a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d011      	beq.n	8008546 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3348      	adds	r3, #72	@ 0x48
 800852a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008534:	79fa      	ldrb	r2, [r7, #7]
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	4613      	mov	r3, r2
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f805 	bl	8008550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008546:	69bb      	ldr	r3, [r7, #24]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d103      	bne.n	800856c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e002      	b.n	8008572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800857e:	2101      	movs	r1, #1
 8008580:	69b8      	ldr	r0, [r7, #24]
 8008582:	f7ff fec3 	bl	800830c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00e      	beq.n	80085ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085ae:	2300      	movs	r3, #0
 80085b0:	2200      	movs	r2, #0
 80085b2:	2100      	movs	r1, #0
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f837 	bl	8008628 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b086      	sub	sp, #24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	4603      	mov	r3, r0
 80085ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6939      	ldr	r1, [r7, #16]
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	f7ff ff7d 	bl	80084da <xQueueGenericCreate>
 80085e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff ffd3 	bl	800858e <prvInitialiseMutex>

		return xNewQueue;
 80085e8:	68fb      	ldr	r3, [r7, #12]
	}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af02      	add	r7, sp, #8
 80085f8:	4603      	mov	r3, r0
 80085fa:	6039      	str	r1, [r7, #0]
 80085fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085fe:	2301      	movs	r3, #1
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	2300      	movs	r3, #0
 8008604:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	6939      	ldr	r1, [r7, #16]
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f7ff fee5 	bl	80083e0 <xQueueGenericCreateStatic>
 8008616:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff ffb8 	bl	800858e <prvInitialiseMutex>

		return xNewQueue;
 800861e:	68fb      	ldr	r3, [r7, #12]
	}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	@ 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <xQueueGenericSend+0x34>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d103      	bne.n	800866a <xQueueGenericSend+0x42>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <xQueueGenericSend+0x46>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <xQueueGenericSend+0x48>
 800866e:	2300      	movs	r3, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xQueueGenericSend+0x64>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d103      	bne.n	800869a <xQueueGenericSend+0x72>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <xQueueGenericSend+0x76>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSend+0x78>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <xQueueGenericSend+0x94>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086bc:	f001 fba8 	bl	8009e10 <xTaskGetSchedulerState>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <xQueueGenericSend+0xa4>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <xQueueGenericSend+0xa8>
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <xQueueGenericSend+0xaa>
 80086d0:	2300      	movs	r3, #0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <xQueueGenericSend+0xc6>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	61fb      	str	r3, [r7, #28]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ee:	f7ff fceb 	bl	80080c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <xQueueGenericSend+0xdc>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d129      	bne.n	8008758 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800870a:	f000 fc49 	bl	8008fa0 <prvCopyDataToQueue>
 800870e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d010      	beq.n	800873a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	3324      	adds	r3, #36	@ 0x24
 800871c:	4618      	mov	r0, r3
 800871e:	f001 f9b1 	bl	8009a84 <xTaskRemoveFromEventList>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d013      	beq.n	8008750 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008728:	4b3f      	ldr	r3, [pc, #252]	@ (8008828 <xQueueGenericSend+0x200>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	e00a      	b.n	8008750 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800873a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008740:	4b39      	ldr	r3, [pc, #228]	@ (8008828 <xQueueGenericSend+0x200>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008750:	f7ff fcec 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	e063      	b.n	8008820 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800875e:	f7ff fce5 	bl	800812c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008762:	2300      	movs	r3, #0
 8008764:	e05c      	b.n	8008820 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4618      	mov	r0, r3
 8008772:	f001 f9eb 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800877a:	f7ff fcd7 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800877e:	f000 ff6f 	bl	8009660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008782:	f7ff fca1 	bl	80080c8 <vPortEnterCritical>
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800878c:	b25b      	sxtb	r3, r3
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008792:	d103      	bne.n	800879c <xQueueGenericSend+0x174>
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a8:	d103      	bne.n	80087b2 <xQueueGenericSend+0x18a>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087b2:	f7ff fcbb 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087b6:	1d3a      	adds	r2, r7, #4
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 f9da 	bl	8009b78 <xTaskCheckForTimeOut>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d124      	bne.n	8008814 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087cc:	f000 fce0 	bl	8009190 <prvIsQueueFull>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d018      	beq.n	8008808 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	3310      	adds	r3, #16
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f92a 	bl	8009a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087e6:	f000 fc6b 	bl	80090c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ea:	f000 ff47 	bl	800967c <xTaskResumeAll>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af7c 	bne.w	80086ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <xQueueGenericSend+0x200>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	e772      	b.n	80086ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800880a:	f000 fc59 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800880e:	f000 ff35 	bl	800967c <xTaskResumeAll>
 8008812:	e76c      	b.n	80086ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008816:	f000 fc53 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800881a:	f000 ff2f 	bl	800967c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800881e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008820:	4618      	mov	r0, r3
 8008822:	3738      	adds	r7, #56	@ 0x38
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b090      	sub	sp, #64	@ 0x40
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10b      	bne.n	800885c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <xQueueGenericSendFromISR+0x3e>
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <xQueueGenericSendFromISR+0x42>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericSendFromISR+0x44>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d103      	bne.n	800889a <xQueueGenericSendFromISR+0x6e>
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <xQueueGenericSendFromISR+0x72>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueGenericSendFromISR+0x74>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	623b      	str	r3, [r7, #32]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088bc:	f7ff fce4 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 80088c0:	f3ef 8211 	mrs	r2, BASEPRI
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	61fa      	str	r2, [r7, #28]
 80088d6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80088d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d302      	bcc.n	80088ee <xQueueGenericSendFromISR+0xc2>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d12f      	bne.n	800894e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008904:	f000 fb4c 	bl	8008fa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008908:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008910:	d112      	bne.n	8008938 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891c:	3324      	adds	r3, #36	@ 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f001 f8b0 	bl	8009a84 <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e007      	b.n	8008948 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008938:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800893c:	3301      	adds	r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	b25a      	sxtb	r2, r3
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800894c:	e001      	b.n	8008952 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f383 8811 	msr	BASEPRI, r3
}
 800895c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008960:	4618      	mov	r0, r3
 8008962:	3740      	adds	r7, #64	@ 0x40
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	@ 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	623b      	str	r3, [r7, #32]
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	61fb      	str	r3, [r7, #28]
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	e7fd      	b.n	80089b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d103      	bne.n	80089c4 <xQueueGiveFromISR+0x5c>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <xQueueGiveFromISR+0x60>
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <xQueueGiveFromISR+0x62>
 80089c8:	2300      	movs	r3, #0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	61bb      	str	r3, [r7, #24]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e6:	f7ff fc4f 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 80089ea:	f3ef 8211 	mrs	r2, BASEPRI
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	617a      	str	r2, [r7, #20]
 8008a00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008a02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d22b      	bcs.n	8008a6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a30:	d112      	bne.n	8008a58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	3324      	adds	r3, #36	@ 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 f820 	bl	8009a84 <xTaskRemoveFromEventList>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e007      	b.n	8008a68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	b25a      	sxtb	r2, r3
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6c:	e001      	b.n	8008a72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f383 8811 	msr	BASEPRI, r3
}
 8008a7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3738      	adds	r7, #56	@ 0x38
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08c      	sub	sp, #48	@ 0x30
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <xQueueReceive+0x32>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	623b      	str	r3, [r7, #32]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <xQueueReceive+0x40>
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <xQueueReceive+0x44>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <xQueueReceive+0x46>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <xQueueReceive+0x62>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	61fb      	str	r3, [r7, #28]
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aea:	f001 f991 	bl	8009e10 <xTaskGetSchedulerState>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <xQueueReceive+0x72>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <xQueueReceive+0x76>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueReceive+0x78>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <xQueueReceive+0x94>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b1c:	f7ff fad4 	bl	80080c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01f      	beq.n	8008b6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b30:	f000 faa0 	bl	8009074 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	1e5a      	subs	r2, r3, #1
 8008b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	3310      	adds	r3, #16
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 ff9b 	bl	8009a84 <xTaskRemoveFromEventList>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b54:	4b3c      	ldr	r3, [pc, #240]	@ (8008c48 <xQueueReceive+0x1c0>)
 8008b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b64:	f7ff fae2 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e069      	b.n	8008c40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b72:	f7ff fadb 	bl	800812c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e062      	b.n	8008c40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 ffe1 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b8e:	f7ff facd 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b92:	f000 fd65 	bl	8009660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b96:	f7ff fa97 	bl	80080c8 <vPortEnterCritical>
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ba6:	d103      	bne.n	8008bb0 <xQueueReceive+0x128>
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bbc:	d103      	bne.n	8008bc6 <xQueueReceive+0x13e>
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bc6:	f7ff fab1 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bca:	1d3a      	adds	r2, r7, #4
 8008bcc:	f107 0310 	add.w	r3, r7, #16
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 ffd0 	bl	8009b78 <xTaskCheckForTimeOut>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d123      	bne.n	8008c26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be0:	f000 fac0 	bl	8009164 <prvIsQueueEmpty>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d017      	beq.n	8008c1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bec:	3324      	adds	r3, #36	@ 0x24
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 ff20 	bl	8009a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bfa:	f000 fa61 	bl	80090c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bfe:	f000 fd3d 	bl	800967c <xTaskResumeAll>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d189      	bne.n	8008b1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c08:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <xQueueReceive+0x1c0>)
 8008c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	e780      	b.n	8008b1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c1c:	f000 fa50 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c20:	f000 fd2c 	bl	800967c <xTaskResumeAll>
 8008c24:	e77a      	b.n	8008b1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c28:	f000 fa4a 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c2c:	f000 fd26 	bl	800967c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c32:	f000 fa97 	bl	8009164 <prvIsQueueEmpty>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f43f af6f 	beq.w	8008b1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3730      	adds	r7, #48	@ 0x30
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08e      	sub	sp, #56	@ 0x38
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10b      	bne.n	8008c80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	623b      	str	r3, [r7, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	61fb      	str	r3, [r7, #28]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ca0:	f001 f8b6 	bl	8009e10 <xTaskGetSchedulerState>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <xQueueSemaphoreTake+0x64>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xQueueSemaphoreTake+0x68>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xQueueSemaphoreTake+0x6a>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	61bb      	str	r3, [r7, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cd2:	f7ff f9f9 	bl	80080c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d024      	beq.n	8008d2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cf2:	f001 fa39 	bl	800a168 <pvTaskIncrementMutexHeldCount>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00f      	beq.n	8008d24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	3310      	adds	r3, #16
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 febb 	bl	8009a84 <xTaskRemoveFromEventList>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d14:	4b54      	ldr	r3, [pc, #336]	@ (8008e68 <xQueueSemaphoreTake+0x21c>)
 8008d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d24:	f7ff fa02 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e098      	b.n	8008e5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d112      	bne.n	8008d58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	617b      	str	r3, [r7, #20]
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	e7fd      	b.n	8008d4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d50:	f7ff f9ec 	bl	800812c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e082      	b.n	8008e5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d5e:	f107 030c 	add.w	r3, r7, #12
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fef2 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d6c:	f7ff f9de 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d70:	f000 fc76 	bl	8009660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d74:	f7ff f9a8 	bl	80080c8 <vPortEnterCritical>
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d7e:	b25b      	sxtb	r3, r3
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d84:	d103      	bne.n	8008d8e <xQueueSemaphoreTake+0x142>
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d9a:	d103      	bne.n	8008da4 <xQueueSemaphoreTake+0x158>
 8008d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008da4:	f7ff f9c2 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da8:	463a      	mov	r2, r7
 8008daa:	f107 030c 	add.w	r3, r7, #12
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fee1 	bl	8009b78 <xTaskCheckForTimeOut>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d132      	bne.n	8008e22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008dbe:	f000 f9d1 	bl	8009164 <prvIsQueueEmpty>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d026      	beq.n	8008e16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d109      	bne.n	8008de4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008dd0:	f7ff f97a 	bl	80080c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f837 	bl	8009e4c <xTaskPriorityInherit>
 8008dde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008de0:	f7ff f9a4 	bl	800812c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de6:	3324      	adds	r3, #36	@ 0x24
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fe23 	bl	8009a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008df2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008df4:	f000 f964 	bl	80090c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008df8:	f000 fc40 	bl	800967c <xTaskResumeAll>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f47f af67 	bne.w	8008cd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008e04:	4b18      	ldr	r3, [pc, #96]	@ (8008e68 <xQueueSemaphoreTake+0x21c>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e75d      	b.n	8008cd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e18:	f000 f952 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e1c:	f000 fc2e 	bl	800967c <xTaskResumeAll>
 8008e20:	e757      	b.n	8008cd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e24:	f000 f94c 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e28:	f000 fc28 	bl	800967c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e2e:	f000 f999 	bl	8009164 <prvIsQueueEmpty>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f43f af4c 	beq.w	8008cd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00d      	beq.n	8008e5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e40:	f7ff f942 	bl	80080c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e46:	f000 f893 	bl	8008f70 <prvGetDisinheritPriorityAfterTimeout>
 8008e4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 f8f8 	bl	800a048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e58:	f7ff f968 	bl	800812c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3738      	adds	r7, #56	@ 0x38
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08e      	sub	sp, #56	@ 0x38
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10b      	bne.n	8008e9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	623b      	str	r3, [r7, #32]
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	e7fd      	b.n	8008e96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <xQueueReceiveFromISR+0x3c>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <xQueueReceiveFromISR+0x40>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <xQueueReceiveFromISR+0x42>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	61fb      	str	r3, [r7, #28]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eca:	f7ff f9dd 	bl	8008288 <vPortValidateInterruptPriority>
	__asm volatile
 8008ece:	f3ef 8211 	mrs	r2, BASEPRI
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	61ba      	str	r2, [r7, #24]
 8008ee4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ee6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d02f      	beq.n	8008f56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f04:	f000 f8b6 	bl	8009074 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	1e5a      	subs	r2, r3, #1
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f18:	d112      	bne.n	8008f40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	3310      	adds	r3, #16
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fdac 	bl	8009a84 <xTaskRemoveFromEventList>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00e      	beq.n	8008f50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e007      	b.n	8008f50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f44:	3301      	adds	r3, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	b25a      	sxtb	r2, r3
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008f50:	2301      	movs	r3, #1
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f54:	e001      	b.n	8008f5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f383 8811 	msr	BASEPRI, r3
}
 8008f64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3738      	adds	r7, #56	@ 0x38
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f1c3 0307 	rsb	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e001      	b.n	8008f92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f92:	68fb      	ldr	r3, [r7, #12]
	}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d14d      	bne.n	8009062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 ffb4 	bl	8009f38 <xTaskPriorityDisinherit>
 8008fd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	e043      	b.n	8009062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d119      	bne.n	8009014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6858      	ldr	r0, [r3, #4]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	f00b fcd9 	bl	80149a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d32b      	bcc.n	8009062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	e026      	b.n	8009062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	68d8      	ldr	r0, [r3, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901c:	461a      	mov	r2, r3
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	f00b fcbf 	bl	80149a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902c:	425b      	negs	r3, r3
 800902e:	441a      	add	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d207      	bcs.n	8009050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	425b      	negs	r3, r3
 800904a:	441a      	add	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d105      	bne.n	8009062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3b01      	subs	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800906a:	697b      	ldr	r3, [r7, #20]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d018      	beq.n	80090b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908e:	441a      	add	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	429a      	cmp	r2, r3
 800909e:	d303      	bcc.n	80090a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68d9      	ldr	r1, [r3, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b0:	461a      	mov	r2, r3
 80090b2:	6838      	ldr	r0, [r7, #0]
 80090b4:	f00b fc75 	bl	80149a2 <memcpy>
	}
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090c8:	f7fe fffe 	bl	80080c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d4:	e011      	b.n	80090fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d012      	beq.n	8009104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3324      	adds	r3, #36	@ 0x24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fcce 	bl	8009a84 <xTaskRemoveFromEventList>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090ee:	f000 fda7 	bl	8009c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dce9      	bgt.n	80090d6 <prvUnlockQueue+0x16>
 8009102:	e000      	b.n	8009106 <prvUnlockQueue+0x46>
					break;
 8009104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	22ff      	movs	r2, #255	@ 0xff
 800910a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800910e:	f7ff f80d 	bl	800812c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009112:	f7fe ffd9 	bl	80080c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800911c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800911e:	e011      	b.n	8009144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d012      	beq.n	800914e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3310      	adds	r3, #16
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fca9 	bl	8009a84 <xTaskRemoveFromEventList>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009138:	f000 fd82 	bl	8009c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	3b01      	subs	r3, #1
 8009140:	b2db      	uxtb	r3, r3
 8009142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009148:	2b00      	cmp	r3, #0
 800914a:	dce9      	bgt.n	8009120 <prvUnlockQueue+0x60>
 800914c:	e000      	b.n	8009150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800914e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	22ff      	movs	r2, #255	@ 0xff
 8009154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009158:	f7fe ffe8 	bl	800812c <vPortExitCritical>
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800916c:	f7fe ffac 	bl	80080c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e001      	b.n	8009182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009182:	f7fe ffd3 	bl	800812c <vPortExitCritical>

	return xReturn;
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009198:	f7fe ff96 	bl	80080c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d102      	bne.n	80091ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e001      	b.n	80091b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091b2:	f7fe ffbb 	bl	800812c <vPortExitCritical>

	return xReturn;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	@ 0x38
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10b      	bne.n	80091ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	623b      	str	r3, [r7, #32]
}
 80091e6:	bf00      	nop
 80091e8:	bf00      	nop
 80091ea:	e7fd      	b.n	80091e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <xTaskCreateStatic+0x4a>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	61fb      	str	r3, [r7, #28]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800920a:	23a0      	movs	r3, #160	@ 0xa0
 800920c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2ba0      	cmp	r3, #160	@ 0xa0
 8009212:	d00b      	beq.n	800922c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	61bb      	str	r3, [r7, #24]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800922c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01e      	beq.n	8009272 <xTaskCreateStatic+0xb2>
 8009234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01b      	beq.n	8009272 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	2202      	movs	r2, #2
 8009248:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800924c:	2300      	movs	r3, #0
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f851 	bl	800930c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800926a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800926c:	f000 f8ee 	bl	800944c <prvAddNewTaskToReadyList>
 8009270:	e001      	b.n	8009276 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009276:	697b      	ldr	r3, [r7, #20]
	}
 8009278:	4618      	mov	r0, r3
 800927a:	3728      	adds	r7, #40	@ 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08c      	sub	sp, #48	@ 0x30
 8009284:	af04      	add	r7, sp, #16
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe fb47 	bl	8007928 <pvPortMalloc>
 800929a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00e      	beq.n	80092c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092a2:	20a0      	movs	r0, #160	@ 0xa0
 80092a4:	f7fe fb40 	bl	8007928 <pvPortMalloc>
 80092a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80092b6:	e005      	b.n	80092c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092b8:	6978      	ldr	r0, [r7, #20]
 80092ba:	f7fe fc03 	bl	8007ac4 <vPortFree>
 80092be:	e001      	b.n	80092c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f80f 	bl	800930c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	f000 f8ac 	bl	800944c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092f4:	2301      	movs	r3, #1
 80092f6:	61bb      	str	r3, [r7, #24]
 80092f8:	e002      	b.n	8009300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009300:	69bb      	ldr	r3, [r7, #24]
	}
 8009302:	4618      	mov	r0, r3
 8009304:	3720      	adds	r7, #32
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009324:	440b      	add	r3, r1
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	f023 0307 	bic.w	r3, r3, #7
 8009332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	617b      	str	r3, [r7, #20]
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	e7fd      	b.n	8009352 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01f      	beq.n	800939c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	e012      	b.n	8009388 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	7819      	ldrb	r1, [r3, #0]
 800936a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	4413      	add	r3, r2
 8009370:	3334      	adds	r3, #52	@ 0x34
 8009372:	460a      	mov	r2, r1
 8009374:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4413      	add	r3, r2
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d006      	beq.n	8009390 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	3301      	adds	r3, #1
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d9e9      	bls.n	8009362 <prvInitialiseNewTask+0x56>
 800938e:	e000      	b.n	8009392 <prvInitialiseNewTask+0x86>
			{
				break;
 8009390:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800939a:	e003      	b.n	80093a4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	2b06      	cmp	r3, #6
 80093a8:	d901      	bls.n	80093ae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093aa:	2306      	movs	r3, #6
 80093ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2200      	movs	r2, #0
 80093be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	3304      	adds	r3, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fcbd 	bl	8007d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	3318      	adds	r3, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fcb8 	bl	8007d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	f1c3 0207 	rsb	r2, r3, #7
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	334c      	adds	r3, #76	@ 0x4c
 80093fe:	224c      	movs	r2, #76	@ 0x4c
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f00b f9f9 	bl	80147fa <memset>
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	4a0d      	ldr	r2, [pc, #52]	@ (8009440 <prvInitialiseNewTask+0x134>)
 800940c:	651a      	str	r2, [r3, #80]	@ 0x50
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	4a0c      	ldr	r2, [pc, #48]	@ (8009444 <prvInitialiseNewTask+0x138>)
 8009412:	655a      	str	r2, [r3, #84]	@ 0x54
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	4a0c      	ldr	r2, [pc, #48]	@ (8009448 <prvInitialiseNewTask+0x13c>)
 8009418:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	68f9      	ldr	r1, [r7, #12]
 800941e:	69b8      	ldr	r0, [r7, #24]
 8009420:	f7fe fd24 	bl	8007e6c <pxPortInitialiseStack>
 8009424:	4602      	mov	r2, r0
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009436:	bf00      	nop
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	2400f9a0 	.word	0x2400f9a0
 8009444:	2400fa08 	.word	0x2400fa08
 8009448:	2400fa70 	.word	0x2400fa70

0800944c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009454:	f7fe fe38 	bl	80080c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009458:	4b2a      	ldr	r3, [pc, #168]	@ (8009504 <prvAddNewTaskToReadyList+0xb8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	4a29      	ldr	r2, [pc, #164]	@ (8009504 <prvAddNewTaskToReadyList+0xb8>)
 8009460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009462:	4b29      	ldr	r3, [pc, #164]	@ (8009508 <prvAddNewTaskToReadyList+0xbc>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d109      	bne.n	800947e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800946a:	4a27      	ldr	r2, [pc, #156]	@ (8009508 <prvAddNewTaskToReadyList+0xbc>)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009470:	4b24      	ldr	r3, [pc, #144]	@ (8009504 <prvAddNewTaskToReadyList+0xb8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d110      	bne.n	800949a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009478:	f000 fc06 	bl	8009c88 <prvInitialiseTaskLists>
 800947c:	e00d      	b.n	800949a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800947e:	4b23      	ldr	r3, [pc, #140]	@ (800950c <prvAddNewTaskToReadyList+0xc0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009486:	4b20      	ldr	r3, [pc, #128]	@ (8009508 <prvAddNewTaskToReadyList+0xbc>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	429a      	cmp	r2, r3
 8009492:	d802      	bhi.n	800949a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009494:	4a1c      	ldr	r2, [pc, #112]	@ (8009508 <prvAddNewTaskToReadyList+0xbc>)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800949a:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <prvAddNewTaskToReadyList+0xc4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009510 <prvAddNewTaskToReadyList+0xc4>)
 80094a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	2201      	movs	r2, #1
 80094aa:	409a      	lsls	r2, r3
 80094ac:	4b19      	ldr	r3, [pc, #100]	@ (8009514 <prvAddNewTaskToReadyList+0xc8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	4a18      	ldr	r2, [pc, #96]	@ (8009514 <prvAddNewTaskToReadyList+0xc8>)
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4a15      	ldr	r2, [pc, #84]	@ (8009518 <prvAddNewTaskToReadyList+0xcc>)
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe fc46 	bl	8007d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094d2:	f7fe fe2b 	bl	800812c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <prvAddNewTaskToReadyList+0xc0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00e      	beq.n	80094fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094de:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <prvAddNewTaskToReadyList+0xbc>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d207      	bcs.n	80094fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ec:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <prvAddNewTaskToReadyList+0xd0>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	24008d40 	.word	0x24008d40
 8009508:	24008c40 	.word	0x24008c40
 800950c:	24008d4c 	.word	0x24008d4c
 8009510:	24008d5c 	.word	0x24008d5c
 8009514:	24008d48 	.word	0x24008d48
 8009518:	24008c44 	.word	0x24008c44
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d018      	beq.n	8009564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <vTaskDelay+0x64>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <vTaskDelay+0x32>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	60bb      	str	r3, [r7, #8]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009552:	f000 f885 	bl	8009660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fe19 	bl	800a190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800955e:	f000 f88d 	bl	800967c <xTaskResumeAll>
 8009562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d107      	bne.n	800957a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800956a:	4b07      	ldr	r3, [pc, #28]	@ (8009588 <vTaskDelay+0x68>)
 800956c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	24008d68 	.word	0x24008d68
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08a      	sub	sp, #40	@ 0x28
 8009590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800959a:	463a      	mov	r2, r7
 800959c:	1d39      	adds	r1, r7, #4
 800959e:	f107 0308 	add.w	r3, r7, #8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7f7 f948 	bl	8000838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	9202      	str	r2, [sp, #8]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	460a      	mov	r2, r1
 80095ba:	4921      	ldr	r1, [pc, #132]	@ (8009640 <vTaskStartScheduler+0xb4>)
 80095bc:	4821      	ldr	r0, [pc, #132]	@ (8009644 <vTaskStartScheduler+0xb8>)
 80095be:	f7ff fdff 	bl	80091c0 <xTaskCreateStatic>
 80095c2:	4603      	mov	r3, r0
 80095c4:	4a20      	ldr	r2, [pc, #128]	@ (8009648 <vTaskStartScheduler+0xbc>)
 80095c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009648 <vTaskStartScheduler+0xbc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095d0:	2301      	movs	r3, #1
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e001      	b.n	80095da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d11b      	bne.n	8009618 <vTaskStartScheduler+0x8c>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	613b      	str	r3, [r7, #16]
}
 80095f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095f4:	4b15      	ldr	r3, [pc, #84]	@ (800964c <vTaskStartScheduler+0xc0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	334c      	adds	r3, #76	@ 0x4c
 80095fa:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <vTaskStartScheduler+0xc4>)
 80095fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095fe:	4b15      	ldr	r3, [pc, #84]	@ (8009654 <vTaskStartScheduler+0xc8>)
 8009600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009606:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <vTaskStartScheduler+0xcc>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800960c:	4b13      	ldr	r3, [pc, #76]	@ (800965c <vTaskStartScheduler+0xd0>)
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009612:	f7fe fcb5 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009616:	e00f      	b.n	8009638 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800961e:	d10b      	bne.n	8009638 <vTaskStartScheduler+0xac>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <vTaskStartScheduler+0xa8>
}
 8009638:	bf00      	nop
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	080156d8 	.word	0x080156d8
 8009644:	08009c59 	.word	0x08009c59
 8009648:	24008d64 	.word	0x24008d64
 800964c:	24008c40 	.word	0x24008c40
 8009650:	2400005c 	.word	0x2400005c
 8009654:	24008d60 	.word	0x24008d60
 8009658:	24008d4c 	.word	0x24008d4c
 800965c:	24008d44 	.word	0x24008d44

08009660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009664:	4b04      	ldr	r3, [pc, #16]	@ (8009678 <vTaskSuspendAll+0x18>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	4a03      	ldr	r2, [pc, #12]	@ (8009678 <vTaskSuspendAll+0x18>)
 800966c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800966e:	bf00      	nop
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	24008d68 	.word	0x24008d68

0800967c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009686:	2300      	movs	r3, #0
 8009688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800968a:	4b42      	ldr	r3, [pc, #264]	@ (8009794 <xTaskResumeAll+0x118>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10b      	bne.n	80096aa <xTaskResumeAll+0x2e>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	603b      	str	r3, [r7, #0]
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	e7fd      	b.n	80096a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096aa:	f7fe fd0d 	bl	80080c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096ae:	4b39      	ldr	r3, [pc, #228]	@ (8009794 <xTaskResumeAll+0x118>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	4a37      	ldr	r2, [pc, #220]	@ (8009794 <xTaskResumeAll+0x118>)
 80096b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096b8:	4b36      	ldr	r3, [pc, #216]	@ (8009794 <xTaskResumeAll+0x118>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d161      	bne.n	8009784 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096c0:	4b35      	ldr	r3, [pc, #212]	@ (8009798 <xTaskResumeAll+0x11c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05d      	beq.n	8009784 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096c8:	e02e      	b.n	8009728 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ca:	4b34      	ldr	r3, [pc, #208]	@ (800979c <xTaskResumeAll+0x120>)
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3318      	adds	r3, #24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fb9e 	bl	8007e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fb99 	bl	8007e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	2201      	movs	r2, #1
 80096ec:	409a      	lsls	r2, r3
 80096ee:	4b2c      	ldr	r3, [pc, #176]	@ (80097a0 <xTaskResumeAll+0x124>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	4a2a      	ldr	r2, [pc, #168]	@ (80097a0 <xTaskResumeAll+0x124>)
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4a27      	ldr	r2, [pc, #156]	@ (80097a4 <xTaskResumeAll+0x128>)
 8009706:	441a      	add	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4610      	mov	r0, r2
 8009710:	f7fe fb25 	bl	8007d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	4b23      	ldr	r3, [pc, #140]	@ (80097a8 <xTaskResumeAll+0x12c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	429a      	cmp	r2, r3
 8009720:	d302      	bcc.n	8009728 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009722:	4b22      	ldr	r3, [pc, #136]	@ (80097ac <xTaskResumeAll+0x130>)
 8009724:	2201      	movs	r2, #1
 8009726:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009728:	4b1c      	ldr	r3, [pc, #112]	@ (800979c <xTaskResumeAll+0x120>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1cc      	bne.n	80096ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009736:	f000 fb4b 	bl	8009dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800973a:	4b1d      	ldr	r3, [pc, #116]	@ (80097b0 <xTaskResumeAll+0x134>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d010      	beq.n	8009768 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009746:	f000 f859 	bl	80097fc <xTaskIncrementTick>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009750:	4b16      	ldr	r3, [pc, #88]	@ (80097ac <xTaskResumeAll+0x130>)
 8009752:	2201      	movs	r2, #1
 8009754:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3b01      	subs	r3, #1
 800975a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f1      	bne.n	8009746 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009762:	4b13      	ldr	r3, [pc, #76]	@ (80097b0 <xTaskResumeAll+0x134>)
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009768:	4b10      	ldr	r3, [pc, #64]	@ (80097ac <xTaskResumeAll+0x130>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009774:	4b0f      	ldr	r3, [pc, #60]	@ (80097b4 <xTaskResumeAll+0x138>)
 8009776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009784:	f7fe fcd2 	bl	800812c <vPortExitCritical>

	return xAlreadyYielded;
 8009788:	68bb      	ldr	r3, [r7, #8]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	24008d68 	.word	0x24008d68
 8009798:	24008d40 	.word	0x24008d40
 800979c:	24008d00 	.word	0x24008d00
 80097a0:	24008d48 	.word	0x24008d48
 80097a4:	24008c44 	.word	0x24008c44
 80097a8:	24008c40 	.word	0x24008c40
 80097ac:	24008d54 	.word	0x24008d54
 80097b0:	24008d50 	.word	0x24008d50
 80097b4:	e000ed04 	.word	0xe000ed04

080097b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097be:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <xTaskGetTickCount+0x1c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097c4:	687b      	ldr	r3, [r7, #4]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	24008d44 	.word	0x24008d44

080097d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097de:	f7fe fd53 	bl	8008288 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80097e6:	4b04      	ldr	r3, [pc, #16]	@ (80097f8 <xTaskGetTickCountFromISR+0x20>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097ec:	683b      	ldr	r3, [r7, #0]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	24008d44 	.word	0x24008d44

080097fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009806:	4b4f      	ldr	r3, [pc, #316]	@ (8009944 <xTaskIncrementTick+0x148>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f040 808f 	bne.w	800992e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009810:	4b4d      	ldr	r3, [pc, #308]	@ (8009948 <xTaskIncrementTick+0x14c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009818:	4a4b      	ldr	r2, [pc, #300]	@ (8009948 <xTaskIncrementTick+0x14c>)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d121      	bne.n	8009868 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009824:	4b49      	ldr	r3, [pc, #292]	@ (800994c <xTaskIncrementTick+0x150>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00b      	beq.n	8009846 <xTaskIncrementTick+0x4a>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	603b      	str	r3, [r7, #0]
}
 8009840:	bf00      	nop
 8009842:	bf00      	nop
 8009844:	e7fd      	b.n	8009842 <xTaskIncrementTick+0x46>
 8009846:	4b41      	ldr	r3, [pc, #260]	@ (800994c <xTaskIncrementTick+0x150>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	4b40      	ldr	r3, [pc, #256]	@ (8009950 <xTaskIncrementTick+0x154>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a3e      	ldr	r2, [pc, #248]	@ (800994c <xTaskIncrementTick+0x150>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	4a3e      	ldr	r2, [pc, #248]	@ (8009950 <xTaskIncrementTick+0x154>)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	4b3e      	ldr	r3, [pc, #248]	@ (8009954 <xTaskIncrementTick+0x158>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3301      	adds	r3, #1
 8009860:	4a3c      	ldr	r2, [pc, #240]	@ (8009954 <xTaskIncrementTick+0x158>)
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	f000 fab4 	bl	8009dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009868:	4b3b      	ldr	r3, [pc, #236]	@ (8009958 <xTaskIncrementTick+0x15c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	429a      	cmp	r2, r3
 8009870:	d348      	bcc.n	8009904 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009872:	4b36      	ldr	r3, [pc, #216]	@ (800994c <xTaskIncrementTick+0x150>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d104      	bne.n	8009886 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987c:	4b36      	ldr	r3, [pc, #216]	@ (8009958 <xTaskIncrementTick+0x15c>)
 800987e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009882:	601a      	str	r2, [r3, #0]
					break;
 8009884:	e03e      	b.n	8009904 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009886:	4b31      	ldr	r3, [pc, #196]	@ (800994c <xTaskIncrementTick+0x150>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	429a      	cmp	r2, r3
 800989c:	d203      	bcs.n	80098a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800989e:	4a2e      	ldr	r2, [pc, #184]	@ (8009958 <xTaskIncrementTick+0x15c>)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098a4:	e02e      	b.n	8009904 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fab4 	bl	8007e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d004      	beq.n	80098c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	3318      	adds	r3, #24
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe faab 	bl	8007e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c6:	2201      	movs	r2, #1
 80098c8:	409a      	lsls	r2, r3
 80098ca:	4b24      	ldr	r3, [pc, #144]	@ (800995c <xTaskIncrementTick+0x160>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	4a22      	ldr	r2, [pc, #136]	@ (800995c <xTaskIncrementTick+0x160>)
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009960 <xTaskIncrementTick+0x164>)
 80098e2:	441a      	add	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f7fe fa37 	bl	8007d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009964 <xTaskIncrementTick+0x168>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d3b9      	bcc.n	8009872 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009902:	e7b6      	b.n	8009872 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009904:	4b17      	ldr	r3, [pc, #92]	@ (8009964 <xTaskIncrementTick+0x168>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800990a:	4915      	ldr	r1, [pc, #84]	@ (8009960 <xTaskIncrementTick+0x164>)
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d901      	bls.n	8009920 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800991c:	2301      	movs	r3, #1
 800991e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009920:	4b11      	ldr	r3, [pc, #68]	@ (8009968 <xTaskIncrementTick+0x16c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	e004      	b.n	8009938 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800992e:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <xTaskIncrementTick+0x170>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	4a0d      	ldr	r2, [pc, #52]	@ (800996c <xTaskIncrementTick+0x170>)
 8009936:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009938:	697b      	ldr	r3, [r7, #20]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	24008d68 	.word	0x24008d68
 8009948:	24008d44 	.word	0x24008d44
 800994c:	24008cf8 	.word	0x24008cf8
 8009950:	24008cfc 	.word	0x24008cfc
 8009954:	24008d58 	.word	0x24008d58
 8009958:	24008d60 	.word	0x24008d60
 800995c:	24008d48 	.word	0x24008d48
 8009960:	24008c44 	.word	0x24008c44
 8009964:	24008c40 	.word	0x24008c40
 8009968:	24008d54 	.word	0x24008d54
 800996c:	24008d50 	.word	0x24008d50

08009970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009976:	4b2a      	ldr	r3, [pc, #168]	@ (8009a20 <vTaskSwitchContext+0xb0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800997e:	4b29      	ldr	r3, [pc, #164]	@ (8009a24 <vTaskSwitchContext+0xb4>)
 8009980:	2201      	movs	r2, #1
 8009982:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009984:	e045      	b.n	8009a12 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009986:	4b27      	ldr	r3, [pc, #156]	@ (8009a24 <vTaskSwitchContext+0xb4>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998c:	4b26      	ldr	r3, [pc, #152]	@ (8009a28 <vTaskSwitchContext+0xb8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	fab3 f383 	clz	r3, r3
 8009998:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	f1c3 031f 	rsb	r3, r3, #31
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	4922      	ldr	r1, [pc, #136]	@ (8009a2c <vTaskSwitchContext+0xbc>)
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	607b      	str	r3, [r7, #4]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <vTaskSwitchContext+0x5a>
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4a14      	ldr	r2, [pc, #80]	@ (8009a2c <vTaskSwitchContext+0xbc>)
 80099da:	4413      	add	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	3308      	adds	r3, #8
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d104      	bne.n	80099fe <vTaskSwitchContext+0x8e>
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a0a      	ldr	r2, [pc, #40]	@ (8009a30 <vTaskSwitchContext+0xc0>)
 8009a06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a08:	4b09      	ldr	r3, [pc, #36]	@ (8009a30 <vTaskSwitchContext+0xc0>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	334c      	adds	r3, #76	@ 0x4c
 8009a0e:	4a09      	ldr	r2, [pc, #36]	@ (8009a34 <vTaskSwitchContext+0xc4>)
 8009a10:	6013      	str	r3, [r2, #0]
}
 8009a12:	bf00      	nop
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	24008d68 	.word	0x24008d68
 8009a24:	24008d54 	.word	0x24008d54
 8009a28:	24008d48 	.word	0x24008d48
 8009a2c:	24008c44 	.word	0x24008c44
 8009a30:	24008c40 	.word	0x24008c40
 8009a34:	2400005c 	.word	0x2400005c

08009a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	60fb      	str	r3, [r7, #12]
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	e7fd      	b.n	8009a5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a60:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <vTaskPlaceOnEventList+0x48>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3318      	adds	r3, #24
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7fe f99c 	bl	8007da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a6e:	2101      	movs	r1, #1
 8009a70:	6838      	ldr	r0, [r7, #0]
 8009a72:	f000 fb8d 	bl	800a190 <prvAddCurrentTaskToDelayedList>
}
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	24008c40 	.word	0x24008c40

08009a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10b      	bne.n	8009ab2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	60fb      	str	r3, [r7, #12]
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	e7fd      	b.n	8009aae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe f9ae 	bl	8007e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009abc:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <xTaskRemoveFromEventList+0xb0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11c      	bne.n	8009afe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe f9a5 	bl	8007e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	409a      	lsls	r2, r3
 8009ad6:	4b18      	ldr	r3, [pc, #96]	@ (8009b38 <xTaskRemoveFromEventList+0xb4>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	4a16      	ldr	r2, [pc, #88]	@ (8009b38 <xTaskRemoveFromEventList+0xb4>)
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4a13      	ldr	r2, [pc, #76]	@ (8009b3c <xTaskRemoveFromEventList+0xb8>)
 8009aee:	441a      	add	r2, r3
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f7fe f931 	bl	8007d5e <vListInsertEnd>
 8009afc:	e005      	b.n	8009b0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3318      	adds	r3, #24
 8009b02:	4619      	mov	r1, r3
 8009b04:	480e      	ldr	r0, [pc, #56]	@ (8009b40 <xTaskRemoveFromEventList+0xbc>)
 8009b06:	f7fe f92a 	bl	8007d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b44 <xTaskRemoveFromEventList+0xc0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d905      	bls.n	8009b24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <xTaskRemoveFromEventList+0xc4>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e001      	b.n	8009b28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b28:	697b      	ldr	r3, [r7, #20]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	24008d68 	.word	0x24008d68
 8009b38:	24008d48 	.word	0x24008d48
 8009b3c:	24008c44 	.word	0x24008c44
 8009b40:	24008d00 	.word	0x24008d00
 8009b44:	24008c40 	.word	0x24008c40
 8009b48:	24008d54 	.word	0x24008d54

08009b4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b54:	4b06      	ldr	r3, [pc, #24]	@ (8009b70 <vTaskInternalSetTimeOutState+0x24>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <vTaskInternalSetTimeOutState+0x28>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	605a      	str	r2, [r3, #4]
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	24008d58 	.word	0x24008d58
 8009b74:	24008d44 	.word	0x24008d44

08009b78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10b      	bne.n	8009ba0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	613b      	str	r3, [r7, #16]
}
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	e7fd      	b.n	8009b9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	60fb      	str	r3, [r7, #12]
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	e7fd      	b.n	8009bba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009bbe:	f7fe fa83 	bl	80080c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c38 <xTaskCheckForTimeOut+0xc0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bda:	d102      	bne.n	8009be2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e023      	b.n	8009c2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4b15      	ldr	r3, [pc, #84]	@ (8009c3c <xTaskCheckForTimeOut+0xc4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d007      	beq.n	8009bfe <xTaskCheckForTimeOut+0x86>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d302      	bcc.n	8009bfe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	e015      	b.n	8009c2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d20b      	bcs.n	8009c20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff ff99 	bl	8009b4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
 8009c1e:	e004      	b.n	8009c2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c26:	2301      	movs	r3, #1
 8009c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c2a:	f7fe fa7f 	bl	800812c <vPortExitCritical>

	return xReturn;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	24008d44 	.word	0x24008d44
 8009c3c:	24008d58 	.word	0x24008d58

08009c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c44:	4b03      	ldr	r3, [pc, #12]	@ (8009c54 <vTaskMissedYield+0x14>)
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
}
 8009c4a:	bf00      	nop
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	24008d54 	.word	0x24008d54

08009c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c60:	f000 f852 	bl	8009d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c64:	4b06      	ldr	r3, [pc, #24]	@ (8009c80 <prvIdleTask+0x28>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d9f9      	bls.n	8009c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c6c:	4b05      	ldr	r3, [pc, #20]	@ (8009c84 <prvIdleTask+0x2c>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c7c:	e7f0      	b.n	8009c60 <prvIdleTask+0x8>
 8009c7e:	bf00      	nop
 8009c80:	24008c44 	.word	0x24008c44
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8e:	2300      	movs	r3, #0
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e00c      	b.n	8009cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4a12      	ldr	r2, [pc, #72]	@ (8009ce8 <prvInitialiseTaskLists+0x60>)
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe f82e 	bl	8007d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3301      	adds	r3, #1
 8009cac:	607b      	str	r3, [r7, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b06      	cmp	r3, #6
 8009cb2:	d9ef      	bls.n	8009c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cb4:	480d      	ldr	r0, [pc, #52]	@ (8009cec <prvInitialiseTaskLists+0x64>)
 8009cb6:	f7fe f825 	bl	8007d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cba:	480d      	ldr	r0, [pc, #52]	@ (8009cf0 <prvInitialiseTaskLists+0x68>)
 8009cbc:	f7fe f822 	bl	8007d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cc0:	480c      	ldr	r0, [pc, #48]	@ (8009cf4 <prvInitialiseTaskLists+0x6c>)
 8009cc2:	f7fe f81f 	bl	8007d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cc6:	480c      	ldr	r0, [pc, #48]	@ (8009cf8 <prvInitialiseTaskLists+0x70>)
 8009cc8:	f7fe f81c 	bl	8007d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ccc:	480b      	ldr	r0, [pc, #44]	@ (8009cfc <prvInitialiseTaskLists+0x74>)
 8009cce:	f7fe f819 	bl	8007d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <prvInitialiseTaskLists+0x78>)
 8009cd4:	4a05      	ldr	r2, [pc, #20]	@ (8009cec <prvInitialiseTaskLists+0x64>)
 8009cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009d04 <prvInitialiseTaskLists+0x7c>)
 8009cda:	4a05      	ldr	r2, [pc, #20]	@ (8009cf0 <prvInitialiseTaskLists+0x68>)
 8009cdc:	601a      	str	r2, [r3, #0]
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	24008c44 	.word	0x24008c44
 8009cec:	24008cd0 	.word	0x24008cd0
 8009cf0:	24008ce4 	.word	0x24008ce4
 8009cf4:	24008d00 	.word	0x24008d00
 8009cf8:	24008d14 	.word	0x24008d14
 8009cfc:	24008d2c 	.word	0x24008d2c
 8009d00:	24008cf8 	.word	0x24008cf8
 8009d04:	24008cfc 	.word	0x24008cfc

08009d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d0e:	e019      	b.n	8009d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d10:	f7fe f9da 	bl	80080c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d14:	4b10      	ldr	r3, [pc, #64]	@ (8009d58 <prvCheckTasksWaitingTermination+0x50>)
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe f879 	bl	8007e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d26:	4b0d      	ldr	r3, [pc, #52]	@ (8009d5c <prvCheckTasksWaitingTermination+0x54>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8009d5c <prvCheckTasksWaitingTermination+0x54>)
 8009d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	@ (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4a0a      	ldr	r2, [pc, #40]	@ (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d3a:	f7fe f9f7 	bl	800812c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f810 	bl	8009d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d44:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e1      	bne.n	8009d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	24008d14 	.word	0x24008d14
 8009d5c:	24008d40 	.word	0x24008d40
 8009d60:	24008d28 	.word	0x24008d28

08009d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	334c      	adds	r3, #76	@ 0x4c
 8009d70:	4618      	mov	r0, r3
 8009d72:	f00a fd5b 	bl	801482c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d108      	bne.n	8009d92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fd fe9d 	bl	8007ac4 <vPortFree>
				vPortFree( pxTCB );
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fd fe9a 	bl	8007ac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d90:	e019      	b.n	8009dc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d103      	bne.n	8009da4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fd fe91 	bl	8007ac4 <vPortFree>
	}
 8009da2:	e010      	b.n	8009dc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d00b      	beq.n	8009dc6 <prvDeleteTCB+0x62>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <prvDeleteTCB+0x5e>
	}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009e08 <prvResetNextTaskUnblockTime+0x38>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009de0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <prvResetNextTaskUnblockTime+0x3c>)
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009de8:	e008      	b.n	8009dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b07      	ldr	r3, [pc, #28]	@ (8009e08 <prvResetNextTaskUnblockTime+0x38>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a04      	ldr	r2, [pc, #16]	@ (8009e0c <prvResetNextTaskUnblockTime+0x3c>)
 8009dfa:	6013      	str	r3, [r2, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	24008cf8 	.word	0x24008cf8
 8009e0c:	24008d60 	.word	0x24008d60

08009e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e16:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <xTaskGetSchedulerState+0x34>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	607b      	str	r3, [r7, #4]
 8009e22:	e008      	b.n	8009e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e24:	4b08      	ldr	r3, [pc, #32]	@ (8009e48 <xTaskGetSchedulerState+0x38>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	607b      	str	r3, [r7, #4]
 8009e30:	e001      	b.n	8009e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e32:	2300      	movs	r3, #0
 8009e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e36:	687b      	ldr	r3, [r7, #4]
	}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	24008d4c 	.word	0x24008d4c
 8009e48:	24008d68 	.word	0x24008d68

08009e4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d05e      	beq.n	8009f20 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e66:	4b31      	ldr	r3, [pc, #196]	@ (8009f2c <xTaskPriorityInherit+0xe0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d24e      	bcs.n	8009f0e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	db06      	blt.n	8009e86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e78:	4b2c      	ldr	r3, [pc, #176]	@ (8009f2c <xTaskPriorityInherit+0xe0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7e:	f1c3 0207 	rsb	r2, r3, #7
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6959      	ldr	r1, [r3, #20]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4a26      	ldr	r2, [pc, #152]	@ (8009f30 <xTaskPriorityInherit+0xe4>)
 8009e98:	4413      	add	r3, r2
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	d12f      	bne.n	8009efe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd ffb8 	bl	8007e18 <uxListRemove>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb8:	43da      	mvns	r2, r3
 8009eba:	4b1e      	ldr	r3, [pc, #120]	@ (8009f34 <xTaskPriorityInherit+0xe8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f34 <xTaskPriorityInherit+0xe8>)
 8009ec2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ec4:	4b19      	ldr	r3, [pc, #100]	@ (8009f2c <xTaskPriorityInherit+0xe0>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	409a      	lsls	r2, r3
 8009ed6:	4b17      	ldr	r3, [pc, #92]	@ (8009f34 <xTaskPriorityInherit+0xe8>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	4a15      	ldr	r2, [pc, #84]	@ (8009f34 <xTaskPriorityInherit+0xe8>)
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4a10      	ldr	r2, [pc, #64]	@ (8009f30 <xTaskPriorityInherit+0xe4>)
 8009eee:	441a      	add	r2, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f7fd ff31 	bl	8007d5e <vListInsertEnd>
 8009efc:	e004      	b.n	8009f08 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009efe:	4b0b      	ldr	r3, [pc, #44]	@ (8009f2c <xTaskPriorityInherit+0xe0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e008      	b.n	8009f20 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f12:	4b06      	ldr	r3, [pc, #24]	@ (8009f2c <xTaskPriorityInherit+0xe0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d201      	bcs.n	8009f20 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f20:	68fb      	ldr	r3, [r7, #12]
	}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	24008c40 	.word	0x24008c40
 8009f30:	24008c44 	.word	0x24008c44
 8009f34:	24008d48 	.word	0x24008d48

08009f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d070      	beq.n	800a030 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800a03c <xTaskPriorityDisinherit+0x104>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d00b      	beq.n	8009f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	60fb      	str	r3, [r7, #12]
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60bb      	str	r3, [r7, #8]
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d044      	beq.n	800a030 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d140      	bne.n	800a030 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd ff30 	bl	8007e18 <uxListRemove>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d115      	bne.n	8009fea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc2:	491f      	ldr	r1, [pc, #124]	@ (800a040 <xTaskPriorityDisinherit+0x108>)
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xTaskPriorityDisinherit+0xb2>
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd8:	2201      	movs	r2, #1
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	43da      	mvns	r2, r3
 8009fe0:	4b18      	ldr	r3, [pc, #96]	@ (800a044 <xTaskPriorityDisinherit+0x10c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	4a17      	ldr	r2, [pc, #92]	@ (800a044 <xTaskPriorityDisinherit+0x10c>)
 8009fe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff6:	f1c3 0207 	rsb	r2, r3, #7
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a002:	2201      	movs	r2, #1
 800a004:	409a      	lsls	r2, r3
 800a006:	4b0f      	ldr	r3, [pc, #60]	@ (800a044 <xTaskPriorityDisinherit+0x10c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	4a0d      	ldr	r2, [pc, #52]	@ (800a044 <xTaskPriorityDisinherit+0x10c>)
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4a08      	ldr	r2, [pc, #32]	@ (800a040 <xTaskPriorityDisinherit+0x108>)
 800a01e:	441a      	add	r2, r3
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	3304      	adds	r3, #4
 800a024:	4619      	mov	r1, r3
 800a026:	4610      	mov	r0, r2
 800a028:	f7fd fe99 	bl	8007d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a02c:	2301      	movs	r3, #1
 800a02e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a030:	697b      	ldr	r3, [r7, #20]
	}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	24008c40 	.word	0x24008c40
 800a040:	24008c44 	.word	0x24008c44
 800a044:	24008d48 	.word	0x24008d48

0800a048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a056:	2301      	movs	r3, #1
 800a058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d079      	beq.n	800a154 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10b      	bne.n	800a080 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	60fb      	str	r3, [r7, #12]
}
 800a07a:	bf00      	nop
 800a07c:	bf00      	nop
 800a07e:	e7fd      	b.n	800a07c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	d902      	bls.n	800a090 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	61fb      	str	r3, [r7, #28]
 800a08e:	e002      	b.n	800a096 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a094:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d059      	beq.n	800a154 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d154      	bne.n	800a154 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a15c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10b      	bne.n	800a0cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	60bb      	str	r3, [r7, #8]
}
 800a0c6:	bf00      	nop
 800a0c8:	bf00      	nop
 800a0ca:	e7fd      	b.n	800a0c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db04      	blt.n	800a0ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f1c3 0207 	rsb	r2, r3, #7
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	6959      	ldr	r1, [r3, #20]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4a19      	ldr	r2, [pc, #100]	@ (800a160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0fa:	4413      	add	r3, r2
 800a0fc:	4299      	cmp	r1, r3
 800a0fe:	d129      	bne.n	800a154 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	3304      	adds	r3, #4
 800a104:	4618      	mov	r0, r3
 800a106:	f7fd fe87 	bl	8007e18 <uxListRemove>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a114:	2201      	movs	r2, #1
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43da      	mvns	r2, r3
 800a11c:	4b11      	ldr	r3, [pc, #68]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4013      	ands	r3, r2
 800a122:	4a10      	ldr	r2, [pc, #64]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a124:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12a:	2201      	movs	r2, #1
 800a12c:	409a      	lsls	r2, r3
 800a12e:	4b0d      	ldr	r3, [pc, #52]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4313      	orrs	r3, r2
 800a134:	4a0b      	ldr	r2, [pc, #44]	@ (800a164 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4a06      	ldr	r2, [pc, #24]	@ (800a160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a146:	441a      	add	r2, r3
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f7fd fe05 	bl	8007d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a154:	bf00      	nop
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	24008c40 	.word	0x24008c40
 800a160:	24008c44 	.word	0x24008c44
 800a164:	24008d48 	.word	0x24008d48

0800a168 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a16c:	4b07      	ldr	r3, [pc, #28]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x24>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d004      	beq.n	800a17e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a174:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x24>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a17a:	3201      	adds	r2, #1
 800a17c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a17e:	4b03      	ldr	r3, [pc, #12]	@ (800a18c <pvTaskIncrementMutexHeldCount+0x24>)
 800a180:	681b      	ldr	r3, [r3, #0]
	}
 800a182:	4618      	mov	r0, r3
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	24008c40 	.word	0x24008c40

0800a190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a19a:	4b29      	ldr	r3, [pc, #164]	@ (800a240 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a0:	4b28      	ldr	r3, [pc, #160]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fd fe36 	bl	8007e18 <uxListRemove>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a1b2:	4b24      	ldr	r3, [pc, #144]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a1be:	43da      	mvns	r2, r3
 800a1c0:	4b21      	ldr	r3, [pc, #132]	@ (800a248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	4a20      	ldr	r2, [pc, #128]	@ (800a248 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1d0:	d10a      	bne.n	800a1e8 <prvAddCurrentTaskToDelayedList+0x58>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d007      	beq.n	800a1e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	481a      	ldr	r0, [pc, #104]	@ (800a24c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a1e2:	f7fd fdbc 	bl	8007d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1e6:	e026      	b.n	800a236 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1f0:	4b14      	ldr	r3, [pc, #80]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d209      	bcs.n	800a214 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a200:	4b13      	ldr	r3, [pc, #76]	@ (800a250 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fd fdca 	bl	8007da6 <vListInsert>
}
 800a212:	e010      	b.n	800a236 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a214:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fd fdc0 	bl	8007da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a226:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d202      	bcs.n	800a236 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a230:	4a09      	ldr	r2, [pc, #36]	@ (800a258 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6013      	str	r3, [r2, #0]
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	24008d44 	.word	0x24008d44
 800a244:	24008c40 	.word	0x24008c40
 800a248:	24008d48 	.word	0x24008d48
 800a24c:	24008d2c 	.word	0x24008d2c
 800a250:	24008cfc 	.word	0x24008cfc
 800a254:	24008cf8 	.word	0x24008cf8
 800a258:	24008d60 	.word	0x24008d60

0800a25c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b21a      	sxth	r2, r3
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	0a1b      	lsrs	r3, r3, #8
 800a272:	b29b      	uxth	r3, r3
 800a274:	b21b      	sxth	r3, r3
 800a276:	4313      	orrs	r3, r2
 800a278:	b21b      	sxth	r3, r3
 800a27a:	b29b      	uxth	r3, r3
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	061a      	lsls	r2, r3, #24
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	021b      	lsls	r3, r3, #8
 800a298:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	0e1b      	lsrs	r3, r3, #24
 800a2ac:	4313      	orrs	r3, r2
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a2c4:	4915      	ldr	r1, [pc, #84]	@ (800a31c <etharp_free_entry+0x60>)
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	440b      	add	r3, r1
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d013      	beq.n	800a300 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a2d8:	4910      	ldr	r1, [pc, #64]	@ (800a31c <etharp_free_entry+0x60>)
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	4413      	add	r3, r2
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	440b      	add	r3, r1
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f003 ff3d 	bl	800e168 <pbuf_free>
    arp_table[i].q = NULL;
 800a2ee:	490b      	ldr	r1, [pc, #44]	@ (800a31c <etharp_free_entry+0x60>)
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	440b      	add	r3, r1
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a300:	4906      	ldr	r1, [pc, #24]	@ (800a31c <etharp_free_entry+0x60>)
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	4613      	mov	r3, r2
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	4413      	add	r3, r2
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	440b      	add	r3, r1
 800a30e:	3314      	adds	r3, #20
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	24008d6c 	.word	0x24008d6c

0800a320 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a326:	2300      	movs	r3, #0
 800a328:	607b      	str	r3, [r7, #4]
 800a32a:	e096      	b.n	800a45a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a32c:	494f      	ldr	r1, [pc, #316]	@ (800a46c <etharp_tmr+0x14c>)
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	4413      	add	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	440b      	add	r3, r1
 800a33a:	3314      	adds	r3, #20
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 8086 	beq.w	800a454 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a348:	4948      	ldr	r1, [pc, #288]	@ (800a46c <etharp_tmr+0x14c>)
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4613      	mov	r3, r2
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	4413      	add	r3, r2
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	440b      	add	r3, r1
 800a356:	3312      	adds	r3, #18
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	b298      	uxth	r0, r3
 800a35e:	4943      	ldr	r1, [pc, #268]	@ (800a46c <etharp_tmr+0x14c>)
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	4413      	add	r3, r2
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	440b      	add	r3, r1
 800a36c:	3312      	adds	r3, #18
 800a36e:	4602      	mov	r2, r0
 800a370:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a372:	493e      	ldr	r1, [pc, #248]	@ (800a46c <etharp_tmr+0x14c>)
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4613      	mov	r3, r2
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	4413      	add	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	440b      	add	r3, r1
 800a380:	3312      	adds	r3, #18
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a388:	d215      	bcs.n	800a3b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a38a:	4938      	ldr	r1, [pc, #224]	@ (800a46c <etharp_tmr+0x14c>)
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	4613      	mov	r3, r2
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	4413      	add	r3, r2
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	440b      	add	r3, r1
 800a398:	3314      	adds	r3, #20
 800a39a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10e      	bne.n	800a3be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a3a0:	4932      	ldr	r1, [pc, #200]	@ (800a46c <etharp_tmr+0x14c>)
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	4413      	add	r3, r2
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	440b      	add	r3, r1
 800a3ae:	3312      	adds	r3, #18
 800a3b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d903      	bls.n	800a3be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff ff80 	bl	800a2bc <etharp_free_entry>
 800a3bc:	e04a      	b.n	800a454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a3be:	492b      	ldr	r1, [pc, #172]	@ (800a46c <etharp_tmr+0x14c>)
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	00db      	lsls	r3, r3, #3
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3314      	adds	r3, #20
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d10a      	bne.n	800a3ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a3d4:	4925      	ldr	r1, [pc, #148]	@ (800a46c <etharp_tmr+0x14c>)
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	4413      	add	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	440b      	add	r3, r1
 800a3e2:	3314      	adds	r3, #20
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	e034      	b.n	800a454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a3ea:	4920      	ldr	r1, [pc, #128]	@ (800a46c <etharp_tmr+0x14c>)
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d10a      	bne.n	800a416 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a400:	491a      	ldr	r1, [pc, #104]	@ (800a46c <etharp_tmr+0x14c>)
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	440b      	add	r3, r1
 800a40e:	3314      	adds	r3, #20
 800a410:	2202      	movs	r2, #2
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e01e      	b.n	800a454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a416:	4915      	ldr	r1, [pc, #84]	@ (800a46c <etharp_tmr+0x14c>)
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4613      	mov	r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4413      	add	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	440b      	add	r3, r1
 800a424:	3314      	adds	r3, #20
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d113      	bne.n	800a454 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a42c:	490f      	ldr	r1, [pc, #60]	@ (800a46c <etharp_tmr+0x14c>)
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	3308      	adds	r3, #8
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4a08      	ldr	r2, [pc, #32]	@ (800a46c <etharp_tmr+0x14c>)
 800a44a:	4413      	add	r3, r2
 800a44c:	3304      	adds	r3, #4
 800a44e:	4619      	mov	r1, r3
 800a450:	f000 fe6e 	bl	800b130 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3301      	adds	r3, #1
 800a458:	607b      	str	r3, [r7, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	f77f af65 	ble.w	800a32c <etharp_tmr+0xc>
      }
    }
  }
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	24008d6c 	.word	0x24008d6c

0800a470 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08a      	sub	sp, #40	@ 0x28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	460b      	mov	r3, r1
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a47e:	230a      	movs	r3, #10
 800a480:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a482:	230a      	movs	r3, #10
 800a484:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a486:	230a      	movs	r3, #10
 800a488:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a48e:	230a      	movs	r3, #10
 800a490:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	83bb      	strh	r3, [r7, #28]
 800a496:	2300      	movs	r3, #0
 800a498:	837b      	strh	r3, [r7, #26]
 800a49a:	2300      	movs	r3, #0
 800a49c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a49e:	2300      	movs	r3, #0
 800a4a0:	843b      	strh	r3, [r7, #32]
 800a4a2:	e0ae      	b.n	800a602 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4a8:	49a6      	ldr	r1, [pc, #664]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	440b      	add	r3, r1
 800a4b4:	3314      	adds	r3, #20
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a4ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a4be:	2b0a      	cmp	r3, #10
 800a4c0:	d105      	bne.n	800a4ce <etharp_find_entry+0x5e>
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a4c8:	8c3b      	ldrh	r3, [r7, #32]
 800a4ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a4cc:	e095      	b.n	800a5fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8092 	beq.w	800a5fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d009      	beq.n	800a4f0 <etharp_find_entry+0x80>
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d806      	bhi.n	800a4f0 <etharp_find_entry+0x80>
 800a4e2:	4b99      	ldr	r3, [pc, #612]	@ (800a748 <etharp_find_entry+0x2d8>)
 800a4e4:	f240 1223 	movw	r2, #291	@ 0x123
 800a4e8:	4998      	ldr	r1, [pc, #608]	@ (800a74c <etharp_find_entry+0x2dc>)
 800a4ea:	4899      	ldr	r0, [pc, #612]	@ (800a750 <etharp_find_entry+0x2e0>)
 800a4ec:	f00a f920 	bl	8014730 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d020      	beq.n	800a538 <etharp_find_entry+0xc8>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6819      	ldr	r1, [r3, #0]
 800a4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4fe:	4891      	ldr	r0, [pc, #580]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a500:	4613      	mov	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	4403      	add	r3, r0
 800a50a:	3304      	adds	r3, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4299      	cmp	r1, r3
 800a510:	d112      	bne.n	800a538 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00c      	beq.n	800a532 <etharp_find_entry+0xc2>
 800a518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a51c:	4989      	ldr	r1, [pc, #548]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a51e:	4613      	mov	r3, r2
 800a520:	005b      	lsls	r3, r3, #1
 800a522:	4413      	add	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	440b      	add	r3, r1
 800a528:	3308      	adds	r3, #8
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d102      	bne.n	800a538 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a536:	e100      	b.n	800a73a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d140      	bne.n	800a5c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a53e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a542:	4980      	ldr	r1, [pc, #512]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a544:	4613      	mov	r3, r2
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	4413      	add	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	440b      	add	r3, r1
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a558:	497a      	ldr	r1, [pc, #488]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a55a:	4613      	mov	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	440b      	add	r3, r1
 800a564:	3312      	adds	r3, #18
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	8bba      	ldrh	r2, [r7, #28]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d845      	bhi.n	800a5fa <etharp_find_entry+0x18a>
            old_queue = i;
 800a56e:	8c3b      	ldrh	r3, [r7, #32]
 800a570:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a576:	4973      	ldr	r1, [pc, #460]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a578:	4613      	mov	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	440b      	add	r3, r1
 800a582:	3312      	adds	r3, #18
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	83bb      	strh	r3, [r7, #28]
 800a588:	e037      	b.n	800a5fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a58e:	496d      	ldr	r1, [pc, #436]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a590:	4613      	mov	r3, r2
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	440b      	add	r3, r1
 800a59a:	3312      	adds	r3, #18
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	8b7a      	ldrh	r2, [r7, #26]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d82a      	bhi.n	800a5fa <etharp_find_entry+0x18a>
            old_pending = i;
 800a5a4:	8c3b      	ldrh	r3, [r7, #32]
 800a5a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800a5a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5ac:	4965      	ldr	r1, [pc, #404]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	4413      	add	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3312      	adds	r3, #18
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	837b      	strh	r3, [r7, #26]
 800a5be:	e01c      	b.n	800a5fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d919      	bls.n	800a5fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a5c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5ca:	495e      	ldr	r1, [pc, #376]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	440b      	add	r3, r1
 800a5d6:	3312      	adds	r3, #18
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	8b3a      	ldrh	r2, [r7, #24]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d80c      	bhi.n	800a5fa <etharp_find_entry+0x18a>
            old_stable = i;
 800a5e0:	8c3b      	ldrh	r3, [r7, #32]
 800a5e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800a5e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5e8:	4956      	ldr	r1, [pc, #344]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	440b      	add	r3, r1
 800a5f4:	3312      	adds	r3, #18
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a5fa:	8c3b      	ldrh	r3, [r7, #32]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	843b      	strh	r3, [r7, #32]
 800a602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a606:	2b09      	cmp	r3, #9
 800a608:	f77f af4c 	ble.w	800a4a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d108      	bne.n	800a628 <etharp_find_entry+0x1b8>
 800a616:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a61a:	2b0a      	cmp	r3, #10
 800a61c:	d107      	bne.n	800a62e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a62c:	e085      	b.n	800a73a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a62e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a632:	2b09      	cmp	r3, #9
 800a634:	dc02      	bgt.n	800a63c <etharp_find_entry+0x1cc>
    i = empty;
 800a636:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a638:	843b      	strh	r3, [r7, #32]
 800a63a:	e039      	b.n	800a6b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a63c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a640:	2b09      	cmp	r3, #9
 800a642:	dc14      	bgt.n	800a66e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a646:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a64c:	493d      	ldr	r1, [pc, #244]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a64e:	4613      	mov	r3, r2
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	4413      	add	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	440b      	add	r3, r1
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d018      	beq.n	800a690 <etharp_find_entry+0x220>
 800a65e:	4b3a      	ldr	r3, [pc, #232]	@ (800a748 <etharp_find_entry+0x2d8>)
 800a660:	f240 126d 	movw	r2, #365	@ 0x16d
 800a664:	493b      	ldr	r1, [pc, #236]	@ (800a754 <etharp_find_entry+0x2e4>)
 800a666:	483a      	ldr	r0, [pc, #232]	@ (800a750 <etharp_find_entry+0x2e0>)
 800a668:	f00a f862 	bl	8014730 <iprintf>
 800a66c:	e010      	b.n	800a690 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a66e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800a672:	2b09      	cmp	r3, #9
 800a674:	dc02      	bgt.n	800a67c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a676:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a678:	843b      	strh	r3, [r7, #32]
 800a67a:	e009      	b.n	800a690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a67c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a680:	2b09      	cmp	r3, #9
 800a682:	dc02      	bgt.n	800a68a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a684:	8bfb      	ldrh	r3, [r7, #30]
 800a686:	843b      	strh	r3, [r7, #32]
 800a688:	e002      	b.n	800a690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a68e:	e054      	b.n	800a73a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a690:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a694:	2b09      	cmp	r3, #9
 800a696:	dd06      	ble.n	800a6a6 <etharp_find_entry+0x236>
 800a698:	4b2b      	ldr	r3, [pc, #172]	@ (800a748 <etharp_find_entry+0x2d8>)
 800a69a:	f240 127f 	movw	r2, #383	@ 0x17f
 800a69e:	492e      	ldr	r1, [pc, #184]	@ (800a758 <etharp_find_entry+0x2e8>)
 800a6a0:	482b      	ldr	r0, [pc, #172]	@ (800a750 <etharp_find_entry+0x2e0>)
 800a6a2:	f00a f845 	bl	8014730 <iprintf>
    etharp_free_entry(i);
 800a6a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff fe06 	bl	800a2bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a6b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	dd06      	ble.n	800a6c6 <etharp_find_entry+0x256>
 800a6b8:	4b23      	ldr	r3, [pc, #140]	@ (800a748 <etharp_find_entry+0x2d8>)
 800a6ba:	f240 1283 	movw	r2, #387	@ 0x183
 800a6be:	4926      	ldr	r1, [pc, #152]	@ (800a758 <etharp_find_entry+0x2e8>)
 800a6c0:	4823      	ldr	r0, [pc, #140]	@ (800a750 <etharp_find_entry+0x2e0>)
 800a6c2:	f00a f835 	bl	8014730 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a6c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a6ca:	491e      	ldr	r1, [pc, #120]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	4413      	add	r3, r2
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	440b      	add	r3, r1
 800a6d6:	3314      	adds	r3, #20
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <etharp_find_entry+0x27c>
 800a6de:	4b1a      	ldr	r3, [pc, #104]	@ (800a748 <etharp_find_entry+0x2d8>)
 800a6e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800a6e4:	491d      	ldr	r1, [pc, #116]	@ (800a75c <etharp_find_entry+0x2ec>)
 800a6e6:	481a      	ldr	r0, [pc, #104]	@ (800a750 <etharp_find_entry+0x2e0>)
 800a6e8:	f00a f822 	bl	8014730 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a6f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6819      	ldr	r1, [r3, #0]
 800a6fa:	4812      	ldr	r0, [pc, #72]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	4413      	add	r3, r2
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	4403      	add	r3, r0
 800a706:	3304      	adds	r3, #4
 800a708:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a70a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a70e:	490d      	ldr	r1, [pc, #52]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a710:	4613      	mov	r3, r2
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	4413      	add	r3, r2
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	440b      	add	r3, r1
 800a71a:	3312      	adds	r3, #18
 800a71c:	2200      	movs	r2, #0
 800a71e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a724:	4907      	ldr	r1, [pc, #28]	@ (800a744 <etharp_find_entry+0x2d4>)
 800a726:	4613      	mov	r3, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4413      	add	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	440b      	add	r3, r1
 800a730:	3308      	adds	r3, #8
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3728      	adds	r7, #40	@ 0x28
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	24008d6c 	.word	0x24008d6c
 800a748:	080156e0 	.word	0x080156e0
 800a74c:	08015744 	.word	0x08015744
 800a750:	08015784 	.word	0x08015784
 800a754:	080157ac 	.word	0x080157ac
 800a758:	080157c4 	.word	0x080157c4
 800a75c:	080157d8 	.word	0x080157d8

0800a760 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a774:	2b06      	cmp	r3, #6
 800a776:	d006      	beq.n	800a786 <etharp_update_arp_entry+0x26>
 800a778:	4b48      	ldr	r3, [pc, #288]	@ (800a89c <etharp_update_arp_entry+0x13c>)
 800a77a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800a77e:	4948      	ldr	r1, [pc, #288]	@ (800a8a0 <etharp_update_arp_entry+0x140>)
 800a780:	4848      	ldr	r0, [pc, #288]	@ (800a8a4 <etharp_update_arp_entry+0x144>)
 800a782:	f009 ffd5 	bl	8014730 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d012      	beq.n	800a7b2 <etharp_update_arp_entry+0x52>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00e      	beq.n	800a7b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68f9      	ldr	r1, [r7, #12]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 face 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800a7a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a7ae:	2be0      	cmp	r3, #224	@ 0xe0
 800a7b0:	d102      	bne.n	800a7b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a7b2:	f06f 030f 	mvn.w	r3, #15
 800a7b6:	e06c      	b.n	800a892 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	68b8      	ldr	r0, [r7, #8]
 800a7c0:	f7ff fe56 	bl	800a470 <etharp_find_entry>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a7c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da02      	bge.n	800a7d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a7d0:	8afb      	ldrh	r3, [r7, #22]
 800a7d2:	b25b      	sxtb	r3, r3
 800a7d4:	e05d      	b.n	800a892 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a7d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7da:	4933      	ldr	r1, [pc, #204]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a7dc:	4613      	mov	r3, r2
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	4413      	add	r3, r2
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	440b      	add	r3, r1
 800a7e6:	3314      	adds	r3, #20
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a7ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7f0:	492d      	ldr	r1, [pc, #180]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a806:	4613      	mov	r3, r2
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	4413      	add	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	3308      	adds	r3, #8
 800a810:	4a25      	ldr	r2, [pc, #148]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a812:	4413      	add	r3, r2
 800a814:	3304      	adds	r3, #4
 800a816:	2206      	movs	r2, #6
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f00a f8c1 	bl	80149a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a820:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a824:	4920      	ldr	r1, [pc, #128]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a826:	4613      	mov	r3, r2
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	4413      	add	r3, r2
 800a82c:	00db      	lsls	r3, r3, #3
 800a82e:	440b      	add	r3, r1
 800a830:	3312      	adds	r3, #18
 800a832:	2200      	movs	r2, #0
 800a834:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a83a:	491b      	ldr	r1, [pc, #108]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a83c:	4613      	mov	r3, r2
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	4413      	add	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	440b      	add	r3, r1
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d021      	beq.n	800a890 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a84c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a850:	4915      	ldr	r1, [pc, #84]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a852:	4613      	mov	r3, r2
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	4413      	add	r3, r2
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	440b      	add	r3, r1
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a864:	4910      	ldr	r1, [pc, #64]	@ (800a8a8 <etharp_update_arp_entry+0x148>)
 800a866:	4613      	mov	r3, r2
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4413      	add	r3, r2
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	440b      	add	r3, r1
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800a87a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6939      	ldr	r1, [r7, #16]
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fcf3 	bl	800b270 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a88a:	6938      	ldr	r0, [r7, #16]
 800a88c:	f003 fc6c 	bl	800e168 <pbuf_free>
  }
  return ERR_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	080156e0 	.word	0x080156e0
 800a8a0:	08015804 	.word	0x08015804
 800a8a4:	08015784 	.word	0x08015784
 800a8a8:	24008d6c 	.word	0x24008d6c

0800a8ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e01e      	b.n	800a8f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a8ba:	4913      	ldr	r1, [pc, #76]	@ (800a908 <etharp_cleanup_netif+0x5c>)
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3314      	adds	r3, #20
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00e      	beq.n	800a8f2 <etharp_cleanup_netif+0x46>
 800a8d4:	490c      	ldr	r1, [pc, #48]	@ (800a908 <etharp_cleanup_netif+0x5c>)
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	4413      	add	r3, r2
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	440b      	add	r3, r1
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d102      	bne.n	800a8f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fce5 	bl	800a2bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b09      	cmp	r3, #9
 800a8fc:	dddd      	ble.n	800a8ba <etharp_cleanup_netif+0xe>
    }
  }
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	24008d6c 	.word	0x24008d6c

0800a90c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a90c:	b5b0      	push	{r4, r5, r7, lr}
 800a90e:	b08a      	sub	sp, #40	@ 0x28
 800a910:	af04      	add	r7, sp, #16
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d107      	bne.n	800a92c <etharp_input+0x20>
 800a91c:	4b3d      	ldr	r3, [pc, #244]	@ (800aa14 <etharp_input+0x108>)
 800a91e:	f240 228a 	movw	r2, #650	@ 0x28a
 800a922:	493d      	ldr	r1, [pc, #244]	@ (800aa18 <etharp_input+0x10c>)
 800a924:	483d      	ldr	r0, [pc, #244]	@ (800aa1c <etharp_input+0x110>)
 800a926:	f009 ff03 	bl	8014730 <iprintf>
 800a92a:	e06f      	b.n	800aa0c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a93c:	d10c      	bne.n	800a958 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a942:	2b06      	cmp	r3, #6
 800a944:	d108      	bne.n	800a958 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d104      	bne.n	800a958 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a954:	2b08      	cmp	r3, #8
 800a956:	d003      	beq.n	800a960 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f003 fc05 	bl	800e168 <pbuf_free>
    return;
 800a95e:	e055      	b.n	800aa0c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	330e      	adds	r3, #14
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	3318      	adds	r3, #24
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3304      	adds	r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <etharp_input+0x74>
    for_us = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]
 800a97e:	e009      	b.n	800a994 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f103 0208 	add.w	r2, r3, #8
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <etharp_input+0x98>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e000      	b.n	800a9a6 <etharp_input+0x9a>
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	f107 010c 	add.w	r1, r7, #12
 800a9aa:	6838      	ldr	r0, [r7, #0]
 800a9ac:	f7ff fed8 	bl	800a760 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	88db      	ldrh	r3, [r3, #6]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ba:	d003      	beq.n	800a9c4 <etharp_input+0xb8>
 800a9bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c0:	d01e      	beq.n	800aa00 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a9c2:	e020      	b.n	800aa06 <etharp_input+0xfa>
      if (for_us) {
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01c      	beq.n	800aa04 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a9e4:	2102      	movs	r1, #2
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	f107 010c 	add.w	r1, r7, #12
 800a9ec:	9102      	str	r1, [sp, #8]
 800a9ee:	9201      	str	r2, [sp, #4]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6838      	ldr	r0, [r7, #0]
 800a9fa:	f000 faeb 	bl	800afd4 <etharp_raw>
      break;
 800a9fe:	e001      	b.n	800aa04 <etharp_input+0xf8>
      break;
 800aa00:	bf00      	nop
 800aa02:	e000      	b.n	800aa06 <etharp_input+0xfa>
      break;
 800aa04:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f003 fbae 	bl	800e168 <pbuf_free>
}
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bdb0      	pop	{r4, r5, r7, pc}
 800aa12:	bf00      	nop
 800aa14:	080156e0 	.word	0x080156e0
 800aa18:	0801585c 	.word	0x0801585c
 800aa1c:	08015784 	.word	0x08015784

0800aa20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800aa2e:	79fa      	ldrb	r2, [r7, #7]
 800aa30:	4944      	ldr	r1, [pc, #272]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aa32:	4613      	mov	r3, r2
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	4413      	add	r3, r2
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3314      	adds	r3, #20
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d806      	bhi.n	800aa52 <etharp_output_to_arp_index+0x32>
 800aa44:	4b40      	ldr	r3, [pc, #256]	@ (800ab48 <etharp_output_to_arp_index+0x128>)
 800aa46:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800aa4a:	4940      	ldr	r1, [pc, #256]	@ (800ab4c <etharp_output_to_arp_index+0x12c>)
 800aa4c:	4840      	ldr	r0, [pc, #256]	@ (800ab50 <etharp_output_to_arp_index+0x130>)
 800aa4e:	f009 fe6f 	bl	8014730 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800aa52:	79fa      	ldrb	r2, [r7, #7]
 800aa54:	493b      	ldr	r1, [pc, #236]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aa56:	4613      	mov	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	440b      	add	r3, r1
 800aa60:	3314      	adds	r3, #20
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d153      	bne.n	800ab10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800aa68:	79fa      	ldrb	r2, [r7, #7]
 800aa6a:	4936      	ldr	r1, [pc, #216]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	4413      	add	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	440b      	add	r3, r1
 800aa76:	3312      	adds	r3, #18
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800aa7e:	d919      	bls.n	800aab4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800aa80:	79fa      	ldrb	r2, [r7, #7]
 800aa82:	4613      	mov	r3, r2
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	4413      	add	r3, r2
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	4a2e      	ldr	r2, [pc, #184]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3304      	adds	r3, #4
 800aa90:	4619      	mov	r1, r3
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 fb4c 	bl	800b130 <etharp_request>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d138      	bne.n	800ab10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aa9e:	79fa      	ldrb	r2, [r7, #7]
 800aaa0:	4928      	ldr	r1, [pc, #160]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	4413      	add	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	440b      	add	r3, r1
 800aaac:	3314      	adds	r3, #20
 800aaae:	2203      	movs	r2, #3
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	e02d      	b.n	800ab10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aab4:	79fa      	ldrb	r2, [r7, #7]
 800aab6:	4923      	ldr	r1, [pc, #140]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aab8:	4613      	mov	r3, r2
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	440b      	add	r3, r1
 800aac2:	3312      	adds	r3, #18
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800aaca:	d321      	bcc.n	800ab10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aacc:	79fa      	ldrb	r2, [r7, #7]
 800aace:	4613      	mov	r3, r2
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aad8:	4413      	add	r3, r2
 800aada:	1d19      	adds	r1, r3, #4
 800aadc:	79fa      	ldrb	r2, [r7, #7]
 800aade:	4613      	mov	r3, r2
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4413      	add	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	3308      	adds	r3, #8
 800aae8:	4a16      	ldr	r2, [pc, #88]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	461a      	mov	r2, r3
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 fafb 	bl	800b0ec <etharp_request_dst>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d109      	bne.n	800ab10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aafc:	79fa      	ldrb	r2, [r7, #7]
 800aafe:	4911      	ldr	r1, [pc, #68]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800ab00:	4613      	mov	r3, r2
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	4413      	add	r3, r2
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	440b      	add	r3, r1
 800ab0a:	3314      	adds	r3, #20
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ab16:	79fa      	ldrb	r2, [r7, #7]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	3308      	adds	r3, #8
 800ab22:	4a08      	ldr	r2, [pc, #32]	@ (800ab44 <etharp_output_to_arp_index+0x124>)
 800ab24:	4413      	add	r3, r2
 800ab26:	3304      	adds	r3, #4
 800ab28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab2c:	9200      	str	r2, [sp, #0]
 800ab2e:	460a      	mov	r2, r1
 800ab30:	68b9      	ldr	r1, [r7, #8]
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 fb9c 	bl	800b270 <ethernet_output>
 800ab38:	4603      	mov	r3, r0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	24008d6c 	.word	0x24008d6c
 800ab48:	080156e0 	.word	0x080156e0
 800ab4c:	0801587c 	.word	0x0801587c
 800ab50:	08015784 	.word	0x08015784

0800ab54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08a      	sub	sp, #40	@ 0x28
 800ab58:	af02      	add	r7, sp, #8
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d106      	bne.n	800ab78 <etharp_output+0x24>
 800ab6a:	4b73      	ldr	r3, [pc, #460]	@ (800ad38 <etharp_output+0x1e4>)
 800ab6c:	f240 321e 	movw	r2, #798	@ 0x31e
 800ab70:	4972      	ldr	r1, [pc, #456]	@ (800ad3c <etharp_output+0x1e8>)
 800ab72:	4873      	ldr	r0, [pc, #460]	@ (800ad40 <etharp_output+0x1ec>)
 800ab74:	f009 fddc 	bl	8014730 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <etharp_output+0x38>
 800ab7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ad38 <etharp_output+0x1e4>)
 800ab80:	f240 321f 	movw	r2, #799	@ 0x31f
 800ab84:	496f      	ldr	r1, [pc, #444]	@ (800ad44 <etharp_output+0x1f0>)
 800ab86:	486e      	ldr	r0, [pc, #440]	@ (800ad40 <etharp_output+0x1ec>)
 800ab88:	f009 fdd2 	bl	8014730 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <etharp_output+0x4c>
 800ab92:	4b69      	ldr	r3, [pc, #420]	@ (800ad38 <etharp_output+0x1e4>)
 800ab94:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ab98:	496b      	ldr	r1, [pc, #428]	@ (800ad48 <etharp_output+0x1f4>)
 800ab9a:	4869      	ldr	r0, [pc, #420]	@ (800ad40 <etharp_output+0x1ec>)
 800ab9c:	f009 fdc8 	bl	8014730 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68f9      	ldr	r1, [r7, #12]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 f8c8 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800abb2:	4b66      	ldr	r3, [pc, #408]	@ (800ad4c <etharp_output+0x1f8>)
 800abb4:	61fb      	str	r3, [r7, #28]
 800abb6:	e0af      	b.n	800ad18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abc0:	2be0      	cmp	r3, #224	@ 0xe0
 800abc2:	d118      	bne.n	800abf6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800abc4:	2301      	movs	r3, #1
 800abc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800abc8:	2300      	movs	r3, #0
 800abca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800abcc:	235e      	movs	r3, #94	@ 0x5e
 800abce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3301      	adds	r3, #1
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3302      	adds	r3, #2
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3303      	adds	r3, #3
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800abee:	f107 0310 	add.w	r3, r7, #16
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e090      	b.n	800ad18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3304      	adds	r3, #4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	405a      	eors	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3308      	adds	r3, #8
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d012      	beq.n	800ac34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ac14:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00b      	beq.n	800ac34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	330c      	adds	r3, #12
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	e002      	b.n	800ac34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ac2e:	f06f 0303 	mvn.w	r3, #3
 800ac32:	e07d      	b.n	800ad30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ac34:	4b46      	ldr	r3, [pc, #280]	@ (800ad50 <etharp_output+0x1fc>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4a46      	ldr	r2, [pc, #280]	@ (800ad54 <etharp_output+0x200>)
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	440b      	add	r3, r1
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4413      	add	r3, r2
 800ac46:	3314      	adds	r3, #20
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d925      	bls.n	800ac9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ac4e:	4b40      	ldr	r3, [pc, #256]	@ (800ad50 <etharp_output+0x1fc>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	4619      	mov	r1, r3
 800ac54:	4a3f      	ldr	r2, [pc, #252]	@ (800ad54 <etharp_output+0x200>)
 800ac56:	460b      	mov	r3, r1
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	440b      	add	r3, r1
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	4413      	add	r3, r2
 800ac60:	3308      	adds	r3, #8
 800ac62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d117      	bne.n	800ac9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b38      	ldr	r3, [pc, #224]	@ (800ad50 <etharp_output+0x1fc>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	4618      	mov	r0, r3
 800ac74:	4937      	ldr	r1, [pc, #220]	@ (800ad54 <etharp_output+0x200>)
 800ac76:	4603      	mov	r3, r0
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4403      	add	r3, r0
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	3304      	adds	r3, #4
 800ac82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d108      	bne.n	800ac9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ac88:	4b31      	ldr	r3, [pc, #196]	@ (800ad50 <etharp_output+0x1fc>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff fec5 	bl	800aa20 <etharp_output_to_arp_index>
 800ac96:	4603      	mov	r3, r0
 800ac98:	e04a      	b.n	800ad30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]
 800ac9e:	e031      	b.n	800ad04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800aca0:	7dfa      	ldrb	r2, [r7, #23]
 800aca2:	492c      	ldr	r1, [pc, #176]	@ (800ad54 <etharp_output+0x200>)
 800aca4:	4613      	mov	r3, r2
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	4413      	add	r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	440b      	add	r3, r1
 800acae:	3314      	adds	r3, #20
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d923      	bls.n	800acfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800acb6:	7dfa      	ldrb	r2, [r7, #23]
 800acb8:	4926      	ldr	r1, [pc, #152]	@ (800ad54 <etharp_output+0x200>)
 800acba:	4613      	mov	r3, r2
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	440b      	add	r3, r1
 800acc4:	3308      	adds	r3, #8
 800acc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	429a      	cmp	r2, r3
 800accc:	d117      	bne.n	800acfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	6819      	ldr	r1, [r3, #0]
 800acd2:	7dfa      	ldrb	r2, [r7, #23]
 800acd4:	481f      	ldr	r0, [pc, #124]	@ (800ad54 <etharp_output+0x200>)
 800acd6:	4613      	mov	r3, r2
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4413      	add	r3, r2
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4403      	add	r3, r0
 800ace0:	3304      	adds	r3, #4
 800ace2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ace4:	4299      	cmp	r1, r3
 800ace6:	d10a      	bne.n	800acfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ace8:	4a19      	ldr	r2, [pc, #100]	@ (800ad50 <etharp_output+0x1fc>)
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	461a      	mov	r2, r3
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff fe93 	bl	800aa20 <etharp_output_to_arp_index>
 800acfa:	4603      	mov	r3, r0
 800acfc:	e018      	b.n	800ad30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
 800ad00:	3301      	adds	r3, #1
 800ad02:	75fb      	strb	r3, [r7, #23]
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	d9ca      	bls.n	800aca0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	69b9      	ldr	r1, [r7, #24]
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f822 	bl	800ad58 <etharp_query>
 800ad14:	4603      	mov	r3, r0
 800ad16:	e00b      	b.n	800ad30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ad1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 faa1 	bl	800b270 <ethernet_output>
 800ad2e:	4603      	mov	r3, r0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	080156e0 	.word	0x080156e0
 800ad3c:	0801585c 	.word	0x0801585c
 800ad40:	08015784 	.word	0x08015784
 800ad44:	080158ac 	.word	0x080158ac
 800ad48:	0801584c 	.word	0x0801584c
 800ad4c:	0801843c 	.word	0x0801843c
 800ad50:	24008e5c 	.word	0x24008e5c
 800ad54:	24008d6c 	.word	0x24008d6c

0800ad58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b08c      	sub	sp, #48	@ 0x30
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3326      	adds	r3, #38	@ 0x26
 800ad68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ad6a:	23ff      	movs	r3, #255	@ 0xff
 800ad6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68f9      	ldr	r1, [r7, #12]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ffde 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10c      	bne.n	800ada0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad8e:	2be0      	cmp	r3, #224	@ 0xe0
 800ad90:	d006      	beq.n	800ada0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ada0:	f06f 030f 	mvn.w	r3, #15
 800ada4:	e101      	b.n	800afaa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	2101      	movs	r1, #1
 800adaa:	68b8      	ldr	r0, [r7, #8]
 800adac:	f7ff fb60 	bl	800a470 <etharp_find_entry>
 800adb0:	4603      	mov	r3, r0
 800adb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800adb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	da02      	bge.n	800adc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800adbc:	8a7b      	ldrh	r3, [r7, #18]
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	e0f3      	b.n	800afaa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800adc2:	8a7b      	ldrh	r3, [r7, #18]
 800adc4:	2b7e      	cmp	r3, #126	@ 0x7e
 800adc6:	d906      	bls.n	800add6 <etharp_query+0x7e>
 800adc8:	4b7a      	ldr	r3, [pc, #488]	@ (800afb4 <etharp_query+0x25c>)
 800adca:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800adce:	497a      	ldr	r1, [pc, #488]	@ (800afb8 <etharp_query+0x260>)
 800add0:	487a      	ldr	r0, [pc, #488]	@ (800afbc <etharp_query+0x264>)
 800add2:	f009 fcad 	bl	8014730 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800add6:	8a7b      	ldrh	r3, [r7, #18]
 800add8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800adda:	7c7a      	ldrb	r2, [r7, #17]
 800addc:	4978      	ldr	r1, [pc, #480]	@ (800afc0 <etharp_query+0x268>)
 800adde:	4613      	mov	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4413      	add	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	440b      	add	r3, r1
 800ade8:	3314      	adds	r3, #20
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d115      	bne.n	800ae1c <etharp_query+0xc4>
    is_new_entry = 1;
 800adf0:	2301      	movs	r3, #1
 800adf2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800adf4:	7c7a      	ldrb	r2, [r7, #17]
 800adf6:	4972      	ldr	r1, [pc, #456]	@ (800afc0 <etharp_query+0x268>)
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	440b      	add	r3, r1
 800ae02:	3314      	adds	r3, #20
 800ae04:	2201      	movs	r2, #1
 800ae06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ae08:	7c7a      	ldrb	r2, [r7, #17]
 800ae0a:	496d      	ldr	r1, [pc, #436]	@ (800afc0 <etharp_query+0x268>)
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	4413      	add	r3, r2
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	440b      	add	r3, r1
 800ae16:	3308      	adds	r3, #8
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ae1c:	7c7a      	ldrb	r2, [r7, #17]
 800ae1e:	4968      	ldr	r1, [pc, #416]	@ (800afc0 <etharp_query+0x268>)
 800ae20:	4613      	mov	r3, r2
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	4413      	add	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	440b      	add	r3, r1
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d011      	beq.n	800ae56 <etharp_query+0xfe>
 800ae32:	7c7a      	ldrb	r2, [r7, #17]
 800ae34:	4962      	ldr	r1, [pc, #392]	@ (800afc0 <etharp_query+0x268>)
 800ae36:	4613      	mov	r3, r2
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	4413      	add	r3, r2
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	440b      	add	r3, r1
 800ae40:	3314      	adds	r3, #20
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d806      	bhi.n	800ae56 <etharp_query+0xfe>
 800ae48:	4b5a      	ldr	r3, [pc, #360]	@ (800afb4 <etharp_query+0x25c>)
 800ae4a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ae4e:	495d      	ldr	r1, [pc, #372]	@ (800afc4 <etharp_query+0x26c>)
 800ae50:	485a      	ldr	r0, [pc, #360]	@ (800afbc <etharp_query+0x264>)
 800ae52:	f009 fc6d 	bl	8014730 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d102      	bne.n	800ae62 <etharp_query+0x10a>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10c      	bne.n	800ae7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f963 	bl	800b130 <etharp_request>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d102      	bne.n	800ae7c <etharp_query+0x124>
      return result;
 800ae76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae7a:	e096      	b.n	800afaa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <etharp_query+0x138>
 800ae82:	4b4c      	ldr	r3, [pc, #304]	@ (800afb4 <etharp_query+0x25c>)
 800ae84:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ae88:	494f      	ldr	r1, [pc, #316]	@ (800afc8 <etharp_query+0x270>)
 800ae8a:	484c      	ldr	r0, [pc, #304]	@ (800afbc <etharp_query+0x264>)
 800ae8c:	f009 fc50 	bl	8014730 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ae90:	7c7a      	ldrb	r2, [r7, #17]
 800ae92:	494b      	ldr	r1, [pc, #300]	@ (800afc0 <etharp_query+0x268>)
 800ae94:	4613      	mov	r3, r2
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	4413      	add	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	440b      	add	r3, r1
 800ae9e:	3314      	adds	r3, #20
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d917      	bls.n	800aed6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800aea6:	4a49      	ldr	r2, [pc, #292]	@ (800afcc <etharp_query+0x274>)
 800aea8:	7c7b      	ldrb	r3, [r7, #17]
 800aeaa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800aeac:	7c7a      	ldrb	r2, [r7, #17]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	4413      	add	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	4a41      	ldr	r2, [pc, #260]	@ (800afc0 <etharp_query+0x268>)
 800aeba:	4413      	add	r3, r2
 800aebc:	3304      	adds	r3, #4
 800aebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aec2:	9200      	str	r2, [sp, #0]
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f9d1 	bl	800b270 <ethernet_output>
 800aece:	4603      	mov	r3, r0
 800aed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aed4:	e067      	b.n	800afa6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aed6:	7c7a      	ldrb	r2, [r7, #17]
 800aed8:	4939      	ldr	r1, [pc, #228]	@ (800afc0 <etharp_query+0x268>)
 800aeda:	4613      	mov	r3, r2
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	4413      	add	r3, r2
 800aee0:	00db      	lsls	r3, r3, #3
 800aee2:	440b      	add	r3, r1
 800aee4:	3314      	adds	r3, #20
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d15c      	bne.n	800afa6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800aef4:	e01c      	b.n	800af30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	895a      	ldrh	r2, [r3, #10]
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	891b      	ldrh	r3, [r3, #8]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d10a      	bne.n	800af18 <etharp_query+0x1c0>
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d006      	beq.n	800af18 <etharp_query+0x1c0>
 800af0a:	4b2a      	ldr	r3, [pc, #168]	@ (800afb4 <etharp_query+0x25c>)
 800af0c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800af10:	492f      	ldr	r1, [pc, #188]	@ (800afd0 <etharp_query+0x278>)
 800af12:	482a      	ldr	r0, [pc, #168]	@ (800afbc <etharp_query+0x264>)
 800af14:	f009 fc0c 	bl	8014730 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	7b1b      	ldrb	r3, [r3, #12]
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <etharp_query+0x1d2>
        copy_needed = 1;
 800af24:	2301      	movs	r3, #1
 800af26:	61bb      	str	r3, [r7, #24]
        break;
 800af28:	e005      	b.n	800af36 <etharp_query+0x1de>
      }
      p = p->next;
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1df      	bne.n	800aef6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d007      	beq.n	800af4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800af42:	200e      	movs	r0, #14
 800af44:	f003 fb78 	bl	800e638 <pbuf_clone>
 800af48:	61f8      	str	r0, [r7, #28]
 800af4a:	e004      	b.n	800af56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800af50:	69f8      	ldr	r0, [r7, #28]
 800af52:	f003 f9af 	bl	800e2b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d021      	beq.n	800afa0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800af5c:	7c7a      	ldrb	r2, [r7, #17]
 800af5e:	4918      	ldr	r1, [pc, #96]	@ (800afc0 <etharp_query+0x268>)
 800af60:	4613      	mov	r3, r2
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	4413      	add	r3, r2
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	440b      	add	r3, r1
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00a      	beq.n	800af86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800af70:	7c7a      	ldrb	r2, [r7, #17]
 800af72:	4913      	ldr	r1, [pc, #76]	@ (800afc0 <etharp_query+0x268>)
 800af74:	4613      	mov	r3, r2
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	4413      	add	r3, r2
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	440b      	add	r3, r1
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f003 f8f1 	bl	800e168 <pbuf_free>
      }
      arp_table[i].q = p;
 800af86:	7c7a      	ldrb	r2, [r7, #17]
 800af88:	490d      	ldr	r1, [pc, #52]	@ (800afc0 <etharp_query+0x268>)
 800af8a:	4613      	mov	r3, r2
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	4413      	add	r3, r2
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	440b      	add	r3, r1
 800af94:	69fa      	ldr	r2, [r7, #28]
 800af96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af9e:	e002      	b.n	800afa6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800afa0:	23ff      	movs	r3, #255	@ 0xff
 800afa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800afa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	@ 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	080156e0 	.word	0x080156e0
 800afb8:	080158b8 	.word	0x080158b8
 800afbc:	08015784 	.word	0x08015784
 800afc0:	24008d6c 	.word	0x24008d6c
 800afc4:	080158c8 	.word	0x080158c8
 800afc8:	080158ac 	.word	0x080158ac
 800afcc:	24008e5c 	.word	0x24008e5c
 800afd0:	080158f0 	.word	0x080158f0

0800afd4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	@ 0x28
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d106      	bne.n	800affa <etharp_raw+0x26>
 800afec:	4b3a      	ldr	r3, [pc, #232]	@ (800b0d8 <etharp_raw+0x104>)
 800afee:	f240 4257 	movw	r2, #1111	@ 0x457
 800aff2:	493a      	ldr	r1, [pc, #232]	@ (800b0dc <etharp_raw+0x108>)
 800aff4:	483a      	ldr	r0, [pc, #232]	@ (800b0e0 <etharp_raw+0x10c>)
 800aff6:	f009 fb9b 	bl	8014730 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800affa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800affe:	211c      	movs	r1, #28
 800b000:	200e      	movs	r0, #14
 800b002:	f002 fdcd 	bl	800dba0 <pbuf_alloc>
 800b006:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b012:	e05d      	b.n	800b0d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	895b      	ldrh	r3, [r3, #10]
 800b018:	2b1b      	cmp	r3, #27
 800b01a:	d806      	bhi.n	800b02a <etharp_raw+0x56>
 800b01c:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d8 <etharp_raw+0x104>)
 800b01e:	f240 4262 	movw	r2, #1122	@ 0x462
 800b022:	4930      	ldr	r1, [pc, #192]	@ (800b0e4 <etharp_raw+0x110>)
 800b024:	482e      	ldr	r0, [pc, #184]	@ (800b0e0 <etharp_raw+0x10c>)
 800b026:	f009 fb83 	bl	8014730 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b030:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff f912 	bl	800a25c <lwip_htons>
 800b038:	4603      	mov	r3, r0
 800b03a:	461a      	mov	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b046:	2b06      	cmp	r3, #6
 800b048:	d006      	beq.n	800b058 <etharp_raw+0x84>
 800b04a:	4b23      	ldr	r3, [pc, #140]	@ (800b0d8 <etharp_raw+0x104>)
 800b04c:	f240 4269 	movw	r2, #1129	@ 0x469
 800b050:	4925      	ldr	r1, [pc, #148]	@ (800b0e8 <etharp_raw+0x114>)
 800b052:	4823      	ldr	r0, [pc, #140]	@ (800b0e0 <etharp_raw+0x10c>)
 800b054:	f009 fb6c 	bl	8014730 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	3308      	adds	r3, #8
 800b05c:	2206      	movs	r2, #6
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	4618      	mov	r0, r3
 800b062:	f009 fc9e 	bl	80149a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	3312      	adds	r3, #18
 800b06a:	2206      	movs	r2, #6
 800b06c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b06e:	4618      	mov	r0, r3
 800b070:	f009 fc97 	bl	80149a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	330e      	adds	r3, #14
 800b078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3318      	adds	r3, #24
 800b082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b084:	6812      	ldr	r2, [r2, #0]
 800b086:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2200      	movs	r2, #0
 800b09a:	f042 0208 	orr.w	r2, r2, #8
 800b09e:	709a      	strb	r2, [r3, #2]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b0b0:	f640 0306 	movw	r3, #2054	@ 0x806
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	69b9      	ldr	r1, [r7, #24]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f8d7 	bl	800b270 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b0c2:	69b8      	ldr	r0, [r7, #24]
 800b0c4:	f003 f850 	bl	800e168 <pbuf_free>
  p = NULL;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b0cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3720      	adds	r7, #32
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	080156e0 	.word	0x080156e0
 800b0dc:	0801585c 	.word	0x0801585c
 800b0e0:	08015784 	.word	0x08015784
 800b0e4:	0801590c 	.word	0x0801590c
 800b0e8:	08015940 	.word	0x08015940

0800b0ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b108:	2201      	movs	r2, #1
 800b10a:	9203      	str	r2, [sp, #12]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	9202      	str	r2, [sp, #8]
 800b110:	4a06      	ldr	r2, [pc, #24]	@ (800b12c <etharp_request_dst+0x40>)
 800b112:	9201      	str	r2, [sp, #4]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	4603      	mov	r3, r0
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff ff5a 	bl	800afd4 <etharp_raw>
 800b120:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	08018444 	.word	0x08018444

0800b130 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b13a:	4a05      	ldr	r2, [pc, #20]	@ (800b150 <etharp_request+0x20>)
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ffd4 	bl	800b0ec <etharp_request_dst>
 800b144:	4603      	mov	r3, r0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	0801843c 	.word	0x0801843c

0800b154 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800b15e:	230e      	movs	r3, #14
 800b160:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	895b      	ldrh	r3, [r3, #10]
 800b166:	2b0e      	cmp	r3, #14
 800b168:	d96e      	bls.n	800b248 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	7bdb      	ldrb	r3, [r3, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b178:	3301      	adds	r3, #1
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	7b1a      	ldrb	r2, [r3, #12]
 800b18a:	7b5b      	ldrb	r3, [r3, #13]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	4313      	orrs	r3, r2
 800b190:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d023      	beq.n	800b1e6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d10f      	bne.n	800b1c6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d11b      	bne.n	800b1e6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b1b2:	2b5e      	cmp	r3, #94	@ 0x5e
 800b1b4:	d117      	bne.n	800b1e6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	7b5b      	ldrb	r3, [r3, #13]
 800b1ba:	f043 0310 	orr.w	r3, r3, #16
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	735a      	strb	r2, [r3, #13]
 800b1c4:	e00f      	b.n	800b1e6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	4928      	ldr	r1, [pc, #160]	@ (800b26c <ethernet_input+0x118>)
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f009 fb04 	bl	80147da <memcmp>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7b5b      	ldrb	r3, [r3, #13]
 800b1dc:	f043 0308 	orr.w	r3, r3, #8
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b1e6:	89fb      	ldrh	r3, [r7, #14]
 800b1e8:	2b08      	cmp	r3, #8
 800b1ea:	d003      	beq.n	800b1f4 <ethernet_input+0xa0>
 800b1ec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b1f0:	d014      	beq.n	800b21c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b1f2:	e032      	b.n	800b25a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1fa:	f003 0308 	and.w	r3, r3, #8
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d024      	beq.n	800b24c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b202:	8afb      	ldrh	r3, [r7, #22]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f002 ff28 	bl	800e05c <pbuf_remove_header>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d11e      	bne.n	800b250 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fb95 	bl	800b944 <ip4_input>
      break;
 800b21a:	e013      	b.n	800b244 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b222:	f003 0308 	and.w	r3, r3, #8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d014      	beq.n	800b254 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b22a:	8afb      	ldrh	r3, [r7, #22]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f002 ff14 	bl	800e05c <pbuf_remove_header>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10e      	bne.n	800b258 <ethernet_input+0x104>
        etharp_input(p, netif);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff fb65 	bl	800a90c <etharp_input>
      break;
 800b242:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	e00c      	b.n	800b262 <ethernet_input+0x10e>
    goto free_and_return;
 800b248:	bf00      	nop
 800b24a:	e006      	b.n	800b25a <ethernet_input+0x106>
        goto free_and_return;
 800b24c:	bf00      	nop
 800b24e:	e004      	b.n	800b25a <ethernet_input+0x106>
        goto free_and_return;
 800b250:	bf00      	nop
 800b252:	e002      	b.n	800b25a <ethernet_input+0x106>
        goto free_and_return;
 800b254:	bf00      	nop
 800b256:	e000      	b.n	800b25a <ethernet_input+0x106>
        goto free_and_return;
 800b258:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f002 ff84 	bl	800e168 <pbuf_free>
  return ERR_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	0801843c 	.word	0x0801843c

0800b270 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b27e:	8c3b      	ldrh	r3, [r7, #32]
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe ffeb 	bl	800a25c <lwip_htons>
 800b286:	4603      	mov	r3, r0
 800b288:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b28a:	210e      	movs	r1, #14
 800b28c:	68b8      	ldr	r0, [r7, #8]
 800b28e:	f002 fed5 	bl	800e03c <pbuf_add_header>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d125      	bne.n	800b2e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	8afa      	ldrh	r2, [r7, #22]
 800b2a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2206      	movs	r2, #6
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f009 fb79 	bl	80149a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3306      	adds	r3, #6
 800b2b4:	2206      	movs	r2, #6
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f009 fb72 	bl	80149a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b2c4:	2b06      	cmp	r3, #6
 800b2c6:	d006      	beq.n	800b2d6 <ethernet_output+0x66>
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f4 <ethernet_output+0x84>)
 800b2ca:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800b2ce:	490a      	ldr	r1, [pc, #40]	@ (800b2f8 <ethernet_output+0x88>)
 800b2d0:	480a      	ldr	r0, [pc, #40]	@ (800b2fc <ethernet_output+0x8c>)
 800b2d2:	f009 fa2d 	bl	8014730 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	4798      	blx	r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	e002      	b.n	800b2ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800b2e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b2e6:	f06f 0301 	mvn.w	r3, #1
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	08015984 	.word	0x08015984
 800b2f8:	080159e8 	.word	0x080159e8
 800b2fc:	08015a1c 	.word	0x08015a1c

0800b300 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	@ 0x38
 800b304:	af04      	add	r7, sp, #16
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b30a:	4b87      	ldr	r3, [pc, #540]	@ (800b528 <icmp_input+0x228>)
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 030f 	and.w	r3, r3, #15
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b320:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b322:	2b13      	cmp	r3, #19
 800b324:	f240 80e8 	bls.w	800b4f8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	f240 80e5 	bls.w	800b4fc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b33c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 80d2 	beq.w	800b4ea <icmp_input+0x1ea>
 800b346:	2b08      	cmp	r3, #8
 800b348:	f040 80d2 	bne.w	800b4f0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b34c:	4b77      	ldr	r3, [pc, #476]	@ (800b52c <icmp_input+0x22c>)
 800b34e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b350:	4b75      	ldr	r3, [pc, #468]	@ (800b528 <icmp_input+0x228>)
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b358:	2be0      	cmp	r3, #224	@ 0xe0
 800b35a:	f000 80d6 	beq.w	800b50a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b35e:	4b72      	ldr	r3, [pc, #456]	@ (800b528 <icmp_input+0x228>)
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	4a71      	ldr	r2, [pc, #452]	@ (800b528 <icmp_input+0x228>)
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	4611      	mov	r1, r2
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fce7 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 80cc 	bne.w	800b50e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	891b      	ldrh	r3, [r3, #8]
 800b37a:	2b07      	cmp	r3, #7
 800b37c:	f240 80c0 	bls.w	800b500 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f9e0 	bl	800b746 <inet_chksum_pbuf>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f002 feeb 	bl	800e168 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800b392:	e0c5      	b.n	800b520 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b396:	330e      	adds	r3, #14
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f002 fe4e 	bl	800e03c <pbuf_add_header>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d04b      	beq.n	800b43e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	891a      	ldrh	r2, [r3, #8]
 800b3aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3ac:	4413      	add	r3, r2
 800b3ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	891b      	ldrh	r3, [r3, #8]
 800b3b4:	8b7a      	ldrh	r2, [r7, #26]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	f0c0 80ab 	bcc.w	800b512 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b3bc:	8b7b      	ldrh	r3, [r7, #26]
 800b3be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	200e      	movs	r0, #14
 800b3c6:	f002 fbeb 	bl	800dba0 <pbuf_alloc>
 800b3ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80a1 	beq.w	800b516 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	895b      	ldrh	r3, [r3, #10]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3dc:	3308      	adds	r3, #8
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d203      	bcs.n	800b3ea <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b3e2:	6978      	ldr	r0, [r7, #20]
 800b3e4:	f002 fec0 	bl	800e168 <pbuf_free>
          goto icmperr;
 800b3e8:	e096      	b.n	800b518 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b3f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f009 fad5 	bl	80149a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b3f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6978      	ldr	r0, [r7, #20]
 800b3fe:	f002 fe2d 	bl	800e05c <pbuf_remove_header>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d009      	beq.n	800b41c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b408:	4b49      	ldr	r3, [pc, #292]	@ (800b530 <icmp_input+0x230>)
 800b40a:	22b6      	movs	r2, #182	@ 0xb6
 800b40c:	4949      	ldr	r1, [pc, #292]	@ (800b534 <icmp_input+0x234>)
 800b40e:	484a      	ldr	r0, [pc, #296]	@ (800b538 <icmp_input+0x238>)
 800b410:	f009 f98e 	bl	8014730 <iprintf>
          pbuf_free(r);
 800b414:	6978      	ldr	r0, [r7, #20]
 800b416:	f002 fea7 	bl	800e168 <pbuf_free>
          goto icmperr;
 800b41a:	e07d      	b.n	800b518 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	6978      	ldr	r0, [r7, #20]
 800b420:	f002 ffc6 	bl	800e3b0 <pbuf_copy>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b42a:	6978      	ldr	r0, [r7, #20]
 800b42c:	f002 fe9c 	bl	800e168 <pbuf_free>
          goto icmperr;
 800b430:	e072      	b.n	800b518 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f002 fe98 	bl	800e168 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	607b      	str	r3, [r7, #4]
 800b43c:	e00f      	b.n	800b45e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b43e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b440:	330e      	adds	r3, #14
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f002 fe09 	bl	800e05c <pbuf_remove_header>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d006      	beq.n	800b45e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b450:	4b37      	ldr	r3, [pc, #220]	@ (800b530 <icmp_input+0x230>)
 800b452:	22c7      	movs	r2, #199	@ 0xc7
 800b454:	4939      	ldr	r1, [pc, #228]	@ (800b53c <icmp_input+0x23c>)
 800b456:	4838      	ldr	r0, [pc, #224]	@ (800b538 <icmp_input+0x238>)
 800b458:	f009 f96a 	bl	8014730 <iprintf>
          goto icmperr;
 800b45c:	e05c      	b.n	800b518 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b464:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f002 fde7 	bl	800e03c <pbuf_add_header>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d13c      	bne.n	800b4ee <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b482:	4b29      	ldr	r3, [pc, #164]	@ (800b528 <icmp_input+0x228>)
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	885b      	ldrh	r3, [r3, #2]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d907      	bls.n	800b4ae <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	3309      	adds	r3, #9
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	805a      	strh	r2, [r3, #2]
 800b4ac:	e006      	b.n	800b4bc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	885b      	ldrh	r3, [r3, #2]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	22ff      	movs	r2, #255	@ 0xff
 800b4c0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	729a      	strb	r2, [r3, #10]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	23ff      	movs	r3, #255	@ 0xff
 800b4da:	2200      	movs	r2, #0
 800b4dc:	69f9      	ldr	r1, [r7, #28]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fb54 	bl	800bb8c <ip4_output_if>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b4e8:	e001      	b.n	800b4ee <icmp_input+0x1ee>
      break;
 800b4ea:	bf00      	nop
 800b4ec:	e000      	b.n	800b4f0 <icmp_input+0x1f0>
      break;
 800b4ee:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f002 fe39 	bl	800e168 <pbuf_free>
  return;
 800b4f6:	e013      	b.n	800b520 <icmp_input+0x220>
    goto lenerr;
 800b4f8:	bf00      	nop
 800b4fa:	e002      	b.n	800b502 <icmp_input+0x202>
    goto lenerr;
 800b4fc:	bf00      	nop
 800b4fe:	e000      	b.n	800b502 <icmp_input+0x202>
        goto lenerr;
 800b500:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f002 fe30 	bl	800e168 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b508:	e00a      	b.n	800b520 <icmp_input+0x220>
        goto icmperr;
 800b50a:	bf00      	nop
 800b50c:	e004      	b.n	800b518 <icmp_input+0x218>
        goto icmperr;
 800b50e:	bf00      	nop
 800b510:	e002      	b.n	800b518 <icmp_input+0x218>
          goto icmperr;
 800b512:	bf00      	nop
 800b514:	e000      	b.n	800b518 <icmp_input+0x218>
          goto icmperr;
 800b516:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f002 fe25 	bl	800e168 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b51e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b520:	3728      	adds	r7, #40	@ 0x28
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	24008e60 	.word	0x24008e60
 800b52c:	24008e74 	.word	0x24008e74
 800b530:	08015a44 	.word	0x08015a44
 800b534:	08015aa8 	.word	0x08015aa8
 800b538:	08015ae0 	.word	0x08015ae0
 800b53c:	08015b08 	.word	0x08015b08

0800b540 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	461a      	mov	r2, r3
 800b550:	2103      	movs	r1, #3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f814 	bl	800b580 <icmp_send_response>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	461a      	mov	r2, r3
 800b570:	210b      	movs	r1, #11
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f804 	bl	800b580 <icmp_send_response>
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08c      	sub	sp, #48	@ 0x30
 800b584:	af04      	add	r7, sp, #16
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
 800b58c:	4613      	mov	r3, r2
 800b58e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b590:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b594:	2124      	movs	r1, #36	@ 0x24
 800b596:	2022      	movs	r0, #34	@ 0x22
 800b598:	f002 fb02 	bl	800dba0 <pbuf_alloc>
 800b59c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d056      	beq.n	800b652 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	895b      	ldrh	r3, [r3, #10]
 800b5a8:	2b23      	cmp	r3, #35	@ 0x23
 800b5aa:	d806      	bhi.n	800b5ba <icmp_send_response+0x3a>
 800b5ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b65c <icmp_send_response+0xdc>)
 800b5ae:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800b5b2:	492b      	ldr	r1, [pc, #172]	@ (800b660 <icmp_send_response+0xe0>)
 800b5b4:	482b      	ldr	r0, [pc, #172]	@ (800b664 <icmp_send_response+0xe4>)
 800b5b6:	f009 f8bb 	bl	8014730 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	78fa      	ldrb	r2, [r7, #3]
 800b5ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	78ba      	ldrb	r2, [r7, #2]
 800b5d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	711a      	strb	r2, [r3, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	719a      	strb	r2, [r3, #6]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f103 0008 	add.w	r0, r3, #8
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	221c      	movs	r2, #28
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f009 f9d4 	bl	80149a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	4618      	mov	r0, r3
 800b606:	f000 f903 	bl	800b810 <ip4_route>
 800b60a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d01b      	beq.n	800b64a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2200      	movs	r2, #0
 800b616:	709a      	strb	r2, [r3, #2]
 800b618:	2200      	movs	r2, #0
 800b61a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	895b      	ldrh	r3, [r3, #10]
 800b620:	4619      	mov	r1, r3
 800b622:	6978      	ldr	r0, [r7, #20]
 800b624:	f000 f87d 	bl	800b722 <inet_chksum>
 800b628:	4603      	mov	r3, r0
 800b62a:	461a      	mov	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b630:	f107 020c 	add.w	r2, r7, #12
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	9302      	str	r3, [sp, #8]
 800b638:	2301      	movs	r3, #1
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	2300      	movs	r3, #0
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	23ff      	movs	r3, #255	@ 0xff
 800b642:	2100      	movs	r1, #0
 800b644:	69f8      	ldr	r0, [r7, #28]
 800b646:	f000 faa1 	bl	800bb8c <ip4_output_if>
  }
  pbuf_free(q);
 800b64a:	69f8      	ldr	r0, [r7, #28]
 800b64c:	f002 fd8c 	bl	800e168 <pbuf_free>
 800b650:	e000      	b.n	800b654 <icmp_send_response+0xd4>
    return;
 800b652:	bf00      	nop
}
 800b654:	3720      	adds	r7, #32
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	08015a44 	.word	0x08015a44
 800b660:	08015b3c 	.word	0x08015b3c
 800b664:	08015ae0 	.word	0x08015ae0

0800b668 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b668:	b480      	push	{r7}
 800b66a:	b089      	sub	sp, #36	@ 0x24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00d      	beq.n	800b6a8 <lwip_standard_chksum+0x40>
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd0a      	ble.n	800b6a8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	1c53      	adds	r3, r2, #1
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	f107 030e 	add.w	r3, r7, #14
 800b69c:	3301      	adds	r3, #1
 800b69e:	7812      	ldrb	r2, [r2, #0]
 800b6a0:	701a      	strb	r2, [r3, #0]
    len--;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b6ac:	e00a      	b.n	800b6c4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	61ba      	str	r2, [r7, #24]
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	3b02      	subs	r3, #2
 800b6c2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	dcf1      	bgt.n	800b6ae <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dd04      	ble.n	800b6da <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b6d0:	f107 030e 	add.w	r3, r7, #14
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b6da:	89fb      	ldrh	r3, [r7, #14]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	0c1a      	lsrs	r2, r3, #16
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	0c1a      	lsrs	r2, r3, #16
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	4413      	add	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	b29a      	uxth	r2, r3
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	b29b      	uxth	r3, r3
}
 800b716:	4618      	mov	r0, r3
 800b718:	3724      	adds	r7, #36	@ 0x24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b72e:	887b      	ldrh	r3, [r7, #2]
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff ff98 	bl	800b668 <lwip_standard_chksum>
 800b738:	4603      	mov	r3, r0
 800b73a:	43db      	mvns	r3, r3
 800b73c:	b29b      	uxth	r3, r3
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	613b      	str	r3, [r7, #16]
 800b75a:	e02b      	b.n	800b7b4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	895b      	ldrh	r3, [r3, #10]
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f7ff ff7e 	bl	800b668 <lwip_standard_chksum>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	4413      	add	r3, r2
 800b774:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	0c1a      	lsrs	r2, r3, #16
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	4413      	add	r3, r2
 800b780:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	895b      	ldrh	r3, [r3, #10]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00e      	beq.n	800b7ae <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	bf0c      	ite	eq
 800b796:	2301      	moveq	r3, #1
 800b798:	2300      	movne	r3, #0
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	0a1b      	lsrs	r3, r3, #8
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1d0      	bne.n	800b75c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	0a1b      	lsrs	r3, r3, #8
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	43db      	mvns	r3, r3
 800b7d6:	b29b      	uxth	r3, r3
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b7ea:	f002 ffe3 	bl	800e7b4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b7ee:	f001 f9e9 	bl	800cbc4 <mem_init>
  memp_init();
 800b7f2:	f001 fd31 	bl	800d258 <memp_init>
  pbuf_init();
  netif_init();
 800b7f6:	f001 fe3d 	bl	800d474 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b7fa:	f008 fcdf 	bl	80141bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b7fe:	f003 f863 	bl	800e8c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b802:	f008 fc21 	bl	8014048 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b818:	4b33      	ldr	r3, [pc, #204]	@ (800b8e8 <ip4_route+0xd8>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e036      	b.n	800b88e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02b      	beq.n	800b888 <ip4_route+0x78>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b836:	089b      	lsrs	r3, r3, #2
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d022      	beq.n	800b888 <ip4_route+0x78>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01d      	beq.n	800b888 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3304      	adds	r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	405a      	eors	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3308      	adds	r3, #8
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4013      	ands	r3, r2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	e038      	b.n	800b8da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d108      	bne.n	800b888 <ip4_route+0x78>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	330c      	adds	r3, #12
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d101      	bne.n	800b888 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	e028      	b.n	800b8da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1c5      	bne.n	800b820 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b894:	4b15      	ldr	r3, [pc, #84]	@ (800b8ec <ip4_route+0xdc>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d01a      	beq.n	800b8d2 <ip4_route+0xc2>
 800b89c:	4b13      	ldr	r3, [pc, #76]	@ (800b8ec <ip4_route+0xdc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d012      	beq.n	800b8d2 <ip4_route+0xc2>
 800b8ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b8ec <ip4_route+0xdc>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ec <ip4_route+0xdc>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8d0:	d101      	bne.n	800b8d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	e001      	b.n	800b8da <ip4_route+0xca>
  }

  return netif_default;
 800b8d6:	4b05      	ldr	r3, [pc, #20]	@ (800b8ec <ip4_route+0xdc>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	2400f920 	.word	0x2400f920
 800b8ec:	2400f924 	.word	0x2400f924

0800b8f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b00      	cmp	r3, #0
 800b906:	d016      	beq.n	800b936 <ip4_input_accept+0x46>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3304      	adds	r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d011      	beq.n	800b936 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b912:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <ip4_input_accept+0x50>)
 800b914:	695a      	ldr	r2, [r3, #20]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3304      	adds	r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d008      	beq.n	800b932 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b920:	4b07      	ldr	r3, [pc, #28]	@ (800b940 <ip4_input_accept+0x50>)
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	4618      	mov	r0, r3
 800b928:	f000 fa08 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800b92c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b932:	2301      	movs	r3, #1
 800b934:	e000      	b.n	800b938 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	24008e60 	.word	0x24008e60

0800b944 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	091b      	lsrs	r3, r3, #4
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d004      	beq.n	800b96a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 fc01 	bl	800e168 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	e107      	b.n	800bb7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	b2db      	uxtb	r3, r3
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	b2db      	uxtb	r3, r3
 800b978:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	885b      	ldrh	r3, [r3, #2]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fc6b 	bl	800a25c <lwip_htons>
 800b986:	4603      	mov	r3, r0
 800b988:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	891b      	ldrh	r3, [r3, #8]
 800b98e:	89ba      	ldrh	r2, [r7, #12]
 800b990:	429a      	cmp	r2, r3
 800b992:	d204      	bcs.n	800b99e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800b994:	89bb      	ldrh	r3, [r7, #12]
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f002 fa61 	bl	800de60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	895b      	ldrh	r3, [r3, #10]
 800b9a2:	89fa      	ldrh	r2, [r7, #14]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d807      	bhi.n	800b9b8 <ip4_input+0x74>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	891b      	ldrh	r3, [r3, #8]
 800b9ac:	89ba      	ldrh	r2, [r7, #12]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d802      	bhi.n	800b9b8 <ip4_input+0x74>
 800b9b2:	89fb      	ldrh	r3, [r7, #14]
 800b9b4:	2b13      	cmp	r3, #19
 800b9b6:	d804      	bhi.n	800b9c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f002 fbd5 	bl	800e168 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e0db      	b.n	800bb7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	4a6f      	ldr	r2, [pc, #444]	@ (800bb84 <ip4_input+0x240>)
 800b9c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	4a6d      	ldr	r2, [pc, #436]	@ (800bb84 <ip4_input+0x240>)
 800b9d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b9d2:	4b6c      	ldr	r3, [pc, #432]	@ (800bb84 <ip4_input+0x240>)
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9da:	2be0      	cmp	r3, #224	@ 0xe0
 800b9dc:	d112      	bne.n	800ba04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <ip4_input+0xba>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <ip4_input+0xba>
      netif = inp;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	e02a      	b.n	800ba54 <ip4_input+0x110>
    } else {
      netif = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	613b      	str	r3, [r7, #16]
 800ba02:	e027      	b.n	800ba54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ba04:	6838      	ldr	r0, [r7, #0]
 800ba06:	f7ff ff73 	bl	800b8f0 <ip4_input_accept>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <ip4_input+0xd2>
      netif = inp;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	613b      	str	r3, [r7, #16]
 800ba14:	e01e      	b.n	800ba54 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ba1a:	4b5a      	ldr	r3, [pc, #360]	@ (800bb84 <ip4_input+0x240>)
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba22:	d017      	beq.n	800ba54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ba24:	4b58      	ldr	r3, [pc, #352]	@ (800bb88 <ip4_input+0x244>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	613b      	str	r3, [r7, #16]
 800ba2a:	e00e      	b.n	800ba4a <ip4_input+0x106>
          if (netif == inp) {
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d006      	beq.n	800ba42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ba34:	6938      	ldr	r0, [r7, #16]
 800ba36:	f7ff ff5b 	bl	800b8f0 <ip4_input_accept>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d108      	bne.n	800ba52 <ip4_input+0x10e>
 800ba40:	e000      	b.n	800ba44 <ip4_input+0x100>
            continue;
 800ba42:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	613b      	str	r3, [r7, #16]
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1ed      	bne.n	800ba2c <ip4_input+0xe8>
 800ba50:	e000      	b.n	800ba54 <ip4_input+0x110>
            break;
 800ba52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ba54:	4b4b      	ldr	r3, [pc, #300]	@ (800bb84 <ip4_input+0x240>)
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 f96e 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ba66:	4b47      	ldr	r3, [pc, #284]	@ (800bb84 <ip4_input+0x240>)
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ba6e:	2be0      	cmp	r3, #224	@ 0xe0
 800ba70:	d104      	bne.n	800ba7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f002 fb78 	bl	800e168 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	e07e      	b.n	800bb7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f002 fb70 	bl	800e168 <pbuf_free>
    return ERR_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e076      	b.n	800bb7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	88db      	ldrh	r3, [r3, #6]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ba98:	4013      	ands	r3, r2
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fc92 	bl	800c3c8 <ip4_reass>
 800baa4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <ip4_input+0x16c>
      return ERR_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	e064      	b.n	800bb7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bab6:	4a33      	ldr	r2, [pc, #204]	@ (800bb84 <ip4_input+0x240>)
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800babc:	4a31      	ldr	r2, [pc, #196]	@ (800bb84 <ip4_input+0x240>)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bac2:	4a30      	ldr	r2, [pc, #192]	@ (800bb84 <ip4_input+0x240>)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 030f 	and.w	r3, r3, #15
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	4b2a      	ldr	r3, [pc, #168]	@ (800bb84 <ip4_input+0x240>)
 800bada:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800badc:	89fb      	ldrh	r3, [r7, #14]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f002 fabb 	bl	800e05c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	7a5b      	ldrb	r3, [r3, #9]
 800baea:	2b11      	cmp	r3, #17
 800baec:	d006      	beq.n	800bafc <ip4_input+0x1b8>
 800baee:	2b11      	cmp	r3, #17
 800baf0:	dc13      	bgt.n	800bb1a <ip4_input+0x1d6>
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d00c      	beq.n	800bb10 <ip4_input+0x1cc>
 800baf6:	2b06      	cmp	r3, #6
 800baf8:	d005      	beq.n	800bb06 <ip4_input+0x1c2>
 800bafa:	e00e      	b.n	800bb1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f008 fbd2 	bl	80142a8 <udp_input>
        break;
 800bb04:	e026      	b.n	800bb54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f004 fa7d 	bl	8010008 <tcp_input>
        break;
 800bb0e:	e021      	b.n	800bb54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fbf4 	bl	800b300 <icmp_input>
        break;
 800bb18:	e01c      	b.n	800bb54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bb84 <ip4_input+0x240>)
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	6939      	ldr	r1, [r7, #16]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 f90b 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10f      	bne.n	800bb4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb2c:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <ip4_input+0x240>)
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bb34:	2be0      	cmp	r3, #224	@ 0xe0
 800bb36:	d009      	beq.n	800bb4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bb38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f002 faff 	bl	800e142 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bb44:	2102      	movs	r1, #2
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff fcfa 	bl	800b540 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 fb0b 	bl	800e168 <pbuf_free>
        break;
 800bb52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <ip4_input+0x240>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <ip4_input+0x240>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bb60:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <ip4_input+0x240>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bb66:	4b07      	ldr	r3, [pc, #28]	@ (800bb84 <ip4_input+0x240>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bb6c:	4b05      	ldr	r3, [pc, #20]	@ (800bb84 <ip4_input+0x240>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bb72:	4b04      	ldr	r3, [pc, #16]	@ (800bb84 <ip4_input+0x240>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	24008e60 	.word	0x24008e60
 800bb88:	2400f920 	.word	0x2400f920

0800bb8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	@ 0x28
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <ip4_output_if+0x26>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bbb8:	78fa      	ldrb	r2, [r7, #3]
 800bbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbc8:	9300      	str	r3, [sp, #0]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6979      	ldr	r1, [r7, #20]
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f000 f805 	bl	800bbe0 <ip4_output_if_src>
 800bbd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	7b9b      	ldrb	r3, [r3, #14]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d006      	beq.n	800bc04 <ip4_output_if_src+0x24>
 800bbf6:	4b4b      	ldr	r3, [pc, #300]	@ (800bd24 <ip4_output_if_src+0x144>)
 800bbf8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800bbfc:	494a      	ldr	r1, [pc, #296]	@ (800bd28 <ip4_output_if_src+0x148>)
 800bbfe:	484b      	ldr	r0, [pc, #300]	@ (800bd2c <ip4_output_if_src+0x14c>)
 800bc00:	f008 fd96 	bl	8014730 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d060      	beq.n	800bccc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bc0a:	2314      	movs	r3, #20
 800bc0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bc0e:	2114      	movs	r1, #20
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f002 fa13 	bl	800e03c <pbuf_add_header>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bc1c:	f06f 0301 	mvn.w	r3, #1
 800bc20:	e07c      	b.n	800bd1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	895b      	ldrh	r3, [r3, #10]
 800bc2c:	2b13      	cmp	r3, #19
 800bc2e:	d806      	bhi.n	800bc3e <ip4_output_if_src+0x5e>
 800bc30:	4b3c      	ldr	r3, [pc, #240]	@ (800bd24 <ip4_output_if_src+0x144>)
 800bc32:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800bc36:	493e      	ldr	r1, [pc, #248]	@ (800bd30 <ip4_output_if_src+0x150>)
 800bc38:	483c      	ldr	r0, [pc, #240]	@ (800bd2c <ip4_output_if_src+0x14c>)
 800bc3a:	f008 fd79 	bl	8014730 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800bc4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bc54:	8b7b      	ldrh	r3, [r7, #26]
 800bc56:	089b      	lsrs	r3, r3, #2
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bc6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	891b      	ldrh	r3, [r3, #8]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe faf2 	bl	800a25c <lwip_htons>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2200      	movs	r2, #0
 800bc84:	719a      	strb	r2, [r3, #6]
 800bc86:	2200      	movs	r2, #0
 800bc88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd34 <ip4_output_if_src+0x154>)
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fae4 	bl	800a25c <lwip_htons>
 800bc94:	4603      	mov	r3, r0
 800bc96:	461a      	mov	r2, r3
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bc9c:	4b25      	ldr	r3, [pc, #148]	@ (800bd34 <ip4_output_if_src+0x154>)
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	3301      	adds	r3, #1
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	4b23      	ldr	r3, [pc, #140]	@ (800bd34 <ip4_output_if_src+0x154>)
 800bca6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d104      	bne.n	800bcb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bcae:	4b22      	ldr	r3, [pc, #136]	@ (800bd38 <ip4_output_if_src+0x158>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	60da      	str	r2, [r3, #12]
 800bcb6:	e003      	b.n	800bcc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	729a      	strb	r2, [r3, #10]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	72da      	strb	r2, [r3, #11]
 800bcca:	e00f      	b.n	800bcec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	895b      	ldrh	r3, [r3, #10]
 800bcd0:	2b13      	cmp	r3, #19
 800bcd2:	d802      	bhi.n	800bcda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bcd4:	f06f 0301 	mvn.w	r3, #1
 800bcd8:	e020      	b.n	800bd1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bce6:	f107 0314 	add.w	r3, r7, #20
 800bcea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <ip4_output_if_src+0x12e>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	891a      	ldrh	r2, [r3, #8]
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d906      	bls.n	800bd0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 fd53 	bl	800c7b0 <ip4_frag>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	e006      	b.n	800bd1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	68f9      	ldr	r1, [r7, #12]
 800bd16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd18:	4798      	blx	r3
 800bd1a:	4603      	mov	r3, r0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3720      	adds	r7, #32
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08015b68 	.word	0x08015b68
 800bd28:	08015bc8 	.word	0x08015bc8
 800bd2c:	08015bd4 	.word	0x08015bd4
 800bd30:	08015bfc 	.word	0x08015bfc
 800bd34:	24008e78 	.word	0x24008e78
 800bd38:	0801844c 	.word	0x0801844c

0800bd3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd50:	d002      	beq.n	800bd58 <ip4_addr_isbroadcast_u32+0x1c>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e02a      	b.n	800bdb2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd62:	f003 0302 	and.w	r3, r3, #2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e021      	b.n	800bdb2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	3304      	adds	r3, #4
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d101      	bne.n	800bd7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e019      	b.n	800bdb2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	3304      	adds	r3, #4
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	405a      	eors	r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4013      	ands	r3, r2
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10d      	bne.n	800bdb0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	3308      	adds	r3, #8
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	43da      	mvns	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	3308      	adds	r3, #8
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d101      	bne.n	800bdb0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e000      	b.n	800bdb2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bdb0:	2300      	movs	r3, #0
  }
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
	...

0800bdc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800bdca:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <ip_reass_tmr+0x54>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800bdd0:	e018      	b.n	800be04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	7fdb      	ldrb	r3, [r3, #31]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00b      	beq.n	800bdf2 <ip_reass_tmr+0x32>
      r->timer--;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	7fdb      	ldrb	r3, [r3, #31]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	e008      	b.n	800be04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800bdfc:	68b9      	ldr	r1, [r7, #8]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f80a 	bl	800be18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e3      	bne.n	800bdd2 <ip_reass_tmr+0x12>
    }
  }
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	24008e7c 	.word	0x24008e7c

0800be18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d105      	bne.n	800be3a <ip_reass_free_complete_datagram+0x22>
 800be2e:	4b45      	ldr	r3, [pc, #276]	@ (800bf44 <ip_reass_free_complete_datagram+0x12c>)
 800be30:	22ab      	movs	r2, #171	@ 0xab
 800be32:	4945      	ldr	r1, [pc, #276]	@ (800bf48 <ip_reass_free_complete_datagram+0x130>)
 800be34:	4845      	ldr	r0, [pc, #276]	@ (800bf4c <ip_reass_free_complete_datagram+0x134>)
 800be36:	f008 fc7b 	bl	8014730 <iprintf>
  if (prev != NULL) {
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00a      	beq.n	800be56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	429a      	cmp	r2, r3
 800be48:	d005      	beq.n	800be56 <ip_reass_free_complete_datagram+0x3e>
 800be4a:	4b3e      	ldr	r3, [pc, #248]	@ (800bf44 <ip_reass_free_complete_datagram+0x12c>)
 800be4c:	22ad      	movs	r2, #173	@ 0xad
 800be4e:	4940      	ldr	r1, [pc, #256]	@ (800bf50 <ip_reass_free_complete_datagram+0x138>)
 800be50:	483e      	ldr	r0, [pc, #248]	@ (800bf4c <ip_reass_free_complete_datagram+0x134>)
 800be52:	f008 fc6d 	bl	8014730 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	889b      	ldrh	r3, [r3, #4]
 800be62:	b29b      	uxth	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	d12a      	bne.n	800bebe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6858      	ldr	r0, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3308      	adds	r3, #8
 800be7e:	2214      	movs	r2, #20
 800be80:	4619      	mov	r1, r3
 800be82:	f008 fd8e 	bl	80149a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800be86:	2101      	movs	r1, #1
 800be88:	69b8      	ldr	r0, [r7, #24]
 800be8a:	f7ff fb69 	bl	800b560 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800be8e:	69b8      	ldr	r0, [r7, #24]
 800be90:	f002 f9f8 	bl	800e284 <pbuf_clen>
 800be94:	4603      	mov	r3, r0
 800be96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800be98:	8bfa      	ldrh	r2, [r7, #30]
 800be9a:	8a7b      	ldrh	r3, [r7, #18]
 800be9c:	4413      	add	r3, r2
 800be9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bea2:	db05      	blt.n	800beb0 <ip_reass_free_complete_datagram+0x98>
 800bea4:	4b27      	ldr	r3, [pc, #156]	@ (800bf44 <ip_reass_free_complete_datagram+0x12c>)
 800bea6:	22bc      	movs	r2, #188	@ 0xbc
 800bea8:	492a      	ldr	r1, [pc, #168]	@ (800bf54 <ip_reass_free_complete_datagram+0x13c>)
 800beaa:	4828      	ldr	r0, [pc, #160]	@ (800bf4c <ip_reass_free_complete_datagram+0x134>)
 800beac:	f008 fc40 	bl	8014730 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800beb0:	8bfa      	ldrh	r2, [r7, #30]
 800beb2:	8a7b      	ldrh	r3, [r7, #18]
 800beb4:	4413      	add	r3, r2
 800beb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800beb8:	69b8      	ldr	r0, [r7, #24]
 800beba:	f002 f955 	bl	800e168 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800bec4:	e01f      	b.n	800bf06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	617b      	str	r3, [r7, #20]
    pcur = p;
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f002 f9d4 	bl	800e284 <pbuf_clen>
 800bedc:	4603      	mov	r3, r0
 800bede:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bee0:	8bfa      	ldrh	r2, [r7, #30]
 800bee2:	8a7b      	ldrh	r3, [r7, #18]
 800bee4:	4413      	add	r3, r2
 800bee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beea:	db05      	blt.n	800bef8 <ip_reass_free_complete_datagram+0xe0>
 800beec:	4b15      	ldr	r3, [pc, #84]	@ (800bf44 <ip_reass_free_complete_datagram+0x12c>)
 800beee:	22cc      	movs	r2, #204	@ 0xcc
 800bef0:	4918      	ldr	r1, [pc, #96]	@ (800bf54 <ip_reass_free_complete_datagram+0x13c>)
 800bef2:	4816      	ldr	r0, [pc, #88]	@ (800bf4c <ip_reass_free_complete_datagram+0x134>)
 800bef4:	f008 fc1c 	bl	8014730 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bef8:	8bfa      	ldrh	r2, [r7, #30]
 800befa:	8a7b      	ldrh	r3, [r7, #18]
 800befc:	4413      	add	r3, r2
 800befe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f002 f931 	bl	800e168 <pbuf_free>
  while (p != NULL) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1dc      	bne.n	800bec6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f8c2 	bl	800c098 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800bf14:	4b10      	ldr	r3, [pc, #64]	@ (800bf58 <ip_reass_free_complete_datagram+0x140>)
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	8bfa      	ldrh	r2, [r7, #30]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d905      	bls.n	800bf2a <ip_reass_free_complete_datagram+0x112>
 800bf1e:	4b09      	ldr	r3, [pc, #36]	@ (800bf44 <ip_reass_free_complete_datagram+0x12c>)
 800bf20:	22d2      	movs	r2, #210	@ 0xd2
 800bf22:	490e      	ldr	r1, [pc, #56]	@ (800bf5c <ip_reass_free_complete_datagram+0x144>)
 800bf24:	4809      	ldr	r0, [pc, #36]	@ (800bf4c <ip_reass_free_complete_datagram+0x134>)
 800bf26:	f008 fc03 	bl	8014730 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf58 <ip_reass_free_complete_datagram+0x140>)
 800bf2c:	881a      	ldrh	r2, [r3, #0]
 800bf2e:	8bfb      	ldrh	r3, [r7, #30]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	4b08      	ldr	r3, [pc, #32]	@ (800bf58 <ip_reass_free_complete_datagram+0x140>)
 800bf36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800bf38:	8bfb      	ldrh	r3, [r7, #30]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	08015c2c 	.word	0x08015c2c
 800bf48:	08015c94 	.word	0x08015c94
 800bf4c:	08015ca0 	.word	0x08015ca0
 800bf50:	08015cc8 	.word	0x08015cc8
 800bf54:	08015cdc 	.word	0x08015cdc
 800bf58:	24008e80 	.word	0x24008e80
 800bf5c:	08015cfc 	.word	0x08015cfc

0800bf60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	@ 0x28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800bf7e:	4b28      	ldr	r3, [pc, #160]	@ (800c020 <ip_reass_remove_oldest_datagram+0xc0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800bf84:	e030      	b.n	800bfe8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	695a      	ldr	r2, [r3, #20]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d10c      	bne.n	800bfac <ip_reass_remove_oldest_datagram+0x4c>
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	699a      	ldr	r2, [r3, #24]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d106      	bne.n	800bfac <ip_reass_remove_oldest_datagram+0x4c>
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa0:	899a      	ldrh	r2, [r3, #12]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	889b      	ldrh	r3, [r3, #4]
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d014      	beq.n	800bfd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	61bb      	str	r3, [r7, #24]
 800bfc0:	e009      	b.n	800bfd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc4:	7fda      	ldrb	r2, [r3, #31]
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	7fdb      	ldrb	r3, [r3, #31]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d803      	bhi.n	800bfd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800bfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1cb      	bne.n	800bf86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d008      	beq.n	800c006 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800bff4:	69b9      	ldr	r1, [r7, #24]
 800bff6:	6a38      	ldr	r0, [r7, #32]
 800bff8:	f7ff ff0e 	bl	800be18 <ip_reass_free_complete_datagram>
 800bffc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	da02      	bge.n	800c014 <ip_reass_remove_oldest_datagram+0xb4>
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2b01      	cmp	r3, #1
 800c012:	dcac      	bgt.n	800bf6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c014:	697b      	ldr	r3, [r7, #20]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3728      	adds	r7, #40	@ 0x28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	24008e7c 	.word	0x24008e7c

0800c024 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c02e:	2004      	movs	r0, #4
 800c030:	f001 f980 	bl	800d334 <memp_malloc>
 800c034:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d110      	bne.n	800c05e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff ff8e 	bl	800bf60 <ip_reass_remove_oldest_datagram>
 800c044:	4602      	mov	r2, r0
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	4293      	cmp	r3, r2
 800c04a:	dc03      	bgt.n	800c054 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c04c:	2004      	movs	r0, #4
 800c04e:	f001 f971 	bl	800d334 <memp_malloc>
 800c052:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	e016      	b.n	800c08c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c05e:	2220      	movs	r2, #32
 800c060:	2100      	movs	r1, #0
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f008 fbc9 	bl	80147fa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	220f      	movs	r2, #15
 800c06c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c06e:	4b09      	ldr	r3, [pc, #36]	@ (800c094 <ip_reass_enqueue_new_datagram+0x70>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c076:	4a07      	ldr	r2, [pc, #28]	@ (800c094 <ip_reass_enqueue_new_datagram+0x70>)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3308      	adds	r3, #8
 800c080:	2214      	movs	r2, #20
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	f008 fc8c 	bl	80149a2 <memcpy>
  return ipr;
 800c08a:	68fb      	ldr	r3, [r7, #12]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	24008e7c 	.word	0x24008e7c

0800c098 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c0a2:	4b10      	ldr	r3, [pc, #64]	@ (800c0e4 <ip_reass_dequeue_datagram+0x4c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d104      	bne.n	800c0b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a0c      	ldr	r2, [pc, #48]	@ (800c0e4 <ip_reass_dequeue_datagram+0x4c>)
 800c0b2:	6013      	str	r3, [r2, #0]
 800c0b4:	e00d      	b.n	800c0d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <ip_reass_dequeue_datagram+0x32>
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <ip_reass_dequeue_datagram+0x50>)
 800c0be:	f240 1245 	movw	r2, #325	@ 0x145
 800c0c2:	490a      	ldr	r1, [pc, #40]	@ (800c0ec <ip_reass_dequeue_datagram+0x54>)
 800c0c4:	480a      	ldr	r0, [pc, #40]	@ (800c0f0 <ip_reass_dequeue_datagram+0x58>)
 800c0c6:	f008 fb33 	bl	8014730 <iprintf>
    prev->next = ipr->next;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	2004      	movs	r0, #4
 800c0d6:	f001 f9a3 	bl	800d420 <memp_free>
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	24008e7c 	.word	0x24008e7c
 800c0e8:	08015c2c 	.word	0x08015c2c
 800c0ec:	08015d20 	.word	0x08015d20
 800c0f0:	08015ca0 	.word	0x08015ca0

0800c0f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b08c      	sub	sp, #48	@ 0x30
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c100:	2300      	movs	r3, #0
 800c102:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c104:	2301      	movs	r3, #1
 800c106:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	b29b      	uxth	r3, r3
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe f8a1 	bl	800a25c <lwip_htons>
 800c11a:	4603      	mov	r3, r0
 800c11c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	f003 030f 	and.w	r3, r3, #15
 800c126:	b2db      	uxtb	r3, r3
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c12c:	7e7b      	ldrb	r3, [r7, #25]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	8b7a      	ldrh	r2, [r7, #26]
 800c132:	429a      	cmp	r2, r3
 800c134:	d202      	bcs.n	800c13c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c13a:	e135      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c13c:	7e7b      	ldrb	r3, [r7, #25]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	8b7a      	ldrh	r2, [r7, #26]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	88db      	ldrh	r3, [r3, #6]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe f885 	bl	800a25c <lwip_htons>
 800c152:	4603      	mov	r3, r0
 800c154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c158:	b29b      	uxth	r3, r3
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800c164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	2200      	movs	r2, #0
 800c16c:	705a      	strb	r2, [r3, #1]
 800c16e:	2200      	movs	r2, #0
 800c170:	709a      	strb	r2, [r3, #2]
 800c172:	2200      	movs	r2, #0
 800c174:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c178:	8afa      	ldrh	r2, [r7, #22]
 800c17a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c17c:	8afa      	ldrh	r2, [r7, #22]
 800c17e:	8b7b      	ldrh	r3, [r7, #26]
 800c180:	4413      	add	r3, r2
 800c182:	b29a      	uxth	r2, r3
 800c184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c186:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c18a:	88db      	ldrh	r3, [r3, #6]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	8afa      	ldrh	r2, [r7, #22]
 800c190:	429a      	cmp	r2, r3
 800c192:	d902      	bls.n	800c19a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c198:	e106      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1a0:	e068      	b.n	800c274 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1aa:	889b      	ldrh	r3, [r3, #4]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	889b      	ldrh	r3, [r3, #4]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d235      	bcs.n	800c224 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d020      	beq.n	800c206 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c6:	889b      	ldrh	r3, [r3, #4]
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	88db      	ldrh	r3, [r3, #6]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d307      	bcc.n	800c1e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d6:	88db      	ldrh	r3, [r3, #6]
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	889b      	ldrh	r3, [r3, #4]
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d902      	bls.n	800c1ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1e8:	e0de      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f2:	88db      	ldrh	r3, [r3, #6]
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	889b      	ldrh	r3, [r3, #4]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d03d      	beq.n	800c27c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c204:	e03a      	b.n	800c27c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c208:	88db      	ldrh	r3, [r3, #6]
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	889b      	ldrh	r3, [r3, #4]
 800c210:	b29b      	uxth	r3, r3
 800c212:	429a      	cmp	r2, r3
 800c214:	d902      	bls.n	800c21c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c21a:	e0c5      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	605a      	str	r2, [r3, #4]
      break;
 800c222:	e02b      	b.n	800c27c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c226:	889b      	ldrh	r3, [r3, #4]
 800c228:	b29a      	uxth	r2, r3
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	889b      	ldrh	r3, [r3, #4]
 800c22e:	b29b      	uxth	r3, r3
 800c230:	429a      	cmp	r2, r3
 800c232:	d102      	bne.n	800c23a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c238:	e0b6      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	889b      	ldrh	r3, [r3, #4]
 800c23e:	b29a      	uxth	r2, r3
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	88db      	ldrh	r3, [r3, #6]
 800c244:	b29b      	uxth	r3, r3
 800c246:	429a      	cmp	r2, r3
 800c248:	d202      	bcs.n	800c250 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c24a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c24e:	e0ab      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c258:	88db      	ldrh	r3, [r3, #6]
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	889b      	ldrh	r3, [r3, #4]
 800c260:	b29b      	uxth	r3, r3
 800c262:	429a      	cmp	r2, r3
 800c264:	d001      	beq.n	800c26a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	d193      	bne.n	800c1a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c27a:	e000      	b.n	800c27e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c27c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d12d      	bne.n	800c2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c286:	2b00      	cmp	r3, #0
 800c288:	d01c      	beq.n	800c2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28c:	88db      	ldrh	r3, [r3, #6]
 800c28e:	b29a      	uxth	r2, r3
 800c290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c292:	889b      	ldrh	r3, [r3, #4]
 800c294:	b29b      	uxth	r3, r3
 800c296:	429a      	cmp	r2, r3
 800c298:	d906      	bls.n	800c2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c29a:	4b45      	ldr	r3, [pc, #276]	@ (800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c29c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800c2a0:	4944      	ldr	r1, [pc, #272]	@ (800c3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c2a2:	4845      	ldr	r0, [pc, #276]	@ (800c3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c2a4:	f008 fa44 	bl	8014730 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b0:	88db      	ldrh	r3, [r3, #6]
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b6:	889b      	ldrh	r3, [r3, #4]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d010      	beq.n	800c2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	623b      	str	r3, [r7, #32]
 800c2c2:	e00d      	b.n	800c2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c2cc:	4b38      	ldr	r3, [pc, #224]	@ (800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c2ce:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800c2d2:	493a      	ldr	r1, [pc, #232]	@ (800c3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c2d4:	4838      	ldr	r0, [pc, #224]	@ (800c3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c2d6:	f008 fa2b 	bl	8014730 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d105      	bne.n	800c2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	7f9b      	ldrb	r3, [r3, #30]
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d059      	beq.n	800c3a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d04f      	beq.n	800c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d006      	beq.n	800c30e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	889b      	ldrh	r3, [r3, #4]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	623b      	str	r3, [r7, #32]
 800c312:	e041      	b.n	800c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c316:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c31e:	e012      	b.n	800c346 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800c326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c328:	88db      	ldrh	r3, [r3, #6]
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	889b      	ldrh	r3, [r3, #4]
 800c330:	b29b      	uxth	r3, r3
 800c332:	429a      	cmp	r2, r3
 800c334:	d002      	beq.n	800c33c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	623b      	str	r3, [r7, #32]
            break;
 800c33a:	e007      	b.n	800c34c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800c340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e9      	bne.n	800c320 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d022      	beq.n	800c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c35a:	4b15      	ldr	r3, [pc, #84]	@ (800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c35c:	f240 12df 	movw	r2, #479	@ 0x1df
 800c360:	4917      	ldr	r1, [pc, #92]	@ (800c3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c362:	4815      	ldr	r0, [pc, #84]	@ (800c3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c364:	f008 f9e4 	bl	8014730 <iprintf>
          LWIP_ASSERT("sanity check",
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c370:	429a      	cmp	r2, r3
 800c372:	d106      	bne.n	800c382 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c374:	4b0e      	ldr	r3, [pc, #56]	@ (800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c376:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c37a:	4911      	ldr	r1, [pc, #68]	@ (800c3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c37c:	480e      	ldr	r0, [pc, #56]	@ (800c3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c37e:	f008 f9d7 	bl	8014730 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d006      	beq.n	800c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c38a:	4b09      	ldr	r3, [pc, #36]	@ (800c3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c38c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800c390:	490c      	ldr	r1, [pc, #48]	@ (800c3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c392:	4809      	ldr	r0, [pc, #36]	@ (800c3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c394:	f008 f9cc 	bl	8014730 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	bf14      	ite	ne
 800c39e:	2301      	movne	r3, #1
 800c3a0:	2300      	moveq	r3, #0
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	e000      	b.n	800c3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3730      	adds	r7, #48	@ 0x30
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	08015c2c 	.word	0x08015c2c
 800c3b4:	08015d3c 	.word	0x08015d3c
 800c3b8:	08015ca0 	.word	0x08015ca0
 800c3bc:	08015d5c 	.word	0x08015d5c
 800c3c0:	08015d94 	.word	0x08015d94
 800c3c4:	08015da4 	.word	0x08015da4

0800c3c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	@ 0x38
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	f003 030f 	and.w	r3, r3, #15
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b14      	cmp	r3, #20
 800c3e6:	f040 8171 	bne.w	800c6cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ec:	88db      	ldrh	r3, [r3, #6]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd ff33 	bl	800a25c <lwip_htons>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	00db      	lsls	r3, r3, #3
 800c400:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	885b      	ldrh	r3, [r3, #2]
 800c406:	b29b      	uxth	r3, r3
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fd ff27 	bl	800a25c <lwip_htons>
 800c40e:	4603      	mov	r3, r0
 800c410:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	f003 030f 	and.w	r3, r3, #15
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800c422:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c426:	b29b      	uxth	r3, r3
 800c428:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c42a:	429a      	cmp	r2, r3
 800c42c:	f0c0 8150 	bcc.w	800c6d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c434:	b29b      	uxth	r3, r3
 800c436:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f001 ff21 	bl	800e284 <pbuf_clen>
 800c442:	4603      	mov	r3, r0
 800c444:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c446:	4b8c      	ldr	r3, [pc, #560]	@ (800c678 <ip4_reass+0x2b0>)
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	8c3b      	ldrh	r3, [r7, #32]
 800c44e:	4413      	add	r3, r2
 800c450:	2b0a      	cmp	r3, #10
 800c452:	dd10      	ble.n	800c476 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c454:	8c3b      	ldrh	r3, [r7, #32]
 800c456:	4619      	mov	r1, r3
 800c458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c45a:	f7ff fd81 	bl	800bf60 <ip_reass_remove_oldest_datagram>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 8137 	beq.w	800c6d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c466:	4b84      	ldr	r3, [pc, #528]	@ (800c678 <ip4_reass+0x2b0>)
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	8c3b      	ldrh	r3, [r7, #32]
 800c46e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c470:	2b0a      	cmp	r3, #10
 800c472:	f300 812f 	bgt.w	800c6d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c476:	4b81      	ldr	r3, [pc, #516]	@ (800c67c <ip4_reass+0x2b4>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c47c:	e015      	b.n	800c4aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c480:	695a      	ldr	r2, [r3, #20]
 800c482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	429a      	cmp	r2, r3
 800c488:	d10c      	bne.n	800c4a4 <ip4_reass+0xdc>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	429a      	cmp	r2, r3
 800c494:	d106      	bne.n	800c4a4 <ip4_reass+0xdc>
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	899a      	ldrh	r2, [r3, #12]
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	889b      	ldrh	r3, [r3, #4]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d006      	beq.n	800c4b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e6      	bne.n	800c47e <ip4_reass+0xb6>
 800c4b0:	e000      	b.n	800c4b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c4b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d109      	bne.n	800c4ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c4ba:	8c3b      	ldrh	r3, [r7, #32]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4c0:	f7ff fdb0 	bl	800c024 <ip_reass_enqueue_new_datagram>
 800c4c4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d11c      	bne.n	800c506 <ip4_reass+0x13e>
      goto nullreturn;
 800c4cc:	e105      	b.n	800c6da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d0:	88db      	ldrh	r3, [r3, #6]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fd fec1 	bl	800a25c <lwip_htons>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d110      	bne.n	800c506 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e6:	89db      	ldrh	r3, [r3, #14]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fd feb7 	bl	800a25c <lwip_htons>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	2214      	movs	r2, #20
 800c4fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c500:	4618      	mov	r0, r3
 800c502:	f008 fa4e 	bl	80149a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c508:	88db      	ldrh	r3, [r3, #6]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f003 0320 	and.w	r3, r3, #32
 800c510:	2b00      	cmp	r3, #0
 800c512:	bf0c      	ite	eq
 800c514:	2301      	moveq	r3, #1
 800c516:	2300      	movne	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00e      	beq.n	800c540 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c526:	4413      	add	r3, r2
 800c528:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c52a:	8b7a      	ldrh	r2, [r7, #26]
 800c52c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c52e:	429a      	cmp	r2, r3
 800c530:	f0c0 80a0 	bcc.w	800c674 <ip4_reass+0x2ac>
 800c534:	8b7b      	ldrh	r3, [r7, #26]
 800c536:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c53a:	4293      	cmp	r3, r2
 800c53c:	f200 809a 	bhi.w	800c674 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c546:	f7ff fdd5 	bl	800c0f4 <ip_reass_chain_frag_into_datagram_and_validate>
 800c54a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c552:	f000 809b 	beq.w	800c68c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c556:	4b48      	ldr	r3, [pc, #288]	@ (800c678 <ip4_reass+0x2b0>)
 800c558:	881a      	ldrh	r2, [r3, #0]
 800c55a:	8c3b      	ldrh	r3, [r7, #32]
 800c55c:	4413      	add	r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	4b45      	ldr	r3, [pc, #276]	@ (800c678 <ip4_reass+0x2b0>)
 800c562:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00d      	beq.n	800c586 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c56a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c56c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c56e:	4413      	add	r3, r2
 800c570:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c574:	8a7a      	ldrh	r2, [r7, #18]
 800c576:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57a:	7f9b      	ldrb	r3, [r3, #30]
 800c57c:	f043 0301 	orr.w	r3, r3, #1
 800c580:	b2da      	uxtb	r2, r3
 800c582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c584:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d171      	bne.n	800c670 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58e:	8b9b      	ldrh	r3, [r3, #28]
 800c590:	3314      	adds	r3, #20
 800c592:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	2214      	movs	r2, #20
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5b0:	f008 f9f7 	bl	80149a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c5b4:	8a3b      	ldrh	r3, [r7, #16]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd fe50 	bl	800a25c <lwip_htons>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	719a      	strb	r2, [r3, #6]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	729a      	strb	r2, [r3, #10]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c5de:	e00d      	b.n	800c5fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c5e6:	2114      	movs	r1, #20
 800c5e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c5ea:	f001 fd37 	bl	800e05c <pbuf_remove_header>
      pbuf_cat(p, r);
 800c5ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f001 fe87 	bl	800e304 <pbuf_cat>
      r = iprh->next_pbuf;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1ee      	bne.n	800c5e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c602:	4b1e      	ldr	r3, [pc, #120]	@ (800c67c <ip4_reass+0x2b4>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c608:	429a      	cmp	r2, r3
 800c60a:	d102      	bne.n	800c612 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c610:	e010      	b.n	800c634 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c612:	4b1a      	ldr	r3, [pc, #104]	@ (800c67c <ip4_reass+0x2b4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c618:	e007      	b.n	800c62a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c620:	429a      	cmp	r2, r3
 800c622:	d006      	beq.n	800c632 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1f4      	bne.n	800c61a <ip4_reass+0x252>
 800c630:	e000      	b.n	800c634 <ip4_reass+0x26c>
          break;
 800c632:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c638:	f7ff fd2e 	bl	800c098 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f001 fe21 	bl	800e284 <pbuf_clen>
 800c642:	4603      	mov	r3, r0
 800c644:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c646:	4b0c      	ldr	r3, [pc, #48]	@ (800c678 <ip4_reass+0x2b0>)
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	8c3a      	ldrh	r2, [r7, #32]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d906      	bls.n	800c65e <ip4_reass+0x296>
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <ip4_reass+0x2b8>)
 800c652:	f240 229b 	movw	r2, #667	@ 0x29b
 800c656:	490b      	ldr	r1, [pc, #44]	@ (800c684 <ip4_reass+0x2bc>)
 800c658:	480b      	ldr	r0, [pc, #44]	@ (800c688 <ip4_reass+0x2c0>)
 800c65a:	f008 f869 	bl	8014730 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c65e:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <ip4_reass+0x2b0>)
 800c660:	881a      	ldrh	r2, [r3, #0]
 800c662:	8c3b      	ldrh	r3, [r7, #32]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	b29a      	uxth	r2, r3
 800c668:	4b03      	ldr	r3, [pc, #12]	@ (800c678 <ip4_reass+0x2b0>)
 800c66a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	e038      	b.n	800c6e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c670:	2300      	movs	r3, #0
 800c672:	e036      	b.n	800c6e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800c674:	bf00      	nop
 800c676:	e00a      	b.n	800c68e <ip4_reass+0x2c6>
 800c678:	24008e80 	.word	0x24008e80
 800c67c:	24008e7c 	.word	0x24008e7c
 800c680:	08015c2c 	.word	0x08015c2c
 800c684:	08015dc8 	.word	0x08015dc8
 800c688:	08015ca0 	.word	0x08015ca0
    goto nullreturn_ipr;
 800c68c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <ip4_reass+0x2da>
 800c694:	4b15      	ldr	r3, [pc, #84]	@ (800c6ec <ip4_reass+0x324>)
 800c696:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800c69a:	4915      	ldr	r1, [pc, #84]	@ (800c6f0 <ip4_reass+0x328>)
 800c69c:	4815      	ldr	r0, [pc, #84]	@ (800c6f4 <ip4_reass+0x32c>)
 800c69e:	f008 f847 	bl	8014730 <iprintf>
  if (ipr->p == NULL) {
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d116      	bne.n	800c6d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c6aa:	4b13      	ldr	r3, [pc, #76]	@ (800c6f8 <ip4_reass+0x330>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d006      	beq.n	800c6c2 <ip4_reass+0x2fa>
 800c6b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <ip4_reass+0x324>)
 800c6b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c6ba:	4910      	ldr	r1, [pc, #64]	@ (800c6fc <ip4_reass+0x334>)
 800c6bc:	480d      	ldr	r0, [pc, #52]	@ (800c6f4 <ip4_reass+0x32c>)
 800c6be:	f008 f837 	bl	8014730 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6c6:	f7ff fce7 	bl	800c098 <ip_reass_dequeue_datagram>
 800c6ca:	e006      	b.n	800c6da <ip4_reass+0x312>
    goto nullreturn;
 800c6cc:	bf00      	nop
 800c6ce:	e004      	b.n	800c6da <ip4_reass+0x312>
    goto nullreturn;
 800c6d0:	bf00      	nop
 800c6d2:	e002      	b.n	800c6da <ip4_reass+0x312>
      goto nullreturn;
 800c6d4:	bf00      	nop
 800c6d6:	e000      	b.n	800c6da <ip4_reass+0x312>
  }

nullreturn:
 800c6d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f001 fd44 	bl	800e168 <pbuf_free>
  return NULL;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3738      	adds	r7, #56	@ 0x38
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	08015c2c 	.word	0x08015c2c
 800c6f0:	08015de4 	.word	0x08015de4
 800c6f4:	08015ca0 	.word	0x08015ca0
 800c6f8:	24008e7c 	.word	0x24008e7c
 800c6fc:	08015df0 	.word	0x08015df0

0800c700 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c704:	2005      	movs	r0, #5
 800c706:	f000 fe15 	bl	800d334 <memp_malloc>
 800c70a:	4603      	mov	r3, r0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <ip_frag_free_pbuf_custom_ref+0x1c>
 800c71e:	4b07      	ldr	r3, [pc, #28]	@ (800c73c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c720:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800c724:	4906      	ldr	r1, [pc, #24]	@ (800c740 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c726:	4807      	ldr	r0, [pc, #28]	@ (800c744 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c728:	f008 f802 	bl	8014730 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	2005      	movs	r0, #5
 800c730:	f000 fe76 	bl	800d420 <memp_free>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	08015c2c 	.word	0x08015c2c
 800c740:	08015e10 	.word	0x08015e10
 800c744:	08015ca0 	.word	0x08015ca0

0800c748 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <ipfrag_free_pbuf_custom+0x20>
 800c75a:	4b11      	ldr	r3, [pc, #68]	@ (800c7a0 <ipfrag_free_pbuf_custom+0x58>)
 800c75c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800c760:	4910      	ldr	r1, [pc, #64]	@ (800c7a4 <ipfrag_free_pbuf_custom+0x5c>)
 800c762:	4811      	ldr	r0, [pc, #68]	@ (800c7a8 <ipfrag_free_pbuf_custom+0x60>)
 800c764:	f007 ffe4 	bl	8014730 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d006      	beq.n	800c77e <ipfrag_free_pbuf_custom+0x36>
 800c770:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a0 <ipfrag_free_pbuf_custom+0x58>)
 800c772:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800c776:	490d      	ldr	r1, [pc, #52]	@ (800c7ac <ipfrag_free_pbuf_custom+0x64>)
 800c778:	480b      	ldr	r0, [pc, #44]	@ (800c7a8 <ipfrag_free_pbuf_custom+0x60>)
 800c77a:	f007 ffd9 	bl	8014730 <iprintf>
  if (pcr->original != NULL) {
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d004      	beq.n	800c790 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 fcec 	bl	800e168 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7ff ffbd 	bl	800c710 <ip_frag_free_pbuf_custom_ref>
}
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	08015c2c 	.word	0x08015c2c
 800c7a4:	08015e1c 	.word	0x08015e1c
 800c7a8:	08015ca0 	.word	0x08015ca0
 800c7ac:	08015e28 	.word	0x08015e28

0800c7b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b094      	sub	sp, #80	@ 0x50
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c7c6:	3b14      	subs	r3, #20
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	da00      	bge.n	800c7ce <ip4_frag+0x1e>
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	10db      	asrs	r3, r3, #3
 800c7d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c7d2:	2314      	movs	r3, #20
 800c7d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	f003 030f 	and.w	r3, r3, #15
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b14      	cmp	r3, #20
 800c7f0:	d002      	beq.n	800c7f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c7f2:	f06f 0305 	mvn.w	r3, #5
 800c7f6:	e110      	b.n	800ca1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	895b      	ldrh	r3, [r3, #10]
 800c7fc:	2b13      	cmp	r3, #19
 800c7fe:	d809      	bhi.n	800c814 <ip4_frag+0x64>
 800c800:	4b88      	ldr	r3, [pc, #544]	@ (800ca24 <ip4_frag+0x274>)
 800c802:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800c806:	4988      	ldr	r1, [pc, #544]	@ (800ca28 <ip4_frag+0x278>)
 800c808:	4888      	ldr	r0, [pc, #544]	@ (800ca2c <ip4_frag+0x27c>)
 800c80a:	f007 ff91 	bl	8014730 <iprintf>
 800c80e:	f06f 0305 	mvn.w	r3, #5
 800c812:	e102      	b.n	800ca1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	88db      	ldrh	r3, [r3, #6]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fd fd1e 	bl	800a25c <lwip_htons>
 800c820:	4603      	mov	r3, r0
 800c822:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800c824:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c82a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c82e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c834:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	891b      	ldrh	r3, [r3, #8]
 800c83a:	3b14      	subs	r3, #20
 800c83c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800c840:	e0e1      	b.n	800ca06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c842:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	b29b      	uxth	r3, r3
 800c848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c84c:	4293      	cmp	r3, r2
 800c84e:	bf28      	it	cs
 800c850:	4613      	movcs	r3, r2
 800c852:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c854:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c858:	2114      	movs	r1, #20
 800c85a:	200e      	movs	r0, #14
 800c85c:	f001 f9a0 	bl	800dba0 <pbuf_alloc>
 800c860:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800c862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 80d5 	beq.w	800ca14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	895b      	ldrh	r3, [r3, #10]
 800c86e:	2b13      	cmp	r3, #19
 800c870:	d806      	bhi.n	800c880 <ip4_frag+0xd0>
 800c872:	4b6c      	ldr	r3, [pc, #432]	@ (800ca24 <ip4_frag+0x274>)
 800c874:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800c878:	496d      	ldr	r1, [pc, #436]	@ (800ca30 <ip4_frag+0x280>)
 800c87a:	486c      	ldr	r0, [pc, #432]	@ (800ca2c <ip4_frag+0x27c>)
 800c87c:	f007 ff58 	bl	8014730 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	2214      	movs	r2, #20
 800c886:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c888:	4618      	mov	r0, r3
 800c88a:	f008 f88a 	bl	80149a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800c894:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c896:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800c89a:	e064      	b.n	800c966 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	895a      	ldrh	r2, [r3, #10]
 800c8a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	895b      	ldrh	r3, [r3, #10]
 800c8aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d906      	bls.n	800c8be <ip4_frag+0x10e>
 800c8b0:	4b5c      	ldr	r3, [pc, #368]	@ (800ca24 <ip4_frag+0x274>)
 800c8b2:	f240 322d 	movw	r2, #813	@ 0x32d
 800c8b6:	495f      	ldr	r1, [pc, #380]	@ (800ca34 <ip4_frag+0x284>)
 800c8b8:	485c      	ldr	r0, [pc, #368]	@ (800ca2c <ip4_frag+0x27c>)
 800c8ba:	f007 ff39 	bl	8014730 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c8be:	8bfa      	ldrh	r2, [r7, #30]
 800c8c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	bf28      	it	cs
 800c8c8:	4613      	movcs	r3, r2
 800c8ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c8ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d105      	bne.n	800c8e2 <ip4_frag+0x132>
        poff = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60fb      	str	r3, [r7, #12]
        continue;
 800c8e0:	e041      	b.n	800c966 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c8e2:	f7ff ff0d 	bl	800c700 <ip_frag_alloc_pbuf_custom_ref>
 800c8e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d103      	bne.n	800c8f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c8ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8f0:	f001 fc3a 	bl	800e168 <pbuf_free>
        goto memerr;
 800c8f4:	e08f      	b.n	800ca16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c8f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c8fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c8fe:	4413      	add	r3, r2
 800c900:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800c904:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c908:	9201      	str	r2, [sp, #4]
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	2241      	movs	r2, #65	@ 0x41
 800c910:	2000      	movs	r0, #0
 800c912:	f001 fa71 	bl	800ddf8 <pbuf_alloced_custom>
 800c916:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c91e:	69b8      	ldr	r0, [r7, #24]
 800c920:	f7ff fef6 	bl	800c710 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c926:	f001 fc1f 	bl	800e168 <pbuf_free>
        goto memerr;
 800c92a:	e074      	b.n	800ca16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f001 fcc1 	bl	800e2b4 <pbuf_ref>
      pcr->original = p;
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	4a3f      	ldr	r2, [pc, #252]	@ (800ca38 <ip4_frag+0x288>)
 800c93c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c93e:	6979      	ldr	r1, [r7, #20]
 800c940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c942:	f001 fcdf 	bl	800e304 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c946:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800c94a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800c954:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <ip4_frag+0x1b6>
        poff = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c966:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d196      	bne.n	800c89c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c96e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c974:	4413      	add	r3, r2
 800c976:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c97c:	f1a3 0213 	sub.w	r2, r3, #19
 800c980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c984:	429a      	cmp	r2, r3
 800c986:	bfcc      	ite	gt
 800c988:	2301      	movgt	r3, #1
 800c98a:	2300      	movle	r3, #0
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c990:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c998:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <ip4_frag+0x1f6>
 800c9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c9a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c9ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c9ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fd fc53 	bl	800a25c <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c9be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c9c0:	3314      	adds	r3, #20
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fc49 	bl	800a25c <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	729a      	strb	r2, [r3, #10]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9e4:	68b8      	ldr	r0, [r7, #8]
 800c9e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c9e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9ea:	f001 fbbd 	bl	800e168 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c9ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c9f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800c9fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c9fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca00:	4413      	add	r3, r2
 800ca02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ca06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f47f af19 	bne.w	800c842 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	e002      	b.n	800ca1a <ip4_frag+0x26a>
      goto memerr;
 800ca14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ca16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3748      	adds	r7, #72	@ 0x48
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	08015c2c 	.word	0x08015c2c
 800ca28:	08015e34 	.word	0x08015e34
 800ca2c:	08015ca0 	.word	0x08015ca0
 800ca30:	08015e50 	.word	0x08015e50
 800ca34:	08015e70 	.word	0x08015e70
 800ca38:	0800c749 	.word	0x0800c749

0800ca3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800ca44:	4b04      	ldr	r3, [pc, #16]	@ (800ca58 <ptr_to_mem+0x1c>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4413      	add	r3, r2
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	24008e84 	.word	0x24008e84

0800ca5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca64:	4b04      	ldr	r3, [pc, #16]	@ (800ca78 <mem_to_ptr+0x1c>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	1ad3      	subs	r3, r2, r3
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	24008e84 	.word	0x24008e84

0800ca7c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca7c:	b590      	push	{r4, r7, lr}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca84:	4b45      	ldr	r3, [pc, #276]	@ (800cb9c <plug_holes+0x120>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d206      	bcs.n	800ca9c <plug_holes+0x20>
 800ca8e:	4b44      	ldr	r3, [pc, #272]	@ (800cba0 <plug_holes+0x124>)
 800ca90:	f240 12df 	movw	r2, #479	@ 0x1df
 800ca94:	4943      	ldr	r1, [pc, #268]	@ (800cba4 <plug_holes+0x128>)
 800ca96:	4844      	ldr	r0, [pc, #272]	@ (800cba8 <plug_holes+0x12c>)
 800ca98:	f007 fe4a 	bl	8014730 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca9c:	4b43      	ldr	r3, [pc, #268]	@ (800cbac <plug_holes+0x130>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d306      	bcc.n	800cab4 <plug_holes+0x38>
 800caa6:	4b3e      	ldr	r3, [pc, #248]	@ (800cba0 <plug_holes+0x124>)
 800caa8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800caac:	4940      	ldr	r1, [pc, #256]	@ (800cbb0 <plug_holes+0x134>)
 800caae:	483e      	ldr	r0, [pc, #248]	@ (800cba8 <plug_holes+0x12c>)
 800cab0:	f007 fe3e 	bl	8014730 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	7a1b      	ldrb	r3, [r3, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d006      	beq.n	800caca <plug_holes+0x4e>
 800cabc:	4b38      	ldr	r3, [pc, #224]	@ (800cba0 <plug_holes+0x124>)
 800cabe:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cac2:	493c      	ldr	r1, [pc, #240]	@ (800cbb4 <plug_holes+0x138>)
 800cac4:	4838      	ldr	r0, [pc, #224]	@ (800cba8 <plug_holes+0x12c>)
 800cac6:	f007 fe33 	bl	8014730 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a3a      	ldr	r2, [pc, #232]	@ (800cbb8 <plug_holes+0x13c>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d906      	bls.n	800cae2 <plug_holes+0x66>
 800cad4:	4b32      	ldr	r3, [pc, #200]	@ (800cba0 <plug_holes+0x124>)
 800cad6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cada:	4938      	ldr	r1, [pc, #224]	@ (800cbbc <plug_holes+0x140>)
 800cadc:	4832      	ldr	r0, [pc, #200]	@ (800cba8 <plug_holes+0x12c>)
 800cade:	f007 fe27 	bl	8014730 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff ffa8 	bl	800ca3c <ptr_to_mem>
 800caec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d024      	beq.n	800cb40 <plug_holes+0xc4>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7a1b      	ldrb	r3, [r3, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d120      	bne.n	800cb40 <plug_holes+0xc4>
 800cafe:	4b2b      	ldr	r3, [pc, #172]	@ (800cbac <plug_holes+0x130>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d01b      	beq.n	800cb40 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cb08:	4b2d      	ldr	r3, [pc, #180]	@ (800cbc0 <plug_holes+0x144>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d102      	bne.n	800cb18 <plug_holes+0x9c>
      lfree = mem;
 800cb12:	4a2b      	ldr	r2, [pc, #172]	@ (800cbc0 <plug_holes+0x144>)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a24      	ldr	r2, [pc, #144]	@ (800cbb8 <plug_holes+0x13c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d00a      	beq.n	800cb40 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff ff84 	bl	800ca3c <ptr_to_mem>
 800cb34:	4604      	mov	r4, r0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ff90 	bl	800ca5c <mem_to_ptr>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff ff79 	bl	800ca3c <ptr_to_mem>
 800cb4a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d01f      	beq.n	800cb94 <plug_holes+0x118>
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	7a1b      	ldrb	r3, [r3, #8]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d11b      	bne.n	800cb94 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb5c:	4b18      	ldr	r3, [pc, #96]	@ (800cbc0 <plug_holes+0x144>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d102      	bne.n	800cb6c <plug_holes+0xf0>
      lfree = pmem;
 800cb66:	4a16      	ldr	r2, [pc, #88]	@ (800cbc0 <plug_holes+0x144>)
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a0f      	ldr	r2, [pc, #60]	@ (800cbb8 <plug_holes+0x13c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d00a      	beq.n	800cb94 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff ff5a 	bl	800ca3c <ptr_to_mem>
 800cb88:	4604      	mov	r4, r0
 800cb8a:	68b8      	ldr	r0, [r7, #8]
 800cb8c:	f7ff ff66 	bl	800ca5c <mem_to_ptr>
 800cb90:	4603      	mov	r3, r0
 800cb92:	6063      	str	r3, [r4, #4]
    }
  }
}
 800cb94:	bf00      	nop
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}
 800cb9c:	24008e84 	.word	0x24008e84
 800cba0:	08015e80 	.word	0x08015e80
 800cba4:	08015edc 	.word	0x08015edc
 800cba8:	08015ef4 	.word	0x08015ef4
 800cbac:	24008e88 	.word	0x24008e88
 800cbb0:	08015f1c 	.word	0x08015f1c
 800cbb4:	08015f38 	.word	0x08015f38
 800cbb8:	0001ffe8 	.word	0x0001ffe8
 800cbbc:	08015f54 	.word	0x08015f54
 800cbc0:	24008e90 	.word	0x24008e90

0800cbc4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cbca:	4b1b      	ldr	r3, [pc, #108]	@ (800cc38 <mem_init+0x74>)
 800cbcc:	4a1b      	ldr	r2, [pc, #108]	@ (800cc3c <mem_init+0x78>)
 800cbce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cbd0:	4b19      	ldr	r3, [pc, #100]	@ (800cc38 <mem_init+0x74>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a19      	ldr	r2, [pc, #100]	@ (800cc40 <mem_init+0x7c>)
 800cbda:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbe8:	4815      	ldr	r0, [pc, #84]	@ (800cc40 <mem_init+0x7c>)
 800cbea:	f7ff ff27 	bl	800ca3c <ptr_to_mem>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4a14      	ldr	r2, [pc, #80]	@ (800cc44 <mem_init+0x80>)
 800cbf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cbf4:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <mem_init+0x80>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cbfc:	4b11      	ldr	r3, [pc, #68]	@ (800cc44 <mem_init+0x80>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a0f      	ldr	r2, [pc, #60]	@ (800cc40 <mem_init+0x7c>)
 800cc02:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cc04:	4b0f      	ldr	r3, [pc, #60]	@ (800cc44 <mem_init+0x80>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a0d      	ldr	r2, [pc, #52]	@ (800cc40 <mem_init+0x7c>)
 800cc0a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc38 <mem_init+0x74>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a0d      	ldr	r2, [pc, #52]	@ (800cc48 <mem_init+0x84>)
 800cc12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cc14:	480d      	ldr	r0, [pc, #52]	@ (800cc4c <mem_init+0x88>)
 800cc16:	f001 fddb 	bl	800e7d0 <sys_mutex_new>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d006      	beq.n	800cc2e <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cc20:	4b0b      	ldr	r3, [pc, #44]	@ (800cc50 <mem_init+0x8c>)
 800cc22:	f240 221f 	movw	r2, #543	@ 0x21f
 800cc26:	490b      	ldr	r1, [pc, #44]	@ (800cc54 <mem_init+0x90>)
 800cc28:	480b      	ldr	r0, [pc, #44]	@ (800cc58 <mem_init+0x94>)
 800cc2a:	f007 fd81 	bl	8014730 <iprintf>
  }
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	24008e84 	.word	0x24008e84
 800cc3c:	30020000 	.word	0x30020000
 800cc40:	0001ffe8 	.word	0x0001ffe8
 800cc44:	24008e88 	.word	0x24008e88
 800cc48:	24008e90 	.word	0x24008e90
 800cc4c:	24008e8c 	.word	0x24008e8c
 800cc50:	08015e80 	.word	0x08015e80
 800cc54:	08015f80 	.word	0x08015f80
 800cc58:	08015ef4 	.word	0x08015ef4

0800cc5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fef9 	bl	800ca5c <mem_to_ptr>
 800cc6a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff fee3 	bl	800ca3c <ptr_to_mem>
 800cc76:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fedd 	bl	800ca3c <ptr_to_mem>
 800cc82:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a11      	ldr	r2, [pc, #68]	@ (800ccd0 <mem_link_valid+0x74>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d818      	bhi.n	800ccc0 <mem_link_valid+0x64>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4a0f      	ldr	r2, [pc, #60]	@ (800ccd0 <mem_link_valid+0x74>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d813      	bhi.n	800ccc0 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d004      	beq.n	800ccac <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d109      	bne.n	800ccc0 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ccac:	4b09      	ldr	r3, [pc, #36]	@ (800ccd4 <mem_link_valid+0x78>)
 800ccae:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d006      	beq.n	800ccc4 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d001      	beq.n	800ccc4 <mem_link_valid+0x68>
    return 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e000      	b.n	800ccc6 <mem_link_valid+0x6a>
  }
  return 1;
 800ccc4:	2301      	movs	r3, #1
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	0001ffe8 	.word	0x0001ffe8
 800ccd4:	24008e88 	.word	0x24008e88

0800ccd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b088      	sub	sp, #32
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d070      	beq.n	800cdc8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00d      	beq.n	800cd0c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ccf0:	4b37      	ldr	r3, [pc, #220]	@ (800cdd0 <mem_free+0xf8>)
 800ccf2:	f240 2273 	movw	r2, #627	@ 0x273
 800ccf6:	4937      	ldr	r1, [pc, #220]	@ (800cdd4 <mem_free+0xfc>)
 800ccf8:	4837      	ldr	r0, [pc, #220]	@ (800cdd8 <mem_free+0x100>)
 800ccfa:	f007 fd19 	bl	8014730 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ccfe:	f001 fdc5 	bl	800e88c <sys_arch_protect>
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f001 fdcf 	bl	800e8a8 <sys_arch_unprotect>
    return;
 800cd0a:	e05e      	b.n	800cdca <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3b0c      	subs	r3, #12
 800cd10:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cd12:	4b32      	ldr	r3, [pc, #200]	@ (800cddc <mem_free+0x104>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d306      	bcc.n	800cd2a <mem_free+0x52>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f103 020c 	add.w	r2, r3, #12
 800cd22:	4b2f      	ldr	r3, [pc, #188]	@ (800cde0 <mem_free+0x108>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d90d      	bls.n	800cd46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cd2a:	4b29      	ldr	r3, [pc, #164]	@ (800cdd0 <mem_free+0xf8>)
 800cd2c:	f240 227f 	movw	r2, #639	@ 0x27f
 800cd30:	492c      	ldr	r1, [pc, #176]	@ (800cde4 <mem_free+0x10c>)
 800cd32:	4829      	ldr	r0, [pc, #164]	@ (800cdd8 <mem_free+0x100>)
 800cd34:	f007 fcfc 	bl	8014730 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd38:	f001 fda8 	bl	800e88c <sys_arch_protect>
 800cd3c:	6138      	str	r0, [r7, #16]
 800cd3e:	6938      	ldr	r0, [r7, #16]
 800cd40:	f001 fdb2 	bl	800e8a8 <sys_arch_unprotect>
    return;
 800cd44:	e041      	b.n	800cdca <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd46:	4828      	ldr	r0, [pc, #160]	@ (800cde8 <mem_free+0x110>)
 800cd48:	f001 fd5e 	bl	800e808 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	7a1b      	ldrb	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d110      	bne.n	800cd76 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cd54:	4b1e      	ldr	r3, [pc, #120]	@ (800cdd0 <mem_free+0xf8>)
 800cd56:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cd5a:	4924      	ldr	r1, [pc, #144]	@ (800cdec <mem_free+0x114>)
 800cd5c:	481e      	ldr	r0, [pc, #120]	@ (800cdd8 <mem_free+0x100>)
 800cd5e:	f007 fce7 	bl	8014730 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd62:	4821      	ldr	r0, [pc, #132]	@ (800cde8 <mem_free+0x110>)
 800cd64:	f001 fd5f 	bl	800e826 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd68:	f001 fd90 	bl	800e88c <sys_arch_protect>
 800cd6c:	6178      	str	r0, [r7, #20]
 800cd6e:	6978      	ldr	r0, [r7, #20]
 800cd70:	f001 fd9a 	bl	800e8a8 <sys_arch_unprotect>
    return;
 800cd74:	e029      	b.n	800cdca <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cd76:	69f8      	ldr	r0, [r7, #28]
 800cd78:	f7ff ff70 	bl	800cc5c <mem_link_valid>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d110      	bne.n	800cda4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd82:	4b13      	ldr	r3, [pc, #76]	@ (800cdd0 <mem_free+0xf8>)
 800cd84:	f240 2295 	movw	r2, #661	@ 0x295
 800cd88:	4919      	ldr	r1, [pc, #100]	@ (800cdf0 <mem_free+0x118>)
 800cd8a:	4813      	ldr	r0, [pc, #76]	@ (800cdd8 <mem_free+0x100>)
 800cd8c:	f007 fcd0 	bl	8014730 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd90:	4815      	ldr	r0, [pc, #84]	@ (800cde8 <mem_free+0x110>)
 800cd92:	f001 fd48 	bl	800e826 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd96:	f001 fd79 	bl	800e88c <sys_arch_protect>
 800cd9a:	61b8      	str	r0, [r7, #24]
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f001 fd83 	bl	800e8a8 <sys_arch_unprotect>
    return;
 800cda2:	e012      	b.n	800cdca <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2200      	movs	r2, #0
 800cda8:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800cdaa:	4b12      	ldr	r3, [pc, #72]	@ (800cdf4 <mem_free+0x11c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d202      	bcs.n	800cdba <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cdb4:	4a0f      	ldr	r2, [pc, #60]	@ (800cdf4 <mem_free+0x11c>)
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cdba:	69f8      	ldr	r0, [r7, #28]
 800cdbc:	f7ff fe5e 	bl	800ca7c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cdc0:	4809      	ldr	r0, [pc, #36]	@ (800cde8 <mem_free+0x110>)
 800cdc2:	f001 fd30 	bl	800e826 <sys_mutex_unlock>
 800cdc6:	e000      	b.n	800cdca <mem_free+0xf2>
    return;
 800cdc8:	bf00      	nop
}
 800cdca:	3720      	adds	r7, #32
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	08015e80 	.word	0x08015e80
 800cdd4:	08015f9c 	.word	0x08015f9c
 800cdd8:	08015ef4 	.word	0x08015ef4
 800cddc:	24008e84 	.word	0x24008e84
 800cde0:	24008e88 	.word	0x24008e88
 800cde4:	08015fc0 	.word	0x08015fc0
 800cde8:	24008e8c 	.word	0x24008e8c
 800cdec:	08015fdc 	.word	0x08015fdc
 800cdf0:	08016004 	.word	0x08016004
 800cdf4:	24008e90 	.word	0x24008e90

0800cdf8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	3303      	adds	r3, #3
 800ce06:	f023 0303 	bic.w	r3, r3, #3
 800ce0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	2b0b      	cmp	r3, #11
 800ce10:	d801      	bhi.n	800ce16 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ce12:	230c      	movs	r3, #12
 800ce14:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	4a6e      	ldr	r2, [pc, #440]	@ (800cfd4 <mem_trim+0x1dc>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d803      	bhi.n	800ce26 <mem_trim+0x2e>
 800ce1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d201      	bcs.n	800ce2a <mem_trim+0x32>
    return NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	e0d0      	b.n	800cfcc <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ce2a:	4b6b      	ldr	r3, [pc, #428]	@ (800cfd8 <mem_trim+0x1e0>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d304      	bcc.n	800ce3e <mem_trim+0x46>
 800ce34:	4b69      	ldr	r3, [pc, #420]	@ (800cfdc <mem_trim+0x1e4>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d306      	bcc.n	800ce4c <mem_trim+0x54>
 800ce3e:	4b68      	ldr	r3, [pc, #416]	@ (800cfe0 <mem_trim+0x1e8>)
 800ce40:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ce44:	4967      	ldr	r1, [pc, #412]	@ (800cfe4 <mem_trim+0x1ec>)
 800ce46:	4868      	ldr	r0, [pc, #416]	@ (800cfe8 <mem_trim+0x1f0>)
 800ce48:	f007 fc72 	bl	8014730 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ce4c:	4b62      	ldr	r3, [pc, #392]	@ (800cfd8 <mem_trim+0x1e0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d304      	bcc.n	800ce60 <mem_trim+0x68>
 800ce56:	4b61      	ldr	r3, [pc, #388]	@ (800cfdc <mem_trim+0x1e4>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d307      	bcc.n	800ce70 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce60:	f001 fd14 	bl	800e88c <sys_arch_protect>
 800ce64:	60b8      	str	r0, [r7, #8]
 800ce66:	68b8      	ldr	r0, [r7, #8]
 800ce68:	f001 fd1e 	bl	800e8a8 <sys_arch_unprotect>
    return rmem;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	e0ad      	b.n	800cfcc <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3b0c      	subs	r3, #12
 800ce74:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce76:	6a38      	ldr	r0, [r7, #32]
 800ce78:	f7ff fdf0 	bl	800ca5c <mem_to_ptr>
 800ce7c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	3b0c      	subs	r3, #12
 800ce88:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d906      	bls.n	800cea0 <mem_trim+0xa8>
 800ce92:	4b53      	ldr	r3, [pc, #332]	@ (800cfe0 <mem_trim+0x1e8>)
 800ce94:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ce98:	4954      	ldr	r1, [pc, #336]	@ (800cfec <mem_trim+0x1f4>)
 800ce9a:	4853      	ldr	r0, [pc, #332]	@ (800cfe8 <mem_trim+0x1f0>)
 800ce9c:	f007 fc48 	bl	8014730 <iprintf>
  if (newsize > size) {
 800cea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d901      	bls.n	800ceac <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	e08f      	b.n	800cfcc <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800ceac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d101      	bne.n	800ceb8 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	e089      	b.n	800cfcc <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ceb8:	484d      	ldr	r0, [pc, #308]	@ (800cff0 <mem_trim+0x1f8>)
 800ceba:	f001 fca5 	bl	800e808 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fdba 	bl	800ca3c <ptr_to_mem>
 800cec8:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	7a1b      	ldrb	r3, [r3, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d13c      	bne.n	800cf4c <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a3f      	ldr	r2, [pc, #252]	@ (800cfd4 <mem_trim+0x1dc>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d106      	bne.n	800ceea <mem_trim+0xf2>
 800cedc:	4b40      	ldr	r3, [pc, #256]	@ (800cfe0 <mem_trim+0x1e8>)
 800cede:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cee2:	4944      	ldr	r1, [pc, #272]	@ (800cff4 <mem_trim+0x1fc>)
 800cee4:	4840      	ldr	r0, [pc, #256]	@ (800cfe8 <mem_trim+0x1f0>)
 800cee6:	f007 fc23 	bl	8014730 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cef0:	69fa      	ldr	r2, [r7, #28]
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	4413      	add	r3, r2
 800cef6:	330c      	adds	r3, #12
 800cef8:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800cefa:	4b3f      	ldr	r3, [pc, #252]	@ (800cff8 <mem_trim+0x200>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d105      	bne.n	800cf10 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800cf04:	6938      	ldr	r0, [r7, #16]
 800cf06:	f7ff fd99 	bl	800ca3c <ptr_to_mem>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	4a3a      	ldr	r2, [pc, #232]	@ (800cff8 <mem_trim+0x200>)
 800cf0e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cf10:	6938      	ldr	r0, [r7, #16]
 800cf12:	f7ff fd93 	bl	800ca3c <ptr_to_mem>
 800cf16:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	69fa      	ldr	r2, [r7, #28]
 800cf28:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	693a      	ldr	r2, [r7, #16]
 800cf2e:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a27      	ldr	r2, [pc, #156]	@ (800cfd4 <mem_trim+0x1dc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d044      	beq.n	800cfc4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fd7c 	bl	800ca3c <ptr_to_mem>
 800cf44:	4602      	mov	r2, r0
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6053      	str	r3, [r2, #4]
 800cf4a:	e03b      	b.n	800cfc4 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	3318      	adds	r3, #24
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d336      	bcc.n	800cfc4 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cf56:	69fa      	ldr	r2, [r7, #28]
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	4413      	add	r3, r2
 800cf5c:	330c      	adds	r3, #12
 800cf5e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cf60:	6a3b      	ldr	r3, [r7, #32]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a1b      	ldr	r2, [pc, #108]	@ (800cfd4 <mem_trim+0x1dc>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d106      	bne.n	800cf78 <mem_trim+0x180>
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe0 <mem_trim+0x1e8>)
 800cf6c:	f240 3216 	movw	r2, #790	@ 0x316
 800cf70:	4920      	ldr	r1, [pc, #128]	@ (800cff4 <mem_trim+0x1fc>)
 800cf72:	481d      	ldr	r0, [pc, #116]	@ (800cfe8 <mem_trim+0x1f0>)
 800cf74:	f007 fbdc 	bl	8014730 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf78:	6938      	ldr	r0, [r7, #16]
 800cf7a:	f7ff fd5f 	bl	800ca3c <ptr_to_mem>
 800cf7e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800cf80:	4b1d      	ldr	r3, [pc, #116]	@ (800cff8 <mem_trim+0x200>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d202      	bcs.n	800cf90 <mem_trim+0x198>
      lfree = mem2;
 800cf8a:	4a1b      	ldr	r2, [pc, #108]	@ (800cff8 <mem_trim+0x200>)
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2200      	movs	r2, #0
 800cf94:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	69fa      	ldr	r2, [r7, #28]
 800cfa2:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a09      	ldr	r2, [pc, #36]	@ (800cfd4 <mem_trim+0x1dc>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d007      	beq.n	800cfc4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fd3f 	bl	800ca3c <ptr_to_mem>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cfc4:	480a      	ldr	r0, [pc, #40]	@ (800cff0 <mem_trim+0x1f8>)
 800cfc6:	f001 fc2e 	bl	800e826 <sys_mutex_unlock>
  return rmem;
 800cfca:	687b      	ldr	r3, [r7, #4]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3728      	adds	r7, #40	@ 0x28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	0001ffe8 	.word	0x0001ffe8
 800cfd8:	24008e84 	.word	0x24008e84
 800cfdc:	24008e88 	.word	0x24008e88
 800cfe0:	08015e80 	.word	0x08015e80
 800cfe4:	08016038 	.word	0x08016038
 800cfe8:	08015ef4 	.word	0x08015ef4
 800cfec:	08016050 	.word	0x08016050
 800cff0:	24008e8c 	.word	0x24008e8c
 800cff4:	08016070 	.word	0x08016070
 800cff8:	24008e90 	.word	0x24008e90

0800cffc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <mem_malloc+0x12>
    return NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	e0d9      	b.n	800d1c2 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3303      	adds	r3, #3
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	2b0b      	cmp	r3, #11
 800d01c:	d801      	bhi.n	800d022 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d01e:	230c      	movs	r3, #12
 800d020:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	4a69      	ldr	r2, [pc, #420]	@ (800d1cc <mem_malloc+0x1d0>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d803      	bhi.n	800d032 <mem_malloc+0x36>
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d201      	bcs.n	800d036 <mem_malloc+0x3a>
    return NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	e0c5      	b.n	800d1c2 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d036:	4866      	ldr	r0, [pc, #408]	@ (800d1d0 <mem_malloc+0x1d4>)
 800d038:	f001 fbe6 	bl	800e808 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d03c:	4b65      	ldr	r3, [pc, #404]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff fd0b 	bl	800ca5c <mem_to_ptr>
 800d046:	61f8      	str	r0, [r7, #28]
 800d048:	e0b0      	b.n	800d1ac <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d04a:	69f8      	ldr	r0, [r7, #28]
 800d04c:	f7ff fcf6 	bl	800ca3c <ptr_to_mem>
 800d050:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	7a1b      	ldrb	r3, [r3, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f040 80a2 	bne.w	800d1a0 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	429a      	cmp	r2, r3
 800d06a:	f200 8099 	bhi.w	800d1a0 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	f1a3 020c 	sub.w	r2, r3, #12
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	3318      	adds	r3, #24
 800d07e:	429a      	cmp	r2, r3
 800d080:	d331      	bcc.n	800d0e6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	4413      	add	r3, r2
 800d088:	330c      	adds	r3, #12
 800d08a:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4a4f      	ldr	r2, [pc, #316]	@ (800d1cc <mem_malloc+0x1d0>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d106      	bne.n	800d0a2 <mem_malloc+0xa6>
 800d094:	4b50      	ldr	r3, [pc, #320]	@ (800d1d8 <mem_malloc+0x1dc>)
 800d096:	f240 3287 	movw	r2, #903	@ 0x387
 800d09a:	4950      	ldr	r1, [pc, #320]	@ (800d1dc <mem_malloc+0x1e0>)
 800d09c:	4850      	ldr	r0, [pc, #320]	@ (800d1e0 <mem_malloc+0x1e4>)
 800d09e:	f007 fb47 	bl	8014730 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f7ff fcca 	bl	800ca3c <ptr_to_mem>
 800d0a8:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a3f      	ldr	r2, [pc, #252]	@ (800d1cc <mem_malloc+0x1d0>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d00b      	beq.n	800d0ec <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff fcaf 	bl	800ca3c <ptr_to_mem>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6053      	str	r3, [r2, #4]
 800d0e4:	e002      	b.n	800d0ec <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d0ec:	4b39      	ldr	r3, [pc, #228]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d127      	bne.n	800d146 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800d0f6:	4b37      	ldr	r3, [pc, #220]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d0fc:	e005      	b.n	800d10a <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fc9a 	bl	800ca3c <ptr_to_mem>
 800d108:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	7a1b      	ldrb	r3, [r3, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d004      	beq.n	800d11c <mem_malloc+0x120>
 800d112:	4b34      	ldr	r3, [pc, #208]	@ (800d1e4 <mem_malloc+0x1e8>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d1f0      	bne.n	800d0fe <mem_malloc+0x102>
          }
          lfree = cur;
 800d11c:	4a2d      	ldr	r2, [pc, #180]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d122:	4b2c      	ldr	r3, [pc, #176]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	4b2f      	ldr	r3, [pc, #188]	@ (800d1e4 <mem_malloc+0x1e8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d00b      	beq.n	800d146 <mem_malloc+0x14a>
 800d12e:	4b29      	ldr	r3, [pc, #164]	@ (800d1d4 <mem_malloc+0x1d8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	7a1b      	ldrb	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d006      	beq.n	800d146 <mem_malloc+0x14a>
 800d138:	4b27      	ldr	r3, [pc, #156]	@ (800d1d8 <mem_malloc+0x1dc>)
 800d13a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d13e:	492a      	ldr	r1, [pc, #168]	@ (800d1e8 <mem_malloc+0x1ec>)
 800d140:	4827      	ldr	r0, [pc, #156]	@ (800d1e0 <mem_malloc+0x1e4>)
 800d142:	f007 faf5 	bl	8014730 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d146:	4822      	ldr	r0, [pc, #136]	@ (800d1d0 <mem_malloc+0x1d4>)
 800d148:	f001 fb6d 	bl	800e826 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	4413      	add	r3, r2
 800d152:	330c      	adds	r3, #12
 800d154:	4a23      	ldr	r2, [pc, #140]	@ (800d1e4 <mem_malloc+0x1e8>)
 800d156:	6812      	ldr	r2, [r2, #0]
 800d158:	4293      	cmp	r3, r2
 800d15a:	d906      	bls.n	800d16a <mem_malloc+0x16e>
 800d15c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1d8 <mem_malloc+0x1dc>)
 800d15e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d162:	4922      	ldr	r1, [pc, #136]	@ (800d1ec <mem_malloc+0x1f0>)
 800d164:	481e      	ldr	r0, [pc, #120]	@ (800d1e0 <mem_malloc+0x1e4>)
 800d166:	f007 fae3 	bl	8014730 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	f003 0303 	and.w	r3, r3, #3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d006      	beq.n	800d182 <mem_malloc+0x186>
 800d174:	4b18      	ldr	r3, [pc, #96]	@ (800d1d8 <mem_malloc+0x1dc>)
 800d176:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d17a:	491d      	ldr	r1, [pc, #116]	@ (800d1f0 <mem_malloc+0x1f4>)
 800d17c:	4818      	ldr	r0, [pc, #96]	@ (800d1e0 <mem_malloc+0x1e4>)
 800d17e:	f007 fad7 	bl	8014730 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f003 0303 	and.w	r3, r3, #3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d006      	beq.n	800d19a <mem_malloc+0x19e>
 800d18c:	4b12      	ldr	r3, [pc, #72]	@ (800d1d8 <mem_malloc+0x1dc>)
 800d18e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d192:	4918      	ldr	r1, [pc, #96]	@ (800d1f4 <mem_malloc+0x1f8>)
 800d194:	4812      	ldr	r0, [pc, #72]	@ (800d1e0 <mem_malloc+0x1e4>)
 800d196:	f007 facb 	bl	8014730 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	330c      	adds	r3, #12
 800d19e:	e010      	b.n	800d1c2 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800d1a0:	69f8      	ldr	r0, [r7, #28]
 800d1a2:	f7ff fc4b 	bl	800ca3c <ptr_to_mem>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	4b07      	ldr	r3, [pc, #28]	@ (800d1cc <mem_malloc+0x1d0>)
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	f4ff af48 	bcc.w	800d04a <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d1ba:	4805      	ldr	r0, [pc, #20]	@ (800d1d0 <mem_malloc+0x1d4>)
 800d1bc:	f001 fb33 	bl	800e826 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3720      	adds	r7, #32
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	0001ffe8 	.word	0x0001ffe8
 800d1d0:	24008e8c 	.word	0x24008e8c
 800d1d4:	24008e90 	.word	0x24008e90
 800d1d8:	08015e80 	.word	0x08015e80
 800d1dc:	08016070 	.word	0x08016070
 800d1e0:	08015ef4 	.word	0x08015ef4
 800d1e4:	24008e88 	.word	0x24008e88
 800d1e8:	08016084 	.word	0x08016084
 800d1ec:	080160a0 	.word	0x080160a0
 800d1f0:	080160d0 	.word	0x080160d0
 800d1f4:	08016100 	.word	0x08016100

0800d1f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	3303      	adds	r3, #3
 800d20e:	f023 0303 	bic.w	r3, r3, #3
 800d212:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d214:	2300      	movs	r3, #0
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	e011      	b.n	800d23e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	4413      	add	r3, r2
 800d236:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	3301      	adds	r3, #1
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	885b      	ldrh	r3, [r3, #2]
 800d242:	461a      	mov	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4293      	cmp	r3, r2
 800d248:	dbe7      	blt.n	800d21a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	3714      	adds	r7, #20
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d25e:	2300      	movs	r3, #0
 800d260:	80fb      	strh	r3, [r7, #6]
 800d262:	e009      	b.n	800d278 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d264:	88fb      	ldrh	r3, [r7, #6]
 800d266:	4a08      	ldr	r2, [pc, #32]	@ (800d288 <memp_init+0x30>)
 800d268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff ffc3 	bl	800d1f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d272:	88fb      	ldrh	r3, [r7, #6]
 800d274:	3301      	adds	r3, #1
 800d276:	80fb      	strh	r3, [r7, #6]
 800d278:	88fb      	ldrh	r3, [r7, #6]
 800d27a:	2b0c      	cmp	r3, #12
 800d27c:	d9f2      	bls.n	800d264 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	080184ec 	.word	0x080184ec

0800d28c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d294:	f001 fafa 	bl	800e88c <sys_arch_protect>
 800d298:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d015      	beq.n	800d2d4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <do_memp_malloc_pool+0x3e>
 800d2bc:	4b09      	ldr	r3, [pc, #36]	@ (800d2e4 <do_memp_malloc_pool+0x58>)
 800d2be:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d2c2:	4909      	ldr	r1, [pc, #36]	@ (800d2e8 <do_memp_malloc_pool+0x5c>)
 800d2c4:	4809      	ldr	r0, [pc, #36]	@ (800d2ec <do_memp_malloc_pool+0x60>)
 800d2c6:	f007 fa33 	bl	8014730 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f001 faec 	bl	800e8a8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	e003      	b.n	800d2dc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f001 fae7 	bl	800e8a8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08016124 	.word	0x08016124
 800d2e8:	08016180 	.word	0x08016180
 800d2ec:	080161a4 	.word	0x080161a4

0800d2f0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <memp_malloc_pool+0x1c>
 800d2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d328 <memp_malloc_pool+0x38>)
 800d300:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d304:	4909      	ldr	r1, [pc, #36]	@ (800d32c <memp_malloc_pool+0x3c>)
 800d306:	480a      	ldr	r0, [pc, #40]	@ (800d330 <memp_malloc_pool+0x40>)
 800d308:	f007 fa12 	bl	8014730 <iprintf>
  if (desc == NULL) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <memp_malloc_pool+0x26>
    return NULL;
 800d312:	2300      	movs	r3, #0
 800d314:	e003      	b.n	800d31e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff ffb8 	bl	800d28c <do_memp_malloc_pool>
 800d31c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	08016124 	.word	0x08016124
 800d32c:	080161cc 	.word	0x080161cc
 800d330:	080161a4 	.word	0x080161a4

0800d334 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b0c      	cmp	r3, #12
 800d342:	d908      	bls.n	800d356 <memp_malloc+0x22>
 800d344:	4b0a      	ldr	r3, [pc, #40]	@ (800d370 <memp_malloc+0x3c>)
 800d346:	f240 1257 	movw	r2, #343	@ 0x157
 800d34a:	490a      	ldr	r1, [pc, #40]	@ (800d374 <memp_malloc+0x40>)
 800d34c:	480a      	ldr	r0, [pc, #40]	@ (800d378 <memp_malloc+0x44>)
 800d34e:	f007 f9ef 	bl	8014730 <iprintf>
 800d352:	2300      	movs	r3, #0
 800d354:	e008      	b.n	800d368 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d356:	79fb      	ldrb	r3, [r7, #7]
 800d358:	4a08      	ldr	r2, [pc, #32]	@ (800d37c <memp_malloc+0x48>)
 800d35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff ff94 	bl	800d28c <do_memp_malloc_pool>
 800d364:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d366:	68fb      	ldr	r3, [r7, #12]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	08016124 	.word	0x08016124
 800d374:	080161e0 	.word	0x080161e0
 800d378:	080161a4 	.word	0x080161a4
 800d37c:	080184ec 	.word	0x080184ec

0800d380 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	f003 0303 	and.w	r3, r3, #3
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <do_memp_free_pool+0x22>
 800d394:	4b0d      	ldr	r3, [pc, #52]	@ (800d3cc <do_memp_free_pool+0x4c>)
 800d396:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d39a:	490d      	ldr	r1, [pc, #52]	@ (800d3d0 <do_memp_free_pool+0x50>)
 800d39c:	480d      	ldr	r0, [pc, #52]	@ (800d3d4 <do_memp_free_pool+0x54>)
 800d39e:	f007 f9c7 	bl	8014730 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d3a6:	f001 fa71 	bl	800e88c <sys_arch_protect>
 800d3aa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d3be:	68b8      	ldr	r0, [r7, #8]
 800d3c0:	f001 fa72 	bl	800e8a8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d3c4:	bf00      	nop
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	08016124 	.word	0x08016124
 800d3d0:	08016200 	.word	0x08016200
 800d3d4:	080161a4 	.word	0x080161a4

0800d3d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <memp_free_pool+0x1e>
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d414 <memp_free_pool+0x3c>)
 800d3ea:	f240 1295 	movw	r2, #405	@ 0x195
 800d3ee:	490a      	ldr	r1, [pc, #40]	@ (800d418 <memp_free_pool+0x40>)
 800d3f0:	480a      	ldr	r0, [pc, #40]	@ (800d41c <memp_free_pool+0x44>)
 800d3f2:	f007 f99d 	bl	8014730 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d007      	beq.n	800d40c <memp_free_pool+0x34>
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d004      	beq.n	800d40c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff ffbb 	bl	800d380 <do_memp_free_pool>
 800d40a:	e000      	b.n	800d40e <memp_free_pool+0x36>
    return;
 800d40c:	bf00      	nop
}
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	08016124 	.word	0x08016124
 800d418:	080161cc 	.word	0x080161cc
 800d41c:	080161a4 	.word	0x080161a4

0800d420 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	6039      	str	r1, [r7, #0]
 800d42a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	2b0c      	cmp	r3, #12
 800d430:	d907      	bls.n	800d442 <memp_free+0x22>
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <memp_free+0x44>)
 800d434:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d438:	490b      	ldr	r1, [pc, #44]	@ (800d468 <memp_free+0x48>)
 800d43a:	480c      	ldr	r0, [pc, #48]	@ (800d46c <memp_free+0x4c>)
 800d43c:	f007 f978 	bl	8014730 <iprintf>
 800d440:	e00c      	b.n	800d45c <memp_free+0x3c>

  if (mem == NULL) {
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d008      	beq.n	800d45a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	4a09      	ldr	r2, [pc, #36]	@ (800d470 <memp_free+0x50>)
 800d44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff ff94 	bl	800d380 <do_memp_free_pool>
 800d458:	e000      	b.n	800d45c <memp_free+0x3c>
    return;
 800d45a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	08016124 	.word	0x08016124
 800d468:	08016220 	.word	0x08016220
 800d46c:	080161a4 	.word	0x080161a4
 800d470:	080184ec 	.word	0x080184ec

0800d474 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d474:	b480      	push	{r7}
 800d476:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d478:	bf00      	nop
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
	...

0800d484 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d108      	bne.n	800d4aa <netif_add+0x26>
 800d498:	4b57      	ldr	r3, [pc, #348]	@ (800d5f8 <netif_add+0x174>)
 800d49a:	f240 1227 	movw	r2, #295	@ 0x127
 800d49e:	4957      	ldr	r1, [pc, #348]	@ (800d5fc <netif_add+0x178>)
 800d4a0:	4857      	ldr	r0, [pc, #348]	@ (800d600 <netif_add+0x17c>)
 800d4a2:	f007 f945 	bl	8014730 <iprintf>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e0a2      	b.n	800d5f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d108      	bne.n	800d4c2 <netif_add+0x3e>
 800d4b0:	4b51      	ldr	r3, [pc, #324]	@ (800d5f8 <netif_add+0x174>)
 800d4b2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d4b6:	4953      	ldr	r1, [pc, #332]	@ (800d604 <netif_add+0x180>)
 800d4b8:	4851      	ldr	r0, [pc, #324]	@ (800d600 <netif_add+0x17c>)
 800d4ba:	f007 f939 	bl	8014730 <iprintf>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e096      	b.n	800d5f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d4c8:	4b4f      	ldr	r3, [pc, #316]	@ (800d608 <netif_add+0x184>)
 800d4ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d4d2:	4b4d      	ldr	r3, [pc, #308]	@ (800d608 <netif_add+0x184>)
 800d4d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d4dc:	4b4a      	ldr	r3, [pc, #296]	@ (800d608 <netif_add+0x184>)
 800d4de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	4a45      	ldr	r2, [pc, #276]	@ (800d60c <netif_add+0x188>)
 800d4f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6a3a      	ldr	r2, [r7, #32]
 800d510:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d512:	4b3f      	ldr	r3, [pc, #252]	@ (800d610 <netif_add+0x18c>)
 800d514:	781a      	ldrb	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d520:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 f913 	bl	800d754 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	4798      	blx	r3
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <netif_add+0xba>
    return NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e058      	b.n	800d5f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d544:	2bff      	cmp	r3, #255	@ 0xff
 800d546:	d103      	bne.n	800d550 <netif_add+0xcc>
        netif->num = 0;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d554:	4b2f      	ldr	r3, [pc, #188]	@ (800d614 <netif_add+0x190>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	e02b      	b.n	800d5b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	429a      	cmp	r2, r3
 800d562:	d106      	bne.n	800d572 <netif_add+0xee>
 800d564:	4b24      	ldr	r3, [pc, #144]	@ (800d5f8 <netif_add+0x174>)
 800d566:	f240 128b 	movw	r2, #395	@ 0x18b
 800d56a:	492b      	ldr	r1, [pc, #172]	@ (800d618 <netif_add+0x194>)
 800d56c:	4824      	ldr	r0, [pc, #144]	@ (800d600 <netif_add+0x17c>)
 800d56e:	f007 f8df 	bl	8014730 <iprintf>
        num_netifs++;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	3301      	adds	r3, #1
 800d576:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2bff      	cmp	r3, #255	@ 0xff
 800d57c:	dd06      	ble.n	800d58c <netif_add+0x108>
 800d57e:	4b1e      	ldr	r3, [pc, #120]	@ (800d5f8 <netif_add+0x174>)
 800d580:	f240 128d 	movw	r2, #397	@ 0x18d
 800d584:	4925      	ldr	r1, [pc, #148]	@ (800d61c <netif_add+0x198>)
 800d586:	481e      	ldr	r0, [pc, #120]	@ (800d600 <netif_add+0x17c>)
 800d588:	f007 f8d2 	bl	8014730 <iprintf>
        if (netif2->num == netif->num) {
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d598:	429a      	cmp	r2, r3
 800d59a:	d108      	bne.n	800d5ae <netif_add+0x12a>
          netif->num++;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d5ac:	e005      	b.n	800d5ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1d0      	bne.n	800d55c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1be      	bne.n	800d53e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d5c8:	d103      	bne.n	800d5d2 <netif_add+0x14e>
    netif_num = 0;
 800d5ca:	4b11      	ldr	r3, [pc, #68]	@ (800d610 <netif_add+0x18c>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	e006      	b.n	800d5e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5d8:	3301      	adds	r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <netif_add+0x18c>)
 800d5de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d614 <netif_add+0x190>)
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d5e8:	4a0a      	ldr	r2, [pc, #40]	@ (800d614 <netif_add+0x190>)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	0801623c 	.word	0x0801623c
 800d5fc:	080162fc 	.word	0x080162fc
 800d600:	080162b8 	.word	0x080162b8
 800d604:	08016318 	.word	0x08016318
 800d608:	0801844c 	.word	0x0801844c
 800d60c:	0800da2f 	.word	0x0800da2f
 800d610:	2400f928 	.word	0x2400f928
 800d614:	2400f920 	.word	0x2400f920
 800d618:	0801633c 	.word	0x0801633c
 800d61c:	08016350 	.word	0x08016350

0800d620 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f002 fc99 	bl	800ff64 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f006 ff4b 	bl	80144d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d63a:	bf00      	nop
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <netif_do_set_ipaddr+0x20>
 800d656:	4b1d      	ldr	r3, [pc, #116]	@ (800d6cc <netif_do_set_ipaddr+0x88>)
 800d658:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d65c:	491c      	ldr	r1, [pc, #112]	@ (800d6d0 <netif_do_set_ipaddr+0x8c>)
 800d65e:	481d      	ldr	r0, [pc, #116]	@ (800d6d4 <netif_do_set_ipaddr+0x90>)
 800d660:	f007 f866 	bl	8014730 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d106      	bne.n	800d678 <netif_do_set_ipaddr+0x34>
 800d66a:	4b18      	ldr	r3, [pc, #96]	@ (800d6cc <netif_do_set_ipaddr+0x88>)
 800d66c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d670:	4917      	ldr	r1, [pc, #92]	@ (800d6d0 <netif_do_set_ipaddr+0x8c>)
 800d672:	4818      	ldr	r0, [pc, #96]	@ (800d6d4 <netif_do_set_ipaddr+0x90>)
 800d674:	f007 f85c 	bl	8014730 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3304      	adds	r3, #4
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d01c      	beq.n	800d6c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3304      	adds	r3, #4
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d696:	f107 0314 	add.w	r3, r7, #20
 800d69a:	4619      	mov	r1, r3
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff ffbf 	bl	800d620 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <netif_do_set_ipaddr+0x6a>
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	e000      	b.n	800d6b0 <netif_do_set_ipaddr+0x6c>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 f8d2 	bl	800d860 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e000      	b.n	800d6c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3718      	adds	r7, #24
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	0801623c 	.word	0x0801623c
 800d6d0:	08016380 	.word	0x08016380
 800d6d4:	080162b8 	.word	0x080162b8

0800d6d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d00a      	beq.n	800d708 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <netif_do_set_netmask+0x26>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	e000      	b.n	800d700 <netif_do_set_netmask+0x28>
 800d6fe:	2300      	movs	r3, #0
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d716:	b480      	push	{r7}
 800d718:	b085      	sub	sp, #20
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	60f8      	str	r0, [r7, #12]
 800d71e:	60b9      	str	r1, [r7, #8]
 800d720:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	330c      	adds	r3, #12
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d00a      	beq.n	800d746 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <netif_do_set_gw+0x26>
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	e000      	b.n	800d73e <netif_do_set_gw+0x28>
 800d73c:	2300      	movs	r3, #0
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d742:	2301      	movs	r3, #1
 800d744:	e000      	b.n	800d748 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d101      	bne.n	800d774 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d770:	4b1c      	ldr	r3, [pc, #112]	@ (800d7e4 <netif_set_addr+0x90>)
 800d772:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d77a:	4b1a      	ldr	r3, [pc, #104]	@ (800d7e4 <netif_set_addr+0x90>)
 800d77c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d784:	4b17      	ldr	r3, [pc, #92]	@ (800d7e4 <netif_set_addr+0x90>)
 800d786:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <netif_set_addr+0x42>
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <netif_set_addr+0x46>
 800d796:	2301      	movs	r3, #1
 800d798:	e000      	b.n	800d79c <netif_set_addr+0x48>
 800d79a:	2300      	movs	r3, #0
 800d79c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d006      	beq.n	800d7b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d7a4:	f107 0310 	add.w	r3, r7, #16
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	68b9      	ldr	r1, [r7, #8]
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff ff49 	bl	800d644 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff ff8e 	bl	800d6d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f7ff ffa8 	bl	800d716 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d7cc:	f107 0310 	add.w	r3, r7, #16
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	68b9      	ldr	r1, [r7, #8]
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7ff ff35 	bl	800d644 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d7da:	bf00      	nop
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	0801844c 	.word	0x0801844c

0800d7e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d7f0:	4a04      	ldr	r2, [pc, #16]	@ (800d804 <netif_set_default+0x1c>)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d7f6:	bf00      	nop
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	2400f924 	.word	0x2400f924

0800d808 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d107      	bne.n	800d826 <netif_set_up+0x1e>
 800d816:	4b0f      	ldr	r3, [pc, #60]	@ (800d854 <netif_set_up+0x4c>)
 800d818:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d81c:	490e      	ldr	r1, [pc, #56]	@ (800d858 <netif_set_up+0x50>)
 800d81e:	480f      	ldr	r0, [pc, #60]	@ (800d85c <netif_set_up+0x54>)
 800d820:	f006 ff86 	bl	8014730 <iprintf>
 800d824:	e013      	b.n	800d84e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10c      	bne.n	800d84e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d83a:	f043 0301 	orr.w	r3, r3, #1
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d846:	2103      	movs	r1, #3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f809 	bl	800d860 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	0801623c 	.word	0x0801623c
 800d858:	080163f0 	.word	0x080163f0
 800d85c:	080162b8 	.word	0x080162b8

0800d860 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <netif_issue_reports+0x20>
 800d872:	4b18      	ldr	r3, [pc, #96]	@ (800d8d4 <netif_issue_reports+0x74>)
 800d874:	f240 326d 	movw	r2, #877	@ 0x36d
 800d878:	4917      	ldr	r1, [pc, #92]	@ (800d8d8 <netif_issue_reports+0x78>)
 800d87a:	4818      	ldr	r0, [pc, #96]	@ (800d8dc <netif_issue_reports+0x7c>)
 800d87c:	f006 ff58 	bl	8014730 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d886:	f003 0304 	and.w	r3, r3, #4
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d01e      	beq.n	800d8cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d894:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d017      	beq.n	800d8cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d013      	beq.n	800d8ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00e      	beq.n	800d8ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8b6:	f003 0308 	and.w	r3, r3, #8
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d007      	beq.n	800d8ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7fd fc33 	bl	800b130 <etharp_request>
 800d8ca:	e000      	b.n	800d8ce <netif_issue_reports+0x6e>
    return;
 800d8cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	0801623c 	.word	0x0801623c
 800d8d8:	0801640c 	.word	0x0801640c
 800d8dc:	080162b8 	.word	0x080162b8

0800d8e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d107      	bne.n	800d8fe <netif_set_down+0x1e>
 800d8ee:	4b12      	ldr	r3, [pc, #72]	@ (800d938 <netif_set_down+0x58>)
 800d8f0:	f240 329b 	movw	r2, #923	@ 0x39b
 800d8f4:	4911      	ldr	r1, [pc, #68]	@ (800d93c <netif_set_down+0x5c>)
 800d8f6:	4812      	ldr	r0, [pc, #72]	@ (800d940 <netif_set_down+0x60>)
 800d8f8:	f006 ff1a 	bl	8014730 <iprintf>
 800d8fc:	e019      	b.n	800d932 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d912:	f023 0301 	bic.w	r3, r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7fc ffbd 	bl	800a8ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	0801623c 	.word	0x0801623c
 800d93c:	08016430 	.word	0x08016430
 800d940:	080162b8 	.word	0x080162b8

0800d944 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d107      	bne.n	800d962 <netif_set_link_up+0x1e>
 800d952:	4b13      	ldr	r3, [pc, #76]	@ (800d9a0 <netif_set_link_up+0x5c>)
 800d954:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d958:	4912      	ldr	r1, [pc, #72]	@ (800d9a4 <netif_set_link_up+0x60>)
 800d95a:	4813      	ldr	r0, [pc, #76]	@ (800d9a8 <netif_set_link_up+0x64>)
 800d95c:	f006 fee8 	bl	8014730 <iprintf>
 800d960:	e01b      	b.n	800d99a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d968:	f003 0304 	and.w	r3, r3, #4
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d114      	bne.n	800d99a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d976:	f043 0304 	orr.w	r3, r3, #4
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d982:	2103      	movs	r1, #3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ff6b 	bl	800d860 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d003      	beq.n	800d99a <netif_set_link_up+0x56>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	69db      	ldr	r3, [r3, #28]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	0801623c 	.word	0x0801623c
 800d9a4:	08016450 	.word	0x08016450
 800d9a8:	080162b8 	.word	0x080162b8

0800d9ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d107      	bne.n	800d9ca <netif_set_link_down+0x1e>
 800d9ba:	4b11      	ldr	r3, [pc, #68]	@ (800da00 <netif_set_link_down+0x54>)
 800d9bc:	f240 4206 	movw	r2, #1030	@ 0x406
 800d9c0:	4910      	ldr	r1, [pc, #64]	@ (800da04 <netif_set_link_down+0x58>)
 800d9c2:	4811      	ldr	r0, [pc, #68]	@ (800da08 <netif_set_link_down+0x5c>)
 800d9c4:	f006 feb4 	bl	8014730 <iprintf>
 800d9c8:	e017      	b.n	800d9fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9d0:	f003 0304 	and.w	r3, r3, #4
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d010      	beq.n	800d9fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d9de:	f023 0304 	bic.w	r3, r3, #4
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <netif_set_link_down+0x4e>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	0801623c 	.word	0x0801623c
 800da04:	08016474 	.word	0x08016474
 800da08:	080162b8 	.word	0x080162b8

0800da0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	61da      	str	r2, [r3, #28]
  }
}
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800da2e:	b480      	push	{r7}
 800da30:	b085      	sub	sp, #20
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	60b9      	str	r1, [r7, #8]
 800da38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800da3a:	f06f 030b 	mvn.w	r3, #11
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3714      	adds	r7, #20
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
	...

0800da4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	4603      	mov	r3, r0
 800da54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d013      	beq.n	800da84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800da5c:	4b0d      	ldr	r3, [pc, #52]	@ (800da94 <netif_get_by_index+0x48>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
 800da62:	e00c      	b.n	800da7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da6a:	3301      	adds	r3, #1
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	79fa      	ldrb	r2, [r7, #7]
 800da70:	429a      	cmp	r2, r3
 800da72:	d101      	bne.n	800da78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	e006      	b.n	800da86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1ef      	bne.n	800da64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	2400f920 	.word	0x2400f920

0800da98 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800da9e:	f000 fef5 	bl	800e88c <sys_arch_protect>
 800daa2:	6038      	str	r0, [r7, #0]
 800daa4:	4b0d      	ldr	r3, [pc, #52]	@ (800dadc <pbuf_free_ooseq+0x44>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f000 fefc 	bl	800e8a8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dab0:	4b0b      	ldr	r3, [pc, #44]	@ (800dae0 <pbuf_free_ooseq+0x48>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	607b      	str	r3, [r7, #4]
 800dab6:	e00a      	b.n	800dace <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f002 fa8d 	bl	800ffe0 <tcp_free_ooseq>
      return;
 800dac6:	e005      	b.n	800dad4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	607b      	str	r3, [r7, #4]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f1      	bne.n	800dab8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	2400f929 	.word	0x2400f929
 800dae0:	2400f93c 	.word	0x2400f93c

0800dae4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800daec:	f7ff ffd4 	bl	800da98 <pbuf_free_ooseq>
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dafe:	f000 fec5 	bl	800e88c <sys_arch_protect>
 800db02:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800db04:	4b0f      	ldr	r3, [pc, #60]	@ (800db44 <pbuf_pool_is_empty+0x4c>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800db0a:	4b0e      	ldr	r3, [pc, #56]	@ (800db44 <pbuf_pool_is_empty+0x4c>)
 800db0c:	2201      	movs	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fec9 	bl	800e8a8 <sys_arch_unprotect>

  if (!queued) {
 800db16:	78fb      	ldrb	r3, [r7, #3]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10f      	bne.n	800db3c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800db1c:	2100      	movs	r1, #0
 800db1e:	480a      	ldr	r0, [pc, #40]	@ (800db48 <pbuf_pool_is_empty+0x50>)
 800db20:	f006 f924 	bl	8013d6c <tcpip_try_callback>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d008      	beq.n	800db3c <pbuf_pool_is_empty+0x44>
 800db2a:	f000 feaf 	bl	800e88c <sys_arch_protect>
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	4b04      	ldr	r3, [pc, #16]	@ (800db44 <pbuf_pool_is_empty+0x4c>)
 800db32:	2200      	movs	r2, #0
 800db34:	701a      	strb	r2, [r3, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 feb6 	bl	800e8a8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	2400f929 	.word	0x2400f929
 800db48:	0800dae5 	.word	0x0800dae5

0800db4c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	4611      	mov	r1, r2
 800db58:	461a      	mov	r2, r3
 800db5a:	460b      	mov	r3, r1
 800db5c:	80fb      	strh	r3, [r7, #6]
 800db5e:	4613      	mov	r3, r2
 800db60:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	68ba      	ldr	r2, [r7, #8]
 800db6c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	88fa      	ldrh	r2, [r7, #6]
 800db72:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	88ba      	ldrh	r2, [r7, #4]
 800db78:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800db7a:	8b3b      	ldrh	r3, [r7, #24]
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7f3a      	ldrb	r2, [r7, #28]
 800db86:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2201      	movs	r2, #1
 800db8c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	73da      	strb	r2, [r3, #15]
}
 800db94:	bf00      	nop
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08c      	sub	sp, #48	@ 0x30
 800dba4:	af02      	add	r7, sp, #8
 800dba6:	4603      	mov	r3, r0
 800dba8:	71fb      	strb	r3, [r7, #7]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	80bb      	strh	r3, [r7, #4]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dbb6:	887b      	ldrh	r3, [r7, #2]
 800dbb8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dbbc:	f000 8082 	beq.w	800dcc4 <pbuf_alloc+0x124>
 800dbc0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dbc4:	f300 80c9 	bgt.w	800dd5a <pbuf_alloc+0x1ba>
 800dbc8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dbcc:	d010      	beq.n	800dbf0 <pbuf_alloc+0x50>
 800dbce:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dbd2:	f300 80c2 	bgt.w	800dd5a <pbuf_alloc+0x1ba>
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d002      	beq.n	800dbe0 <pbuf_alloc+0x40>
 800dbda:	2b41      	cmp	r3, #65	@ 0x41
 800dbdc:	f040 80bd 	bne.w	800dd5a <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dbe0:	887a      	ldrh	r2, [r7, #2]
 800dbe2:	88bb      	ldrh	r3, [r7, #4]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f000 f8d2 	bl	800dd90 <pbuf_alloc_reference>
 800dbec:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800dbee:	e0be      	b.n	800dd6e <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dbf8:	88bb      	ldrh	r3, [r7, #4]
 800dbfa:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dbfc:	200c      	movs	r0, #12
 800dbfe:	f7ff fb99 	bl	800d334 <memp_malloc>
 800dc02:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d109      	bne.n	800dc1e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800dc0a:	f7ff ff75 	bl	800daf8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <pbuf_alloc+0x7a>
            pbuf_free(p);
 800dc14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc16:	f000 faa7 	bl	800e168 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e0a8      	b.n	800dd70 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dc1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc20:	3303      	adds	r3, #3
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	f023 0303 	bic.w	r3, r3, #3
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800dc2e:	1a9b      	subs	r3, r3, r2
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	8b7a      	ldrh	r2, [r7, #26]
 800dc34:	4293      	cmp	r3, r2
 800dc36:	bf28      	it	cs
 800dc38:	4613      	movcs	r3, r2
 800dc3a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dc3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc3e:	3310      	adds	r3, #16
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	4413      	add	r3, r2
 800dc44:	3303      	adds	r3, #3
 800dc46:	f023 0303 	bic.w	r3, r3, #3
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	89f9      	ldrh	r1, [r7, #14]
 800dc4e:	8b7a      	ldrh	r2, [r7, #26]
 800dc50:	2300      	movs	r3, #0
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	887b      	ldrh	r3, [r7, #2]
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	6938      	ldr	r0, [r7, #16]
 800dc5e:	f7ff ff75 	bl	800db4c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	f003 0303 	and.w	r3, r3, #3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d006      	beq.n	800dc7c <pbuf_alloc+0xdc>
 800dc6e:	4b42      	ldr	r3, [pc, #264]	@ (800dd78 <pbuf_alloc+0x1d8>)
 800dc70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc74:	4941      	ldr	r1, [pc, #260]	@ (800dd7c <pbuf_alloc+0x1dc>)
 800dc76:	4842      	ldr	r0, [pc, #264]	@ (800dd80 <pbuf_alloc+0x1e0>)
 800dc78:	f006 fd5a 	bl	8014730 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dc7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc7e:	3303      	adds	r3, #3
 800dc80:	f023 0303 	bic.w	r3, r3, #3
 800dc84:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d106      	bne.n	800dc9a <pbuf_alloc+0xfa>
 800dc8c:	4b3a      	ldr	r3, [pc, #232]	@ (800dd78 <pbuf_alloc+0x1d8>)
 800dc8e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800dc92:	493c      	ldr	r1, [pc, #240]	@ (800dd84 <pbuf_alloc+0x1e4>)
 800dc94:	483a      	ldr	r0, [pc, #232]	@ (800dd80 <pbuf_alloc+0x1e0>)
 800dc96:	f006 fd4b 	bl	8014730 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca4:	e002      	b.n	800dcac <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dcb0:	8b7a      	ldrh	r2, [r7, #26]
 800dcb2:	89fb      	ldrh	r3, [r7, #14]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800dcbc:	8b7b      	ldrh	r3, [r7, #26]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d19c      	bne.n	800dbfc <pbuf_alloc+0x5c>
      break;
 800dcc2:	e054      	b.n	800dd6e <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dcc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dcc6:	3303      	adds	r3, #3
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	f023 0303 	bic.w	r3, r3, #3
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	88bb      	ldrh	r3, [r7, #4]
 800dcd2:	3303      	adds	r3, #3
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	4413      	add	r3, r2
 800dcde:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dce0:	8b3b      	ldrh	r3, [r7, #24]
 800dce2:	3310      	adds	r3, #16
 800dce4:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dce6:	8b3a      	ldrh	r2, [r7, #24]
 800dce8:	88bb      	ldrh	r3, [r7, #4]
 800dcea:	3303      	adds	r3, #3
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d306      	bcc.n	800dd02 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dcf4:	88bb      	ldrh	r3, [r7, #4]
 800dcf6:	3303      	adds	r3, #3
 800dcf8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d201      	bcs.n	800dd06 <pbuf_alloc+0x166>
        return NULL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e034      	b.n	800dd70 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dd06:	6978      	ldr	r0, [r7, #20]
 800dd08:	f7ff f978 	bl	800cffc <mem_malloc>
 800dd0c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <pbuf_alloc+0x178>
        return NULL;
 800dd14:	2300      	movs	r3, #0
 800dd16:	e02b      	b.n	800dd70 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dd18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd1a:	3310      	adds	r3, #16
 800dd1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd1e:	4413      	add	r3, r2
 800dd20:	3303      	adds	r3, #3
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	4618      	mov	r0, r3
 800dd28:	88b9      	ldrh	r1, [r7, #4]
 800dd2a:	88ba      	ldrh	r2, [r7, #4]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	887b      	ldrh	r3, [r7, #2]
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	460b      	mov	r3, r1
 800dd36:	4601      	mov	r1, r0
 800dd38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd3a:	f7ff ff07 	bl	800db4c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f003 0303 	and.w	r3, r3, #3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d010      	beq.n	800dd6c <pbuf_alloc+0x1cc>
 800dd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <pbuf_alloc+0x1d8>)
 800dd4c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dd50:	490d      	ldr	r1, [pc, #52]	@ (800dd88 <pbuf_alloc+0x1e8>)
 800dd52:	480b      	ldr	r0, [pc, #44]	@ (800dd80 <pbuf_alloc+0x1e0>)
 800dd54:	f006 fcec 	bl	8014730 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dd58:	e008      	b.n	800dd6c <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dd5a:	4b07      	ldr	r3, [pc, #28]	@ (800dd78 <pbuf_alloc+0x1d8>)
 800dd5c:	f240 1227 	movw	r2, #295	@ 0x127
 800dd60:	490a      	ldr	r1, [pc, #40]	@ (800dd8c <pbuf_alloc+0x1ec>)
 800dd62:	4807      	ldr	r0, [pc, #28]	@ (800dd80 <pbuf_alloc+0x1e0>)
 800dd64:	f006 fce4 	bl	8014730 <iprintf>
      return NULL;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e001      	b.n	800dd70 <pbuf_alloc+0x1d0>
      break;
 800dd6c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3728      	adds	r7, #40	@ 0x28
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	08016498 	.word	0x08016498
 800dd7c:	080164f4 	.word	0x080164f4
 800dd80:	08016524 	.word	0x08016524
 800dd84:	0801654c 	.word	0x0801654c
 800dd88:	08016580 	.word	0x08016580
 800dd8c:	080165ac 	.word	0x080165ac

0800dd90 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	807b      	strh	r3, [r7, #2]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dda0:	883b      	ldrh	r3, [r7, #0]
 800dda2:	2b41      	cmp	r3, #65	@ 0x41
 800dda4:	d009      	beq.n	800ddba <pbuf_alloc_reference+0x2a>
 800dda6:	883b      	ldrh	r3, [r7, #0]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d006      	beq.n	800ddba <pbuf_alloc_reference+0x2a>
 800ddac:	4b0f      	ldr	r3, [pc, #60]	@ (800ddec <pbuf_alloc_reference+0x5c>)
 800ddae:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ddb2:	490f      	ldr	r1, [pc, #60]	@ (800ddf0 <pbuf_alloc_reference+0x60>)
 800ddb4:	480f      	ldr	r0, [pc, #60]	@ (800ddf4 <pbuf_alloc_reference+0x64>)
 800ddb6:	f006 fcbb 	bl	8014730 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ddba:	200b      	movs	r0, #11
 800ddbc:	f7ff faba 	bl	800d334 <memp_malloc>
 800ddc0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d101      	bne.n	800ddcc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	e00b      	b.n	800dde4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ddcc:	8879      	ldrh	r1, [r7, #2]
 800ddce:	887a      	ldrh	r2, [r7, #2]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	883b      	ldrh	r3, [r7, #0]
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f7ff feb5 	bl	800db4c <pbuf_init_alloced_pbuf>
  return p;
 800dde2:	68fb      	ldr	r3, [r7, #12]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	08016498 	.word	0x08016498
 800ddf0:	080165c8 	.word	0x080165c8
 800ddf4:	08016524 	.word	0x08016524

0800ddf8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	607b      	str	r3, [r7, #4]
 800de00:	4603      	mov	r3, r0
 800de02:	73fb      	strb	r3, [r7, #15]
 800de04:	460b      	mov	r3, r1
 800de06:	81bb      	strh	r3, [r7, #12]
 800de08:	4613      	mov	r3, r2
 800de0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
 800de0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800de10:	8a7b      	ldrh	r3, [r7, #18]
 800de12:	3303      	adds	r3, #3
 800de14:	f023 0203 	bic.w	r2, r3, #3
 800de18:	89bb      	ldrh	r3, [r7, #12]
 800de1a:	441a      	add	r2, r3
 800de1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de1e:	429a      	cmp	r2, r3
 800de20:	d901      	bls.n	800de26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800de22:	2300      	movs	r3, #0
 800de24:	e018      	b.n	800de58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d007      	beq.n	800de3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800de2c:	8a7b      	ldrh	r3, [r7, #18]
 800de2e:	3303      	adds	r3, #3
 800de30:	f023 0303 	bic.w	r3, r3, #3
 800de34:	6a3a      	ldr	r2, [r7, #32]
 800de36:	4413      	add	r3, r2
 800de38:	617b      	str	r3, [r7, #20]
 800de3a:	e001      	b.n	800de40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	89b9      	ldrh	r1, [r7, #12]
 800de44:	89ba      	ldrh	r2, [r7, #12]
 800de46:	2302      	movs	r3, #2
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	897b      	ldrh	r3, [r7, #10]
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	460b      	mov	r3, r1
 800de50:	6979      	ldr	r1, [r7, #20]
 800de52:	f7ff fe7b 	bl	800db4c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800de56:	687b      	ldr	r3, [r7, #4]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d106      	bne.n	800de80 <pbuf_realloc+0x20>
 800de72:	4b39      	ldr	r3, [pc, #228]	@ (800df58 <pbuf_realloc+0xf8>)
 800de74:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800de78:	4938      	ldr	r1, [pc, #224]	@ (800df5c <pbuf_realloc+0xfc>)
 800de7a:	4839      	ldr	r0, [pc, #228]	@ (800df60 <pbuf_realloc+0x100>)
 800de7c:	f006 fc58 	bl	8014730 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	891b      	ldrh	r3, [r3, #8]
 800de84:	887a      	ldrh	r2, [r7, #2]
 800de86:	429a      	cmp	r2, r3
 800de88:	d261      	bcs.n	800df4e <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	891a      	ldrh	r2, [r3, #8]
 800de8e:	887b      	ldrh	r3, [r7, #2]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800de94:	887b      	ldrh	r3, [r7, #2]
 800de96:	817b      	strh	r3, [r7, #10]
  q = p;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800de9c:	e018      	b.n	800ded0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	895b      	ldrh	r3, [r3, #10]
 800dea2:	897a      	ldrh	r2, [r7, #10]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	891a      	ldrh	r2, [r3, #8]
 800deac:	893b      	ldrh	r3, [r7, #8]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <pbuf_realloc+0x70>
 800dec2:	4b25      	ldr	r3, [pc, #148]	@ (800df58 <pbuf_realloc+0xf8>)
 800dec4:	f240 12af 	movw	r2, #431	@ 0x1af
 800dec8:	4926      	ldr	r1, [pc, #152]	@ (800df64 <pbuf_realloc+0x104>)
 800deca:	4825      	ldr	r0, [pc, #148]	@ (800df60 <pbuf_realloc+0x100>)
 800decc:	f006 fc30 	bl	8014730 <iprintf>
  while (rem_len > q->len) {
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	895b      	ldrh	r3, [r3, #10]
 800ded4:	897a      	ldrh	r2, [r7, #10]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d8e1      	bhi.n	800de9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	7b1b      	ldrb	r3, [r3, #12]
 800dede:	f003 030f 	and.w	r3, r3, #15
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d11f      	bne.n	800df26 <pbuf_realloc+0xc6>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	895b      	ldrh	r3, [r3, #10]
 800deea:	897a      	ldrh	r2, [r7, #10]
 800deec:	429a      	cmp	r2, r3
 800deee:	d01a      	beq.n	800df26 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	7b5b      	ldrb	r3, [r3, #13]
 800def4:	f003 0302 	and.w	r3, r3, #2
 800def8:	2b00      	cmp	r3, #0
 800defa:	d114      	bne.n	800df26 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	1ad2      	subs	r2, r2, r3
 800df04:	897b      	ldrh	r3, [r7, #10]
 800df06:	4413      	add	r3, r2
 800df08:	4619      	mov	r1, r3
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7fe ff74 	bl	800cdf8 <mem_trim>
 800df10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <pbuf_realloc+0xc6>
 800df18:	4b0f      	ldr	r3, [pc, #60]	@ (800df58 <pbuf_realloc+0xf8>)
 800df1a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800df1e:	4912      	ldr	r1, [pc, #72]	@ (800df68 <pbuf_realloc+0x108>)
 800df20:	480f      	ldr	r0, [pc, #60]	@ (800df60 <pbuf_realloc+0x100>)
 800df22:	f006 fc05 	bl	8014730 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	897a      	ldrh	r2, [r7, #10]
 800df2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	895a      	ldrh	r2, [r3, #10]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d004      	beq.n	800df46 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f911 	bl	800e168 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	e000      	b.n	800df50 <pbuf_realloc+0xf0>
    return;
 800df4e:	bf00      	nop

}
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	08016498 	.word	0x08016498
 800df5c:	080165dc 	.word	0x080165dc
 800df60:	08016524 	.word	0x08016524
 800df64:	080165f4 	.word	0x080165f4
 800df68:	0801660c 	.word	0x0801660c

0800df6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d106      	bne.n	800df8e <pbuf_add_header_impl+0x22>
 800df80:	4b2b      	ldr	r3, [pc, #172]	@ (800e030 <pbuf_add_header_impl+0xc4>)
 800df82:	f240 12df 	movw	r2, #479	@ 0x1df
 800df86:	492b      	ldr	r1, [pc, #172]	@ (800e034 <pbuf_add_header_impl+0xc8>)
 800df88:	482b      	ldr	r0, [pc, #172]	@ (800e038 <pbuf_add_header_impl+0xcc>)
 800df8a:	f006 fbd1 	bl	8014730 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d003      	beq.n	800df9c <pbuf_add_header_impl+0x30>
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df9a:	d301      	bcc.n	800dfa0 <pbuf_add_header_impl+0x34>
    return 1;
 800df9c:	2301      	movs	r3, #1
 800df9e:	e043      	b.n	800e028 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <pbuf_add_header_impl+0x3e>
    return 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e03e      	b.n	800e028 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	891a      	ldrh	r2, [r3, #8]
 800dfb2:	8a7b      	ldrh	r3, [r7, #18]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	8a7a      	ldrh	r2, [r7, #18]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d901      	bls.n	800dfc2 <pbuf_add_header_impl+0x56>
    return 1;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e032      	b.n	800e028 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	7b1b      	ldrb	r3, [r3, #12]
 800dfc6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dfc8:	8a3b      	ldrh	r3, [r7, #16]
 800dfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00c      	beq.n	800dfec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	425b      	negs	r3, r3
 800dfda:	4413      	add	r3, r2
 800dfdc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3310      	adds	r3, #16
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d20d      	bcs.n	800e004 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e01d      	b.n	800e028 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d006      	beq.n	800e000 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	685a      	ldr	r2, [r3, #4]
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	425b      	negs	r3, r3
 800dffa:	4413      	add	r3, r2
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e001      	b.n	800e004 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e000:	2301      	movs	r3, #1
 800e002:	e011      	b.n	800e028 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	895a      	ldrh	r2, [r3, #10]
 800e00e:	8a7b      	ldrh	r3, [r7, #18]
 800e010:	4413      	add	r3, r2
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	891a      	ldrh	r2, [r3, #8]
 800e01c:	8a7b      	ldrh	r3, [r7, #18]
 800e01e:	4413      	add	r3, r2
 800e020:	b29a      	uxth	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	811a      	strh	r2, [r3, #8]


  return 0;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	08016498 	.word	0x08016498
 800e034:	08016628 	.word	0x08016628
 800e038:	08016524 	.word	0x08016524

0800e03c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e046:	2200      	movs	r2, #0
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff ff8e 	bl	800df6c <pbuf_add_header_impl>
 800e050:	4603      	mov	r3, r0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d106      	bne.n	800e07a <pbuf_remove_header+0x1e>
 800e06c:	4b20      	ldr	r3, [pc, #128]	@ (800e0f0 <pbuf_remove_header+0x94>)
 800e06e:	f240 224b 	movw	r2, #587	@ 0x24b
 800e072:	4920      	ldr	r1, [pc, #128]	@ (800e0f4 <pbuf_remove_header+0x98>)
 800e074:	4820      	ldr	r0, [pc, #128]	@ (800e0f8 <pbuf_remove_header+0x9c>)
 800e076:	f006 fb5b 	bl	8014730 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d003      	beq.n	800e088 <pbuf_remove_header+0x2c>
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e086:	d301      	bcc.n	800e08c <pbuf_remove_header+0x30>
    return 1;
 800e088:	2301      	movs	r3, #1
 800e08a:	e02c      	b.n	800e0e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <pbuf_remove_header+0x3a>
    return 0;
 800e092:	2300      	movs	r3, #0
 800e094:	e027      	b.n	800e0e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	895b      	ldrh	r3, [r3, #10]
 800e09e:	89fa      	ldrh	r2, [r7, #14]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d908      	bls.n	800e0b6 <pbuf_remove_header+0x5a>
 800e0a4:	4b12      	ldr	r3, [pc, #72]	@ (800e0f0 <pbuf_remove_header+0x94>)
 800e0a6:	f240 2255 	movw	r2, #597	@ 0x255
 800e0aa:	4914      	ldr	r1, [pc, #80]	@ (800e0fc <pbuf_remove_header+0xa0>)
 800e0ac:	4812      	ldr	r0, [pc, #72]	@ (800e0f8 <pbuf_remove_header+0x9c>)
 800e0ae:	f006 fb3f 	bl	8014730 <iprintf>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e017      	b.n	800e0e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	441a      	add	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	895a      	ldrh	r2, [r3, #10]
 800e0cc:	89fb      	ldrh	r3, [r7, #14]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	891a      	ldrh	r2, [r3, #8]
 800e0da:	89fb      	ldrh	r3, [r7, #14]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08016498 	.word	0x08016498
 800e0f4:	08016628 	.word	0x08016628
 800e0f8:	08016524 	.word	0x08016524
 800e0fc:	08016634 	.word	0x08016634

0800e100 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	807b      	strh	r3, [r7, #2]
 800e10c:	4613      	mov	r3, r2
 800e10e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e114:	2b00      	cmp	r3, #0
 800e116:	da08      	bge.n	800e12a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e11c:	425b      	negs	r3, r3
 800e11e:	4619      	mov	r1, r3
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff ff9b 	bl	800e05c <pbuf_remove_header>
 800e126:	4603      	mov	r3, r0
 800e128:	e007      	b.n	800e13a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e12a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e12e:	787a      	ldrb	r2, [r7, #1]
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff ff1a 	bl	800df6c <pbuf_add_header_impl>
 800e138:	4603      	mov	r3, r0
  }
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e14e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e152:	2201      	movs	r2, #1
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff ffd2 	bl	800e100 <pbuf_header_impl>
 800e15c:	4603      	mov	r3, r0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10b      	bne.n	800e18e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <pbuf_free+0x22>
 800e17c:	4b3b      	ldr	r3, [pc, #236]	@ (800e26c <pbuf_free+0x104>)
 800e17e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e182:	493b      	ldr	r1, [pc, #236]	@ (800e270 <pbuf_free+0x108>)
 800e184:	483b      	ldr	r0, [pc, #236]	@ (800e274 <pbuf_free+0x10c>)
 800e186:	f006 fad3 	bl	8014730 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	e069      	b.n	800e262 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e192:	e062      	b.n	800e25a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e194:	f000 fb7a 	bl	800e88c <sys_arch_protect>
 800e198:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	7b9b      	ldrb	r3, [r3, #14]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <pbuf_free+0x48>
 800e1a2:	4b32      	ldr	r3, [pc, #200]	@ (800e26c <pbuf_free+0x104>)
 800e1a4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e1a8:	4933      	ldr	r1, [pc, #204]	@ (800e278 <pbuf_free+0x110>)
 800e1aa:	4832      	ldr	r0, [pc, #200]	@ (800e274 <pbuf_free+0x10c>)
 800e1ac:	f006 fac0 	bl	8014730 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	7b9b      	ldrb	r3, [r3, #14]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	739a      	strb	r2, [r3, #14]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7b9b      	ldrb	r3, [r3, #14]
 800e1c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e1c2:	69b8      	ldr	r0, [r7, #24]
 800e1c4:	f000 fb70 	bl	800e8a8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d143      	bne.n	800e256 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	7b1b      	ldrb	r3, [r3, #12]
 800e1d8:	f003 030f 	and.w	r3, r3, #15
 800e1dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7b5b      	ldrb	r3, [r3, #13]
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d011      	beq.n	800e20e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <pbuf_free+0x9c>
 800e1f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e26c <pbuf_free+0x104>)
 800e1f8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e1fc:	491f      	ldr	r1, [pc, #124]	@ (800e27c <pbuf_free+0x114>)
 800e1fe:	481d      	ldr	r0, [pc, #116]	@ (800e274 <pbuf_free+0x10c>)
 800e200:	f006 fa96 	bl	8014730 <iprintf>
        pc->custom_free_function(p);
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	4798      	blx	r3
 800e20c:	e01d      	b.n	800e24a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	2b02      	cmp	r3, #2
 800e212:	d104      	bne.n	800e21e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	200c      	movs	r0, #12
 800e218:	f7ff f902 	bl	800d420 <memp_free>
 800e21c:	e015      	b.n	800e24a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d104      	bne.n	800e22e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e224:	6879      	ldr	r1, [r7, #4]
 800e226:	200b      	movs	r0, #11
 800e228:	f7ff f8fa 	bl	800d420 <memp_free>
 800e22c:	e00d      	b.n	800e24a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <pbuf_free+0xd4>
          mem_free(p);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7fe fd4f 	bl	800ccd8 <mem_free>
 800e23a:	e006      	b.n	800e24a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e23c:	4b0b      	ldr	r3, [pc, #44]	@ (800e26c <pbuf_free+0x104>)
 800e23e:	f240 320f 	movw	r2, #783	@ 0x30f
 800e242:	490f      	ldr	r1, [pc, #60]	@ (800e280 <pbuf_free+0x118>)
 800e244:	480b      	ldr	r0, [pc, #44]	@ (800e274 <pbuf_free+0x10c>)
 800e246:	f006 fa73 	bl	8014730 <iprintf>
        }
      }
      count++;
 800e24a:	7ffb      	ldrb	r3, [r7, #31]
 800e24c:	3301      	adds	r3, #1
 800e24e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	607b      	str	r3, [r7, #4]
 800e254:	e001      	b.n	800e25a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d199      	bne.n	800e194 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e260:	7ffb      	ldrb	r3, [r7, #31]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	08016498 	.word	0x08016498
 800e270:	08016628 	.word	0x08016628
 800e274:	08016524 	.word	0x08016524
 800e278:	08016654 	.word	0x08016654
 800e27c:	0801666c 	.word	0x0801666c
 800e280:	08016690 	.word	0x08016690

0800e284 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e290:	e005      	b.n	800e29e <pbuf_clen+0x1a>
    ++len;
 800e292:	89fb      	ldrh	r3, [r7, #14]
 800e294:	3301      	adds	r3, #1
 800e296:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1f6      	bne.n	800e292 <pbuf_clen+0xe>
  }
  return len;
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3714      	adds	r7, #20
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
	...

0800e2b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d016      	beq.n	800e2f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e2c2:	f000 fae3 	bl	800e88c <sys_arch_protect>
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	7b9b      	ldrb	r3, [r3, #14]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	739a      	strb	r2, [r3, #14]
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f000 fae7 	bl	800e8a8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	7b9b      	ldrb	r3, [r3, #14]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <pbuf_ref+0x3c>
 800e2e2:	4b05      	ldr	r3, [pc, #20]	@ (800e2f8 <pbuf_ref+0x44>)
 800e2e4:	f240 3242 	movw	r2, #834	@ 0x342
 800e2e8:	4904      	ldr	r1, [pc, #16]	@ (800e2fc <pbuf_ref+0x48>)
 800e2ea:	4805      	ldr	r0, [pc, #20]	@ (800e300 <pbuf_ref+0x4c>)
 800e2ec:	f006 fa20 	bl	8014730 <iprintf>
  }
}
 800e2f0:	bf00      	nop
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	08016498 	.word	0x08016498
 800e2fc:	080166a4 	.word	0x080166a4
 800e300:	08016524 	.word	0x08016524

0800e304 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <pbuf_cat+0x16>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d107      	bne.n	800e32a <pbuf_cat+0x26>
 800e31a:	4b20      	ldr	r3, [pc, #128]	@ (800e39c <pbuf_cat+0x98>)
 800e31c:	f240 3259 	movw	r2, #857	@ 0x359
 800e320:	491f      	ldr	r1, [pc, #124]	@ (800e3a0 <pbuf_cat+0x9c>)
 800e322:	4820      	ldr	r0, [pc, #128]	@ (800e3a4 <pbuf_cat+0xa0>)
 800e324:	f006 fa04 	bl	8014730 <iprintf>
 800e328:	e034      	b.n	800e394 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e00a      	b.n	800e346 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	891a      	ldrh	r2, [r3, #8]
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	891b      	ldrh	r3, [r3, #8]
 800e338:	4413      	add	r3, r2
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1f0      	bne.n	800e330 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	891a      	ldrh	r2, [r3, #8]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	895b      	ldrh	r3, [r3, #10]
 800e356:	429a      	cmp	r2, r3
 800e358:	d006      	beq.n	800e368 <pbuf_cat+0x64>
 800e35a:	4b10      	ldr	r3, [pc, #64]	@ (800e39c <pbuf_cat+0x98>)
 800e35c:	f240 3262 	movw	r2, #866	@ 0x362
 800e360:	4911      	ldr	r1, [pc, #68]	@ (800e3a8 <pbuf_cat+0xa4>)
 800e362:	4810      	ldr	r0, [pc, #64]	@ (800e3a4 <pbuf_cat+0xa0>)
 800e364:	f006 f9e4 	bl	8014730 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d006      	beq.n	800e37e <pbuf_cat+0x7a>
 800e370:	4b0a      	ldr	r3, [pc, #40]	@ (800e39c <pbuf_cat+0x98>)
 800e372:	f240 3263 	movw	r2, #867	@ 0x363
 800e376:	490d      	ldr	r1, [pc, #52]	@ (800e3ac <pbuf_cat+0xa8>)
 800e378:	480a      	ldr	r0, [pc, #40]	@ (800e3a4 <pbuf_cat+0xa0>)
 800e37a:	f006 f9d9 	bl	8014730 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	891a      	ldrh	r2, [r3, #8]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	891b      	ldrh	r3, [r3, #8]
 800e386:	4413      	add	r3, r2
 800e388:	b29a      	uxth	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	683a      	ldr	r2, [r7, #0]
 800e392:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	08016498 	.word	0x08016498
 800e3a0:	080166b8 	.word	0x080166b8
 800e3a4:	08016524 	.word	0x08016524
 800e3a8:	080166f0 	.word	0x080166f0
 800e3ac:	08016720 	.word	0x08016720

0800e3b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d008      	beq.n	800e3da <pbuf_copy+0x2a>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <pbuf_copy+0x2a>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	891a      	ldrh	r2, [r3, #8]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	891b      	ldrh	r3, [r3, #8]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d209      	bcs.n	800e3ee <pbuf_copy+0x3e>
 800e3da:	4b57      	ldr	r3, [pc, #348]	@ (800e538 <pbuf_copy+0x188>)
 800e3dc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e3e0:	4956      	ldr	r1, [pc, #344]	@ (800e53c <pbuf_copy+0x18c>)
 800e3e2:	4857      	ldr	r0, [pc, #348]	@ (800e540 <pbuf_copy+0x190>)
 800e3e4:	f006 f9a4 	bl	8014730 <iprintf>
 800e3e8:	f06f 030f 	mvn.w	r3, #15
 800e3ec:	e09f      	b.n	800e52e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	895b      	ldrh	r3, [r3, #10]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	1ad2      	subs	r2, r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	895b      	ldrh	r3, [r3, #10]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	1acb      	subs	r3, r1, r3
 800e402:	429a      	cmp	r2, r3
 800e404:	d306      	bcc.n	800e414 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	895b      	ldrh	r3, [r3, #10]
 800e40a:	461a      	mov	r2, r3
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	60fb      	str	r3, [r7, #12]
 800e412:	e005      	b.n	800e420 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	895b      	ldrh	r3, [r3, #10]
 800e418:	461a      	mov	r2, r3
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	1ad3      	subs	r3, r2, r3
 800e41e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	18d0      	adds	r0, r2, r3
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	4413      	add	r3, r2
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4619      	mov	r1, r3
 800e434:	f006 fab5 	bl	80149a2 <memcpy>
    offset_to += len;
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	4413      	add	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e440:	693a      	ldr	r2, [r7, #16]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	4413      	add	r3, r2
 800e446:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	895b      	ldrh	r3, [r3, #10]
 800e44c:	461a      	mov	r2, r3
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	4293      	cmp	r3, r2
 800e452:	d906      	bls.n	800e462 <pbuf_copy+0xb2>
 800e454:	4b38      	ldr	r3, [pc, #224]	@ (800e538 <pbuf_copy+0x188>)
 800e456:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e45a:	493a      	ldr	r1, [pc, #232]	@ (800e544 <pbuf_copy+0x194>)
 800e45c:	4838      	ldr	r0, [pc, #224]	@ (800e540 <pbuf_copy+0x190>)
 800e45e:	f006 f967 	bl	8014730 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	895b      	ldrh	r3, [r3, #10]
 800e466:	461a      	mov	r2, r3
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d906      	bls.n	800e47c <pbuf_copy+0xcc>
 800e46e:	4b32      	ldr	r3, [pc, #200]	@ (800e538 <pbuf_copy+0x188>)
 800e470:	f240 32da 	movw	r2, #986	@ 0x3da
 800e474:	4934      	ldr	r1, [pc, #208]	@ (800e548 <pbuf_copy+0x198>)
 800e476:	4832      	ldr	r0, [pc, #200]	@ (800e540 <pbuf_copy+0x190>)
 800e478:	f006 f95a 	bl	8014730 <iprintf>
    if (offset_from >= p_from->len) {
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	895b      	ldrh	r3, [r3, #10]
 800e480:	461a      	mov	r2, r3
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	4293      	cmp	r3, r2
 800e486:	d304      	bcc.n	800e492 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	895b      	ldrh	r3, [r3, #10]
 800e496:	461a      	mov	r2, r3
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d114      	bne.n	800e4c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10c      	bne.n	800e4c8 <pbuf_copy+0x118>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <pbuf_copy+0x118>
 800e4b4:	4b20      	ldr	r3, [pc, #128]	@ (800e538 <pbuf_copy+0x188>)
 800e4b6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e4ba:	4924      	ldr	r1, [pc, #144]	@ (800e54c <pbuf_copy+0x19c>)
 800e4bc:	4820      	ldr	r0, [pc, #128]	@ (800e540 <pbuf_copy+0x190>)
 800e4be:	f006 f937 	bl	8014730 <iprintf>
 800e4c2:	f06f 030f 	mvn.w	r3, #15
 800e4c6:	e032      	b.n	800e52e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d013      	beq.n	800e4f6 <pbuf_copy+0x146>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	895a      	ldrh	r2, [r3, #10]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	891b      	ldrh	r3, [r3, #8]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d10d      	bne.n	800e4f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d009      	beq.n	800e4f6 <pbuf_copy+0x146>
 800e4e2:	4b15      	ldr	r3, [pc, #84]	@ (800e538 <pbuf_copy+0x188>)
 800e4e4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e4e8:	4919      	ldr	r1, [pc, #100]	@ (800e550 <pbuf_copy+0x1a0>)
 800e4ea:	4815      	ldr	r0, [pc, #84]	@ (800e540 <pbuf_copy+0x190>)
 800e4ec:	f006 f920 	bl	8014730 <iprintf>
 800e4f0:	f06f 0305 	mvn.w	r3, #5
 800e4f4:	e01b      	b.n	800e52e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d013      	beq.n	800e524 <pbuf_copy+0x174>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	895a      	ldrh	r2, [r3, #10]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	891b      	ldrh	r3, [r3, #8]
 800e504:	429a      	cmp	r2, r3
 800e506:	d10d      	bne.n	800e524 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d009      	beq.n	800e524 <pbuf_copy+0x174>
 800e510:	4b09      	ldr	r3, [pc, #36]	@ (800e538 <pbuf_copy+0x188>)
 800e512:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e516:	490e      	ldr	r1, [pc, #56]	@ (800e550 <pbuf_copy+0x1a0>)
 800e518:	4809      	ldr	r0, [pc, #36]	@ (800e540 <pbuf_copy+0x190>)
 800e51a:	f006 f909 	bl	8014730 <iprintf>
 800e51e:	f06f 0305 	mvn.w	r3, #5
 800e522:	e004      	b.n	800e52e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	f47f af61 	bne.w	800e3ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	08016498 	.word	0x08016498
 800e53c:	0801676c 	.word	0x0801676c
 800e540:	08016524 	.word	0x08016524
 800e544:	0801679c 	.word	0x0801679c
 800e548:	080167b4 	.word	0x080167b4
 800e54c:	080167d0 	.word	0x080167d0
 800e550:	080167e0 	.word	0x080167e0

0800e554 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	4611      	mov	r1, r2
 800e560:	461a      	mov	r2, r3
 800e562:	460b      	mov	r3, r1
 800e564:	80fb      	strh	r3, [r7, #6]
 800e566:	4613      	mov	r3, r2
 800e568:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d108      	bne.n	800e58a <pbuf_copy_partial+0x36>
 800e578:	4b2b      	ldr	r3, [pc, #172]	@ (800e628 <pbuf_copy_partial+0xd4>)
 800e57a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e57e:	492b      	ldr	r1, [pc, #172]	@ (800e62c <pbuf_copy_partial+0xd8>)
 800e580:	482b      	ldr	r0, [pc, #172]	@ (800e630 <pbuf_copy_partial+0xdc>)
 800e582:	f006 f8d5 	bl	8014730 <iprintf>
 800e586:	2300      	movs	r3, #0
 800e588:	e04a      	b.n	800e620 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d108      	bne.n	800e5a2 <pbuf_copy_partial+0x4e>
 800e590:	4b25      	ldr	r3, [pc, #148]	@ (800e628 <pbuf_copy_partial+0xd4>)
 800e592:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e596:	4927      	ldr	r1, [pc, #156]	@ (800e634 <pbuf_copy_partial+0xe0>)
 800e598:	4825      	ldr	r0, [pc, #148]	@ (800e630 <pbuf_copy_partial+0xdc>)
 800e59a:	f006 f8c9 	bl	8014730 <iprintf>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e03e      	b.n	800e620 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	e034      	b.n	800e612 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e5a8:	88bb      	ldrh	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00a      	beq.n	800e5c4 <pbuf_copy_partial+0x70>
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	895b      	ldrh	r3, [r3, #10]
 800e5b2:	88ba      	ldrh	r2, [r7, #4]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d305      	bcc.n	800e5c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	895b      	ldrh	r3, [r3, #10]
 800e5bc:	88ba      	ldrh	r2, [r7, #4]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	80bb      	strh	r3, [r7, #4]
 800e5c2:	e023      	b.n	800e60c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	895a      	ldrh	r2, [r3, #10]
 800e5c8:	88bb      	ldrh	r3, [r7, #4]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e5ce:	8b3a      	ldrh	r2, [r7, #24]
 800e5d0:	88fb      	ldrh	r3, [r7, #6]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d901      	bls.n	800e5da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e5d6:	88fb      	ldrh	r3, [r7, #6]
 800e5d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e5da:	8b7b      	ldrh	r3, [r7, #26]
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	18d0      	adds	r0, r2, r3
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	88bb      	ldrh	r3, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	8b3a      	ldrh	r2, [r7, #24]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	f006 f9d9 	bl	80149a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e5f0:	8afa      	ldrh	r2, [r7, #22]
 800e5f2:	8b3b      	ldrh	r3, [r7, #24]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e5f8:	8b7a      	ldrh	r2, [r7, #26]
 800e5fa:	8b3b      	ldrh	r3, [r7, #24]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e600:	88fa      	ldrh	r2, [r7, #6]
 800e602:	8b3b      	ldrh	r3, [r7, #24]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e608:	2300      	movs	r3, #0
 800e60a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	61fb      	str	r3, [r7, #28]
 800e612:	88fb      	ldrh	r3, [r7, #6]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <pbuf_copy_partial+0xca>
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1c4      	bne.n	800e5a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e61e:	8afb      	ldrh	r3, [r7, #22]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	08016498 	.word	0x08016498
 800e62c:	0801680c 	.word	0x0801680c
 800e630:	08016524 	.word	0x08016524
 800e634:	0801682c 	.word	0x0801682c

0800e638 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	603a      	str	r2, [r7, #0]
 800e642:	71fb      	strb	r3, [r7, #7]
 800e644:	460b      	mov	r3, r1
 800e646:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	8919      	ldrh	r1, [r3, #8]
 800e64c:	88ba      	ldrh	r2, [r7, #4]
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff faa5 	bl	800dba0 <pbuf_alloc>
 800e656:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d101      	bne.n	800e662 <pbuf_clone+0x2a>
    return NULL;
 800e65e:	2300      	movs	r3, #0
 800e660:	e011      	b.n	800e686 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff fea3 	bl	800e3b0 <pbuf_copy>
 800e66a:	4603      	mov	r3, r0
 800e66c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e66e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d006      	beq.n	800e684 <pbuf_clone+0x4c>
 800e676:	4b06      	ldr	r3, [pc, #24]	@ (800e690 <pbuf_clone+0x58>)
 800e678:	f240 5224 	movw	r2, #1316	@ 0x524
 800e67c:	4905      	ldr	r1, [pc, #20]	@ (800e694 <pbuf_clone+0x5c>)
 800e67e:	4806      	ldr	r0, [pc, #24]	@ (800e698 <pbuf_clone+0x60>)
 800e680:	f006 f856 	bl	8014730 <iprintf>
  return q;
 800e684:	68fb      	ldr	r3, [r7, #12]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	08016498 	.word	0x08016498
 800e694:	08016938 	.word	0x08016938
 800e698:	08016524 	.word	0x08016524

0800e69c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	60bb      	str	r3, [r7, #8]
 800e6aa:	2304      	movs	r3, #4
 800e6ac:	60fb      	str	r3, [r7, #12]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	613b      	str	r3, [r7, #16]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e6b6:	f107 0308 	add.w	r3, r7, #8
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7f9 f857 	bl	8007770 <osMessageCreate>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 800e6d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6d4:	e000      	b.n	800e6d8 <sys_mbox_new+0x3c>

  return ERR_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f9 f864 	bl	80077c0 <osMessagePut>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d102      	bne.n	800e704 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800e6fe:	2300      	movs	r3, #0
 800e700:	73fb      	strb	r3, [r7, #15]
 800e702:	e001      	b.n	800e708 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800e704:	23ff      	movs	r3, #255	@ 0xff
 800e706:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800e708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08c      	sub	sp, #48	@ 0x30
 800e718:	af00      	add	r7, sp, #0
 800e71a:	61f8      	str	r0, [r7, #28]
 800e71c:	61b9      	str	r1, [r7, #24]
 800e71e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800e720:	f7f8 fe64 	bl	80073ec <osKernelSysTick>
 800e724:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d017      	beq.n	800e75c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	6819      	ldr	r1, [r3, #0]
 800e730:	f107 0320 	add.w	r3, r7, #32
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	4618      	mov	r0, r3
 800e738:	f7f9 f882 	bl	8007840 <osMessageGet>

    if(event.status == osEventMessage)
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	2b10      	cmp	r3, #16
 800e740:	d109      	bne.n	800e756 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	461a      	mov	r2, r3
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800e74a:	f7f8 fe4f 	bl	80073ec <osKernelSysTick>
 800e74e:	4602      	mov	r2, r0
 800e750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	e019      	b.n	800e78a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800e756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e75a:	e016      	b.n	800e78a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	6819      	ldr	r1, [r3, #0]
 800e760:	463b      	mov	r3, r7
 800e762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e766:	4618      	mov	r0, r3
 800e768:	f7f9 f86a 	bl	8007840 <osMessageGet>
 800e76c:	f107 0320 	add.w	r3, r7, #32
 800e770:	463a      	mov	r2, r7
 800e772:	ca07      	ldmia	r2, {r0, r1, r2}
 800e774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800e778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77a:	461a      	mov	r2, r3
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800e780:	f7f8 fe34 	bl	80073ec <osKernelSysTick>
 800e784:	4602      	mov	r2, r0
 800e786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e788:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3730      	adds	r7, #48	@ 0x30
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800e792:	b480      	push	{r7}
 800e794:	b083      	sub	sp, #12
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <sys_mbox_valid+0x14>
    return 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e000      	b.n	800e7a8 <sys_mbox_valid+0x16>
  else
    return 1;
 800e7a6:	2301      	movs	r3, #1
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800e7b8:	4803      	ldr	r0, [pc, #12]	@ (800e7c8 <sys_init+0x14>)
 800e7ba:	f7f8 fe87 	bl	80074cc <osMutexCreate>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4a02      	ldr	r2, [pc, #8]	@ (800e7cc <sys_init+0x18>)
 800e7c2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800e7c4:	bf00      	nop
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	08018520 	.word	0x08018520
 800e7cc:	2400f92c 	.word	0x2400f92c

0800e7d0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60bb      	str	r3, [r7, #8]
 800e7dc:	2300      	movs	r3, #0
 800e7de:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e7e0:	f107 0308 	add.w	r3, r7, #8
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7f8 fe71 	bl	80074cc <osMutexCreate>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d102      	bne.n	800e7fe <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800e7f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7fc:	e000      	b.n	800e800 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f8 fe6f 	bl	80074fc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800e81e:	bf00      	nop
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b082      	sub	sp, #8
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4618      	mov	r0, r3
 800e834:	f7f8 feb0 	bl	8007598 <osMutexRelease>
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08c      	sub	sp, #48	@ 0x30
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e84e:	f107 0314 	add.w	r3, r7, #20
 800e852:	2200      	movs	r2, #0
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	605a      	str	r2, [r3, #4]
 800e858:	609a      	str	r2, [r3, #8]
 800e85a:	60da      	str	r2, [r3, #12]
 800e85c:	611a      	str	r2, [r3, #16]
 800e85e:	615a      	str	r2, [r3, #20]
 800e860:	619a      	str	r2, [r3, #24]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	61bb      	str	r3, [r7, #24]
 800e86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e86c:	b21b      	sxth	r3, r3
 800e86e:	83bb      	strh	r3, [r7, #28]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 800e874:	f107 0314 	add.w	r3, r7, #20
 800e878:	6879      	ldr	r1, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7f8 fdc6 	bl	800740c <osThreadCreate>
 800e880:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800e882:	4618      	mov	r0, r3
 800e884:	3730      	adds	r7, #48	@ 0x30
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800e890:	4b04      	ldr	r3, [pc, #16]	@ (800e8a4 <sys_arch_protect+0x18>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f8 fe2f 	bl	80074fc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800e89e:	2301      	movs	r3, #1
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	2400f92c 	.word	0x2400f92c

0800e8a8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e8b0:	4b04      	ldr	r3, [pc, #16]	@ (800e8c4 <sys_arch_unprotect+0x1c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f8 fe6f 	bl	8007598 <osMutexRelease>
}
 800e8ba:	bf00      	nop
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	2400f92c 	.word	0x2400f92c

0800e8c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e8cc:	f005 fe30 	bl	8014530 <rand>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	4b01      	ldr	r3, [pc, #4]	@ (800e8e8 <tcp_init+0x20>)
 800e8e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e8e4:	bf00      	nop
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	24000044 	.word	0x24000044

0800e8ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	7d1b      	ldrb	r3, [r3, #20]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d105      	bne.n	800e908 <tcp_free+0x1c>
 800e8fc:	4b06      	ldr	r3, [pc, #24]	@ (800e918 <tcp_free+0x2c>)
 800e8fe:	22d4      	movs	r2, #212	@ 0xd4
 800e900:	4906      	ldr	r1, [pc, #24]	@ (800e91c <tcp_free+0x30>)
 800e902:	4807      	ldr	r0, [pc, #28]	@ (800e920 <tcp_free+0x34>)
 800e904:	f005 ff14 	bl	8014730 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	2001      	movs	r0, #1
 800e90c:	f7fe fd88 	bl	800d420 <memp_free>
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	080169c4 	.word	0x080169c4
 800e91c:	08016a20 	.word	0x08016a20
 800e920:	08016a34 	.word	0x08016a34

0800e924 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	7d1b      	ldrb	r3, [r3, #20]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d105      	bne.n	800e940 <tcp_free_listen+0x1c>
 800e934:	4b06      	ldr	r3, [pc, #24]	@ (800e950 <tcp_free_listen+0x2c>)
 800e936:	22df      	movs	r2, #223	@ 0xdf
 800e938:	4906      	ldr	r1, [pc, #24]	@ (800e954 <tcp_free_listen+0x30>)
 800e93a:	4807      	ldr	r0, [pc, #28]	@ (800e958 <tcp_free_listen+0x34>)
 800e93c:	f005 fef8 	bl	8014730 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	2002      	movs	r0, #2
 800e944:	f7fe fd6c 	bl	800d420 <memp_free>
}
 800e948:	bf00      	nop
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	080169c4 	.word	0x080169c4
 800e954:	08016a5c 	.word	0x08016a5c
 800e958:	08016a34 	.word	0x08016a34

0800e95c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e960:	f000 fea6 	bl	800f6b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e964:	4b07      	ldr	r3, [pc, #28]	@ (800e984 <tcp_tmr+0x28>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	3301      	adds	r3, #1
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <tcp_tmr+0x28>)
 800e96e:	701a      	strb	r2, [r3, #0]
 800e970:	4b04      	ldr	r3, [pc, #16]	@ (800e984 <tcp_tmr+0x28>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d001      	beq.n	800e980 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e97c:	f000 fb56 	bl	800f02c <tcp_slowtmr>
  }
}
 800e980:	bf00      	nop
 800e982:	bd80      	pop	{r7, pc}
 800e984:	2400f945 	.word	0x2400f945

0800e988 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d105      	bne.n	800e9a4 <tcp_remove_listener+0x1c>
 800e998:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d0 <tcp_remove_listener+0x48>)
 800e99a:	22ff      	movs	r2, #255	@ 0xff
 800e99c:	490d      	ldr	r1, [pc, #52]	@ (800e9d4 <tcp_remove_listener+0x4c>)
 800e99e:	480e      	ldr	r0, [pc, #56]	@ (800e9d8 <tcp_remove_listener+0x50>)
 800e9a0:	f005 fec6 	bl	8014730 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	60fb      	str	r3, [r7, #12]
 800e9a8:	e00a      	b.n	800e9c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d102      	bne.n	800e9ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1f1      	bne.n	800e9aa <tcp_remove_listener+0x22>
    }
  }
}
 800e9c6:	bf00      	nop
 800e9c8:	bf00      	nop
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	080169c4 	.word	0x080169c4
 800e9d4:	08016a78 	.word	0x08016a78
 800e9d8:	08016a34 	.word	0x08016a34

0800e9dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <tcp_listen_closed+0x1c>
 800e9ea:	4b14      	ldr	r3, [pc, #80]	@ (800ea3c <tcp_listen_closed+0x60>)
 800e9ec:	f240 1211 	movw	r2, #273	@ 0x111
 800e9f0:	4913      	ldr	r1, [pc, #76]	@ (800ea40 <tcp_listen_closed+0x64>)
 800e9f2:	4814      	ldr	r0, [pc, #80]	@ (800ea44 <tcp_listen_closed+0x68>)
 800e9f4:	f005 fe9c 	bl	8014730 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7d1b      	ldrb	r3, [r3, #20]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d006      	beq.n	800ea0e <tcp_listen_closed+0x32>
 800ea00:	4b0e      	ldr	r3, [pc, #56]	@ (800ea3c <tcp_listen_closed+0x60>)
 800ea02:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ea06:	4910      	ldr	r1, [pc, #64]	@ (800ea48 <tcp_listen_closed+0x6c>)
 800ea08:	480e      	ldr	r0, [pc, #56]	@ (800ea44 <tcp_listen_closed+0x68>)
 800ea0a:	f005 fe91 	bl	8014730 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea0e:	2301      	movs	r3, #1
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	e00b      	b.n	800ea2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ea14:	4a0d      	ldr	r2, [pc, #52]	@ (800ea4c <tcp_listen_closed+0x70>)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff ffb1 	bl	800e988 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	60fb      	str	r3, [r7, #12]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d9f0      	bls.n	800ea14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ea32:	bf00      	nop
 800ea34:	bf00      	nop
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	080169c4 	.word	0x080169c4
 800ea40:	08016aa0 	.word	0x08016aa0
 800ea44:	08016a34 	.word	0x08016a34
 800ea48:	08016aac 	.word	0x08016aac
 800ea4c:	08018540 	.word	0x08018540

0800ea50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ea50:	b5b0      	push	{r4, r5, r7, lr}
 800ea52:	b088      	sub	sp, #32
 800ea54:	af04      	add	r7, sp, #16
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_close_shutdown+0x20>
 800ea62:	4b63      	ldr	r3, [pc, #396]	@ (800ebf0 <tcp_close_shutdown+0x1a0>)
 800ea64:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ea68:	4962      	ldr	r1, [pc, #392]	@ (800ebf4 <tcp_close_shutdown+0x1a4>)
 800ea6a:	4863      	ldr	r0, [pc, #396]	@ (800ebf8 <tcp_close_shutdown+0x1a8>)
 800ea6c:	f005 fe60 	bl	8014730 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ea70:	78fb      	ldrb	r3, [r7, #3]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d067      	beq.n	800eb46 <tcp_close_shutdown+0xf6>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	7d1b      	ldrb	r3, [r3, #20]
 800ea7a:	2b04      	cmp	r3, #4
 800ea7c:	d003      	beq.n	800ea86 <tcp_close_shutdown+0x36>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7d1b      	ldrb	r3, [r3, #20]
 800ea82:	2b07      	cmp	r3, #7
 800ea84:	d15f      	bne.n	800eb46 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d105      	bne.n	800ea9a <tcp_close_shutdown+0x4a>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea92:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d055      	beq.n	800eb46 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8b5b      	ldrh	r3, [r3, #26]
 800ea9e:	f003 0310 	and.w	r3, r3, #16
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <tcp_close_shutdown+0x64>
 800eaa6:	4b52      	ldr	r3, [pc, #328]	@ (800ebf0 <tcp_close_shutdown+0x1a0>)
 800eaa8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800eaac:	4953      	ldr	r1, [pc, #332]	@ (800ebfc <tcp_close_shutdown+0x1ac>)
 800eaae:	4852      	ldr	r0, [pc, #328]	@ (800ebf8 <tcp_close_shutdown+0x1a8>)
 800eab0:	f005 fe3e 	bl	8014730 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eabc:	687d      	ldr	r5, [r7, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3304      	adds	r3, #4
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	8ad2      	ldrh	r2, [r2, #22]
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	8b09      	ldrh	r1, [r1, #24]
 800eaca:	9102      	str	r1, [sp, #8]
 800eacc:	9201      	str	r2, [sp, #4]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	462b      	mov	r3, r5
 800ead2:	4622      	mov	r2, r4
 800ead4:	4601      	mov	r1, r0
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f004 fe92 	bl	8013800 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f001 f8cb 	bl	800fc78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eae2:	4b47      	ldr	r3, [pc, #284]	@ (800ec00 <tcp_close_shutdown+0x1b0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d105      	bne.n	800eaf8 <tcp_close_shutdown+0xa8>
 800eaec:	4b44      	ldr	r3, [pc, #272]	@ (800ec00 <tcp_close_shutdown+0x1b0>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4a43      	ldr	r2, [pc, #268]	@ (800ec00 <tcp_close_shutdown+0x1b0>)
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	e013      	b.n	800eb20 <tcp_close_shutdown+0xd0>
 800eaf8:	4b41      	ldr	r3, [pc, #260]	@ (800ec00 <tcp_close_shutdown+0x1b0>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	e00c      	b.n	800eb1a <tcp_close_shutdown+0xca>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d104      	bne.n	800eb14 <tcp_close_shutdown+0xc4>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	e005      	b.n	800eb20 <tcp_close_shutdown+0xd0>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	60fb      	str	r3, [r7, #12]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1ef      	bne.n	800eb00 <tcp_close_shutdown+0xb0>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	60da      	str	r2, [r3, #12]
 800eb26:	4b37      	ldr	r3, [pc, #220]	@ (800ec04 <tcp_close_shutdown+0x1b4>)
 800eb28:	2201      	movs	r2, #1
 800eb2a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800eb2c:	4b36      	ldr	r3, [pc, #216]	@ (800ec08 <tcp_close_shutdown+0x1b8>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d102      	bne.n	800eb3c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eb36:	f003 fd61 	bl	80125fc <tcp_trigger_input_pcb_close>
 800eb3a:	e002      	b.n	800eb42 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff fed5 	bl	800e8ec <tcp_free>
      }
      return ERR_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e050      	b.n	800ebe8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7d1b      	ldrb	r3, [r3, #20]
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d03b      	beq.n	800ebc6 <tcp_close_shutdown+0x176>
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	dc44      	bgt.n	800ebdc <tcp_close_shutdown+0x18c>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <tcp_close_shutdown+0x10c>
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d02a      	beq.n	800ebb0 <tcp_close_shutdown+0x160>
 800eb5a:	e03f      	b.n	800ebdc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8adb      	ldrh	r3, [r3, #22]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d021      	beq.n	800eba8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb64:	4b29      	ldr	r3, [pc, #164]	@ (800ec0c <tcp_close_shutdown+0x1bc>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d105      	bne.n	800eb7a <tcp_close_shutdown+0x12a>
 800eb6e:	4b27      	ldr	r3, [pc, #156]	@ (800ec0c <tcp_close_shutdown+0x1bc>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	4a25      	ldr	r2, [pc, #148]	@ (800ec0c <tcp_close_shutdown+0x1bc>)
 800eb76:	6013      	str	r3, [r2, #0]
 800eb78:	e013      	b.n	800eba2 <tcp_close_shutdown+0x152>
 800eb7a:	4b24      	ldr	r3, [pc, #144]	@ (800ec0c <tcp_close_shutdown+0x1bc>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	60bb      	str	r3, [r7, #8]
 800eb80:	e00c      	b.n	800eb9c <tcp_close_shutdown+0x14c>
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d104      	bne.n	800eb96 <tcp_close_shutdown+0x146>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	60da      	str	r2, [r3, #12]
 800eb94:	e005      	b.n	800eba2 <tcp_close_shutdown+0x152>
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	60bb      	str	r3, [r7, #8]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d1ef      	bne.n	800eb82 <tcp_close_shutdown+0x132>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff fe9f 	bl	800e8ec <tcp_free>
      break;
 800ebae:	e01a      	b.n	800ebe6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff ff13 	bl	800e9dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	4815      	ldr	r0, [pc, #84]	@ (800ec10 <tcp_close_shutdown+0x1c0>)
 800ebba:	f001 f8ad 	bl	800fd18 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7ff feb0 	bl	800e924 <tcp_free_listen>
      break;
 800ebc4:	e00f      	b.n	800ebe6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	480d      	ldr	r0, [pc, #52]	@ (800ec00 <tcp_close_shutdown+0x1b0>)
 800ebca:	f001 f8a5 	bl	800fd18 <tcp_pcb_remove>
 800ebce:	4b0d      	ldr	r3, [pc, #52]	@ (800ec04 <tcp_close_shutdown+0x1b4>)
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7ff fe89 	bl	800e8ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ebda:	e004      	b.n	800ebe6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f819 	bl	800ec14 <tcp_close_shutdown_fin>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	e000      	b.n	800ebe8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf0:	080169c4 	.word	0x080169c4
 800ebf4:	08016ac4 	.word	0x08016ac4
 800ebf8:	08016a34 	.word	0x08016a34
 800ebfc:	08016ae4 	.word	0x08016ae4
 800ec00:	2400f93c 	.word	0x2400f93c
 800ec04:	2400f944 	.word	0x2400f944
 800ec08:	2400f97c 	.word	0x2400f97c
 800ec0c:	2400f934 	.word	0x2400f934
 800ec10:	2400f938 	.word	0x2400f938

0800ec14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <tcp_close_shutdown_fin+0x1c>
 800ec22:	4b2e      	ldr	r3, [pc, #184]	@ (800ecdc <tcp_close_shutdown_fin+0xc8>)
 800ec24:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ec28:	492d      	ldr	r1, [pc, #180]	@ (800ece0 <tcp_close_shutdown_fin+0xcc>)
 800ec2a:	482e      	ldr	r0, [pc, #184]	@ (800ece4 <tcp_close_shutdown_fin+0xd0>)
 800ec2c:	f005 fd80 	bl	8014730 <iprintf>

  switch (pcb->state) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	7d1b      	ldrb	r3, [r3, #20]
 800ec34:	2b07      	cmp	r3, #7
 800ec36:	d020      	beq.n	800ec7a <tcp_close_shutdown_fin+0x66>
 800ec38:	2b07      	cmp	r3, #7
 800ec3a:	dc2b      	bgt.n	800ec94 <tcp_close_shutdown_fin+0x80>
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d002      	beq.n	800ec46 <tcp_close_shutdown_fin+0x32>
 800ec40:	2b04      	cmp	r3, #4
 800ec42:	d00d      	beq.n	800ec60 <tcp_close_shutdown_fin+0x4c>
 800ec44:	e026      	b.n	800ec94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f003 fee8 	bl	8012a1c <tcp_send_fin>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d11f      	bne.n	800ec98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2205      	movs	r2, #5
 800ec5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec5e:	e01b      	b.n	800ec98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f003 fedb 	bl	8012a1c <tcp_send_fin>
 800ec66:	4603      	mov	r3, r0
 800ec68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d114      	bne.n	800ec9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2205      	movs	r2, #5
 800ec76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec78:	e010      	b.n	800ec9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f003 fece 	bl	8012a1c <tcp_send_fin>
 800ec80:	4603      	mov	r3, r0
 800ec82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ec84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d109      	bne.n	800eca0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2209      	movs	r2, #9
 800ec90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ec92:	e005      	b.n	800eca0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	e01c      	b.n	800ecd2 <tcp_close_shutdown_fin+0xbe>
      break;
 800ec98:	bf00      	nop
 800ec9a:	e002      	b.n	800eca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800ec9c:	bf00      	nop
 800ec9e:	e000      	b.n	800eca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800eca0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d103      	bne.n	800ecb2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f003 fff4 	bl	8012c98 <tcp_output>
 800ecb0:	e00d      	b.n	800ecce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ecb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecba:	d108      	bne.n	800ecce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	8b5b      	ldrh	r3, [r3, #26]
 800ecc0:	f043 0308 	orr.w	r3, r3, #8
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ecca:	2300      	movs	r3, #0
 800eccc:	e001      	b.n	800ecd2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ecce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	080169c4 	.word	0x080169c4
 800ece0:	08016aa0 	.word	0x08016aa0
 800ece4:	08016a34 	.word	0x08016a34

0800ece8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d109      	bne.n	800ed0a <tcp_close+0x22>
 800ecf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ed34 <tcp_close+0x4c>)
 800ecf8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ecfc:	490e      	ldr	r1, [pc, #56]	@ (800ed38 <tcp_close+0x50>)
 800ecfe:	480f      	ldr	r0, [pc, #60]	@ (800ed3c <tcp_close+0x54>)
 800ed00:	f005 fd16 	bl	8014730 <iprintf>
 800ed04:	f06f 030f 	mvn.w	r3, #15
 800ed08:	e00f      	b.n	800ed2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7d1b      	ldrb	r3, [r3, #20]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d006      	beq.n	800ed20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8b5b      	ldrh	r3, [r3, #26]
 800ed16:	f043 0310 	orr.w	r3, r3, #16
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ed20:	2101      	movs	r1, #1
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fe94 	bl	800ea50 <tcp_close_shutdown>
 800ed28:	4603      	mov	r3, r0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	080169c4 	.word	0x080169c4
 800ed38:	08016b00 	.word	0x08016b00
 800ed3c:	08016a34 	.word	0x08016a34

0800ed40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08e      	sub	sp, #56	@ 0x38
 800ed44:	af04      	add	r7, sp, #16
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d107      	bne.n	800ed60 <tcp_abandon+0x20>
 800ed50:	4b52      	ldr	r3, [pc, #328]	@ (800ee9c <tcp_abandon+0x15c>)
 800ed52:	f240 223d 	movw	r2, #573	@ 0x23d
 800ed56:	4952      	ldr	r1, [pc, #328]	@ (800eea0 <tcp_abandon+0x160>)
 800ed58:	4852      	ldr	r0, [pc, #328]	@ (800eea4 <tcp_abandon+0x164>)
 800ed5a:	f005 fce9 	bl	8014730 <iprintf>
 800ed5e:	e099      	b.n	800ee94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	7d1b      	ldrb	r3, [r3, #20]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d106      	bne.n	800ed76 <tcp_abandon+0x36>
 800ed68:	4b4c      	ldr	r3, [pc, #304]	@ (800ee9c <tcp_abandon+0x15c>)
 800ed6a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ed6e:	494e      	ldr	r1, [pc, #312]	@ (800eea8 <tcp_abandon+0x168>)
 800ed70:	484c      	ldr	r0, [pc, #304]	@ (800eea4 <tcp_abandon+0x164>)
 800ed72:	f005 fcdd 	bl	8014730 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
 800ed7a:	2b0a      	cmp	r3, #10
 800ed7c:	d107      	bne.n	800ed8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	484a      	ldr	r0, [pc, #296]	@ (800eeac <tcp_abandon+0x16c>)
 800ed82:	f000 ffc9 	bl	800fd18 <tcp_pcb_remove>
    tcp_free(pcb);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7ff fdb0 	bl	800e8ec <tcp_free>
 800ed8c:	e082      	b.n	800ee94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eda8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	7d1b      	ldrb	r3, [r3, #20]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d126      	bne.n	800ee06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	8adb      	ldrh	r3, [r3, #22]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d02e      	beq.n	800ee1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800edc0:	4b3b      	ldr	r3, [pc, #236]	@ (800eeb0 <tcp_abandon+0x170>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d105      	bne.n	800edd6 <tcp_abandon+0x96>
 800edca:	4b39      	ldr	r3, [pc, #228]	@ (800eeb0 <tcp_abandon+0x170>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	4a37      	ldr	r2, [pc, #220]	@ (800eeb0 <tcp_abandon+0x170>)
 800edd2:	6013      	str	r3, [r2, #0]
 800edd4:	e013      	b.n	800edfe <tcp_abandon+0xbe>
 800edd6:	4b36      	ldr	r3, [pc, #216]	@ (800eeb0 <tcp_abandon+0x170>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	61fb      	str	r3, [r7, #28]
 800eddc:	e00c      	b.n	800edf8 <tcp_abandon+0xb8>
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d104      	bne.n	800edf2 <tcp_abandon+0xb2>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68da      	ldr	r2, [r3, #12]
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	60da      	str	r2, [r3, #12]
 800edf0:	e005      	b.n	800edfe <tcp_abandon+0xbe>
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	61fb      	str	r3, [r7, #28]
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1ef      	bne.n	800edde <tcp_abandon+0x9e>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	60da      	str	r2, [r3, #12]
 800ee04:	e00b      	b.n	800ee1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	8adb      	ldrh	r3, [r3, #22]
 800ee0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	4828      	ldr	r0, [pc, #160]	@ (800eeb4 <tcp_abandon+0x174>)
 800ee14:	f000 ff80 	bl	800fd18 <tcp_pcb_remove>
 800ee18:	4b27      	ldr	r3, [pc, #156]	@ (800eeb8 <tcp_abandon+0x178>)
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d004      	beq.n	800ee30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 fd22 	bl	800f874 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 fd19 	bl	800f874 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d004      	beq.n	800ee54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fd10 	bl	800f874 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ee54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00e      	beq.n	800ee78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	8b12      	ldrh	r2, [r2, #24]
 800ee64:	9202      	str	r2, [sp, #8]
 800ee66:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ee68:	9201      	str	r2, [sp, #4]
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	69b9      	ldr	r1, [r7, #24]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f004 fcc4 	bl	8013800 <tcp_rst>
    }
    last_state = pcb->state;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7d1b      	ldrb	r3, [r3, #20]
 800ee7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7ff fd34 	bl	800e8ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d004      	beq.n	800ee94 <tcp_abandon+0x154>
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f06f 010c 	mvn.w	r1, #12
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	4798      	blx	r3
  }
}
 800ee94:	3728      	adds	r7, #40	@ 0x28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	080169c4 	.word	0x080169c4
 800eea0:	08016b34 	.word	0x08016b34
 800eea4:	08016a34 	.word	0x08016a34
 800eea8:	08016b50 	.word	0x08016b50
 800eeac:	2400f940 	.word	0x2400f940
 800eeb0:	2400f934 	.word	0x2400f934
 800eeb4:	2400f93c 	.word	0x2400f93c
 800eeb8:	2400f944 	.word	0x2400f944

0800eebc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eec4:	2101      	movs	r1, #1
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7ff ff3a 	bl	800ed40 <tcp_abandon>
}
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <tcp_update_rcv_ann_wnd+0x1c>
 800eee2:	4b25      	ldr	r3, [pc, #148]	@ (800ef78 <tcp_update_rcv_ann_wnd+0xa4>)
 800eee4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800eee8:	4924      	ldr	r1, [pc, #144]	@ (800ef7c <tcp_update_rcv_ann_wnd+0xa8>)
 800eeea:	4825      	ldr	r0, [pc, #148]	@ (800ef80 <tcp_update_rcv_ann_wnd+0xac>)
 800eeec:	f005 fc20 	bl	8014730 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800eef8:	4413      	add	r3, r2
 800eefa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ef04:	f640 3168 	movw	r1, #2920	@ 0xb68
 800ef08:	428a      	cmp	r2, r1
 800ef0a:	bf28      	it	cs
 800ef0c:	460a      	movcs	r2, r1
 800ef0e:	b292      	uxth	r2, r2
 800ef10:	4413      	add	r3, r2
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	db08      	blt.n	800ef2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	e020      	b.n	800ef6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	dd03      	ble.n	800ef42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ef40:	e014      	b.n	800ef6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef54:	d306      	bcc.n	800ef64 <tcp_update_rcv_ann_wnd+0x90>
 800ef56:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <tcp_update_rcv_ann_wnd+0xa4>)
 800ef58:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ef5c:	4909      	ldr	r1, [pc, #36]	@ (800ef84 <tcp_update_rcv_ann_wnd+0xb0>)
 800ef5e:	4808      	ldr	r0, [pc, #32]	@ (800ef80 <tcp_update_rcv_ann_wnd+0xac>)
 800ef60:	f005 fbe6 	bl	8014730 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	b29a      	uxth	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ef6c:	2300      	movs	r3, #0
  }
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	080169c4 	.word	0x080169c4
 800ef7c:	08016c4c 	.word	0x08016c4c
 800ef80:	08016a34 	.word	0x08016a34
 800ef84:	08016c70 	.word	0x08016c70

0800ef88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d107      	bne.n	800efaa <tcp_recved+0x22>
 800ef9a:	4b20      	ldr	r3, [pc, #128]	@ (800f01c <tcp_recved+0x94>)
 800ef9c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800efa0:	491f      	ldr	r1, [pc, #124]	@ (800f020 <tcp_recved+0x98>)
 800efa2:	4820      	ldr	r0, [pc, #128]	@ (800f024 <tcp_recved+0x9c>)
 800efa4:	f005 fbc4 	bl	8014730 <iprintf>
 800efa8:	e034      	b.n	800f014 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	7d1b      	ldrb	r3, [r3, #20]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d106      	bne.n	800efc0 <tcp_recved+0x38>
 800efb2:	4b1a      	ldr	r3, [pc, #104]	@ (800f01c <tcp_recved+0x94>)
 800efb4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800efb8:	491b      	ldr	r1, [pc, #108]	@ (800f028 <tcp_recved+0xa0>)
 800efba:	481a      	ldr	r0, [pc, #104]	@ (800f024 <tcp_recved+0x9c>)
 800efbc:	f005 fbb8 	bl	8014730 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800efc4:	887b      	ldrh	r3, [r7, #2]
 800efc6:	4413      	add	r3, r2
 800efc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800efca:	89fb      	ldrh	r3, [r7, #14]
 800efcc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d804      	bhi.n	800efde <tcp_recved+0x56>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efd8:	89fa      	ldrh	r2, [r7, #14]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d204      	bcs.n	800efe8 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800efe4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800efe6:	e002      	b.n	800efee <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	89fa      	ldrh	r2, [r7, #14]
 800efec:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff ff70 	bl	800eed4 <tcp_update_rcv_ann_wnd>
 800eff4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800effc:	4293      	cmp	r3, r2
 800effe:	d909      	bls.n	800f014 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	8b5b      	ldrh	r3, [r3, #26]
 800f004:	f043 0302 	orr.w	r3, r3, #2
 800f008:	b29a      	uxth	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f003 fe42 	bl	8012c98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	080169c4 	.word	0x080169c4
 800f020:	08016c8c 	.word	0x08016c8c
 800f024:	08016a34 	.word	0x08016a34
 800f028:	08016ca4 	.word	0x08016ca4

0800f02c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f02c:	b5b0      	push	{r4, r5, r7, lr}
 800f02e:	b090      	sub	sp, #64	@ 0x40
 800f030:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f038:	4b95      	ldr	r3, [pc, #596]	@ (800f290 <tcp_slowtmr+0x264>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	3301      	adds	r3, #1
 800f03e:	4a94      	ldr	r2, [pc, #592]	@ (800f290 <tcp_slowtmr+0x264>)
 800f040:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f042:	4b94      	ldr	r3, [pc, #592]	@ (800f294 <tcp_slowtmr+0x268>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	3301      	adds	r3, #1
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	4b92      	ldr	r3, [pc, #584]	@ (800f294 <tcp_slowtmr+0x268>)
 800f04c:	701a      	strb	r2, [r3, #0]
 800f04e:	e000      	b.n	800f052 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f050:	bf00      	nop
  prev = NULL;
 800f052:	2300      	movs	r3, #0
 800f054:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f056:	4b90      	ldr	r3, [pc, #576]	@ (800f298 <tcp_slowtmr+0x26c>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f05c:	e29d      	b.n	800f59a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d106      	bne.n	800f074 <tcp_slowtmr+0x48>
 800f066:	4b8d      	ldr	r3, [pc, #564]	@ (800f29c <tcp_slowtmr+0x270>)
 800f068:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f06c:	498c      	ldr	r1, [pc, #560]	@ (800f2a0 <tcp_slowtmr+0x274>)
 800f06e:	488d      	ldr	r0, [pc, #564]	@ (800f2a4 <tcp_slowtmr+0x278>)
 800f070:	f005 fb5e 	bl	8014730 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f076:	7d1b      	ldrb	r3, [r3, #20]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d106      	bne.n	800f08a <tcp_slowtmr+0x5e>
 800f07c:	4b87      	ldr	r3, [pc, #540]	@ (800f29c <tcp_slowtmr+0x270>)
 800f07e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f082:	4989      	ldr	r1, [pc, #548]	@ (800f2a8 <tcp_slowtmr+0x27c>)
 800f084:	4887      	ldr	r0, [pc, #540]	@ (800f2a4 <tcp_slowtmr+0x278>)
 800f086:	f005 fb53 	bl	8014730 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08c:	7d1b      	ldrb	r3, [r3, #20]
 800f08e:	2b0a      	cmp	r3, #10
 800f090:	d106      	bne.n	800f0a0 <tcp_slowtmr+0x74>
 800f092:	4b82      	ldr	r3, [pc, #520]	@ (800f29c <tcp_slowtmr+0x270>)
 800f094:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f098:	4984      	ldr	r1, [pc, #528]	@ (800f2ac <tcp_slowtmr+0x280>)
 800f09a:	4882      	ldr	r0, [pc, #520]	@ (800f2a4 <tcp_slowtmr+0x278>)
 800f09c:	f005 fb48 	bl	8014730 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a2:	7f9a      	ldrb	r2, [r3, #30]
 800f0a4:	4b7b      	ldr	r3, [pc, #492]	@ (800f294 <tcp_slowtmr+0x268>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d105      	bne.n	800f0b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f0b6:	e270      	b.n	800f59a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f0b8:	4b76      	ldr	r3, [pc, #472]	@ (800f294 <tcp_slowtmr+0x268>)
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ce:	7d1b      	ldrb	r3, [r3, #20]
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d10a      	bne.n	800f0ea <tcp_slowtmr+0xbe>
 800f0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d905      	bls.n	800f0ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f0de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0e8:	e11e      	b.n	800f328 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f0f0:	2b0b      	cmp	r3, #11
 800f0f2:	d905      	bls.n	800f100 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0fe:	e113      	b.n	800f328 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f102:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f106:	2b00      	cmp	r3, #0
 800f108:	d075      	beq.n	800f1f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d006      	beq.n	800f120 <tcp_slowtmr+0xf4>
 800f112:	4b62      	ldr	r3, [pc, #392]	@ (800f29c <tcp_slowtmr+0x270>)
 800f114:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f118:	4965      	ldr	r1, [pc, #404]	@ (800f2b0 <tcp_slowtmr+0x284>)
 800f11a:	4862      	ldr	r0, [pc, #392]	@ (800f2a4 <tcp_slowtmr+0x278>)
 800f11c:	f005 fb08 	bl	8014730 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f124:	2b00      	cmp	r3, #0
 800f126:	d106      	bne.n	800f136 <tcp_slowtmr+0x10a>
 800f128:	4b5c      	ldr	r3, [pc, #368]	@ (800f29c <tcp_slowtmr+0x270>)
 800f12a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f12e:	4961      	ldr	r1, [pc, #388]	@ (800f2b4 <tcp_slowtmr+0x288>)
 800f130:	485c      	ldr	r0, [pc, #368]	@ (800f2a4 <tcp_slowtmr+0x278>)
 800f132:	f005 fafd 	bl	8014730 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f138:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f13c:	2b0b      	cmp	r3, #11
 800f13e:	d905      	bls.n	800f14c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f144:	3301      	adds	r3, #1
 800f146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f14a:	e0ed      	b.n	800f328 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f14e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f152:	3b01      	subs	r3, #1
 800f154:	4a58      	ldr	r2, [pc, #352]	@ (800f2b8 <tcp_slowtmr+0x28c>)
 800f156:	5cd3      	ldrb	r3, [r2, r3]
 800f158:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f160:	7c7a      	ldrb	r2, [r7, #17]
 800f162:	429a      	cmp	r2, r3
 800f164:	d907      	bls.n	800f176 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f168:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f16c:	3301      	adds	r3, #1
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f172:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f17c:	7c7a      	ldrb	r2, [r7, #17]
 800f17e:	429a      	cmp	r2, r3
 800f180:	f200 80d2 	bhi.w	800f328 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f184:	2301      	movs	r3, #1
 800f186:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d108      	bne.n	800f1a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f194:	f004 fc28 	bl	80139e8 <tcp_zero_window_probe>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d014      	beq.n	800f1c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f19e:	2300      	movs	r3, #0
 800f1a0:	623b      	str	r3, [r7, #32]
 800f1a2:	e011      	b.n	800f1c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1ae:	f003 faed 	bl	801278c <tcp_split_unsent_seg>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d107      	bne.n	800f1c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1ba:	f003 fd6d 	bl	8012c98 <tcp_output>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f1c8:	6a3b      	ldr	r3, [r7, #32]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 80ac 	beq.w	800f328 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f1de:	2b06      	cmp	r3, #6
 800f1e0:	f200 80a2 	bhi.w	800f328 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f1f4:	e098      	b.n	800f328 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	db0f      	blt.n	800f220 <tcp_slowtmr+0x1f4>
 800f200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f202:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f206:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d008      	beq.n	800f220 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f210:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f214:	b29b      	uxth	r3, r3
 800f216:	3301      	adds	r3, #1
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b21a      	sxth	r2, r3
 800f21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f222:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f228:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f22c:	429a      	cmp	r2, r3
 800f22e:	db7b      	blt.n	800f328 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f232:	f004 f825 	bl	8013280 <tcp_rexmit_rto_prepare>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d007      	beq.n	800f24c <tcp_slowtmr+0x220>
 800f23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f240:	2b00      	cmp	r3, #0
 800f242:	d171      	bne.n	800f328 <tcp_slowtmr+0x2fc>
 800f244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d06d      	beq.n	800f328 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24e:	7d1b      	ldrb	r3, [r3, #20]
 800f250:	2b02      	cmp	r3, #2
 800f252:	d03a      	beq.n	800f2ca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f25a:	2b0c      	cmp	r3, #12
 800f25c:	bf28      	it	cs
 800f25e:	230c      	movcs	r3, #12
 800f260:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f264:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f268:	10db      	asrs	r3, r3, #3
 800f26a:	b21b      	sxth	r3, r3
 800f26c:	461a      	mov	r2, r3
 800f26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f270:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f274:	4413      	add	r3, r2
 800f276:	7efa      	ldrb	r2, [r7, #27]
 800f278:	4910      	ldr	r1, [pc, #64]	@ (800f2bc <tcp_slowtmr+0x290>)
 800f27a:	5c8a      	ldrb	r2, [r1, r2]
 800f27c:	4093      	lsls	r3, r2
 800f27e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f286:	4293      	cmp	r3, r2
 800f288:	dc1a      	bgt.n	800f2c0 <tcp_slowtmr+0x294>
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	b21a      	sxth	r2, r3
 800f28e:	e019      	b.n	800f2c4 <tcp_slowtmr+0x298>
 800f290:	2400f930 	.word	0x2400f930
 800f294:	2400f946 	.word	0x2400f946
 800f298:	2400f93c 	.word	0x2400f93c
 800f29c:	080169c4 	.word	0x080169c4
 800f2a0:	08016d34 	.word	0x08016d34
 800f2a4:	08016a34 	.word	0x08016a34
 800f2a8:	08016d60 	.word	0x08016d60
 800f2ac:	08016d8c 	.word	0x08016d8c
 800f2b0:	08016dbc 	.word	0x08016dbc
 800f2b4:	08016df0 	.word	0x08016df0
 800f2b8:	08018538 	.word	0x08018538
 800f2bc:	08018528 	.word	0x08018528
 800f2c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	bf28      	it	cs
 800f2e0:	4613      	movcs	r3, r2
 800f2e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f2e4:	8a7b      	ldrh	r3, [r7, #18]
 800f2e6:	085b      	lsrs	r3, r3, #1
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2fa:	005b      	lsls	r3, r3, #1
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d206      	bcs.n	800f310 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	b29a      	uxth	r2, r3
 800f30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f312:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f316:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f324:	f004 f81c 	bl	8013360 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
 800f32c:	2b06      	cmp	r3, #6
 800f32e:	d111      	bne.n	800f354 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f332:	8b5b      	ldrh	r3, [r3, #26]
 800f334:	f003 0310 	and.w	r3, r3, #16
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00b      	beq.n	800f354 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f33c:	4b9c      	ldr	r3, [pc, #624]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	1ad3      	subs	r3, r2, r3
 800f346:	2b28      	cmp	r3, #40	@ 0x28
 800f348:	d904      	bls.n	800f354 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f34a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f34e:	3301      	adds	r3, #1
 800f350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f356:	7a5b      	ldrb	r3, [r3, #9]
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d04a      	beq.n	800f3f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f362:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f364:	2b04      	cmp	r3, #4
 800f366:	d003      	beq.n	800f370 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f36c:	2b07      	cmp	r3, #7
 800f36e:	d142      	bne.n	800f3f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f370:	4b8f      	ldr	r3, [pc, #572]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f376:	6a1b      	ldr	r3, [r3, #32]
 800f378:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f380:	4b8c      	ldr	r3, [pc, #560]	@ (800f5b4 <tcp_slowtmr+0x588>)
 800f382:	440b      	add	r3, r1
 800f384:	498c      	ldr	r1, [pc, #560]	@ (800f5b8 <tcp_slowtmr+0x58c>)
 800f386:	fba1 1303 	umull	r1, r3, r1, r3
 800f38a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d90a      	bls.n	800f3a6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f394:	3301      	adds	r3, #1
 800f396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f39a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f39e:	3301      	adds	r3, #1
 800f3a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f3a4:	e027      	b.n	800f3f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3a6:	4b82      	ldr	r3, [pc, #520]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ac:	6a1b      	ldr	r3, [r3, #32]
 800f3ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f3bc:	4618      	mov	r0, r3
 800f3be:	4b7f      	ldr	r3, [pc, #508]	@ (800f5bc <tcp_slowtmr+0x590>)
 800f3c0:	fb00 f303 	mul.w	r3, r0, r3
 800f3c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f3c6:	497c      	ldr	r1, [pc, #496]	@ (800f5b8 <tcp_slowtmr+0x58c>)
 800f3c8:	fba1 1303 	umull	r1, r3, r1, r3
 800f3cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d911      	bls.n	800f3f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f3d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3d4:	f004 fac8 	bl	8013968 <tcp_keepalive>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f3de:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d107      	bne.n	800f3f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d011      	beq.n	800f422 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f3fe:	4b6c      	ldr	r3, [pc, #432]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	1ad2      	subs	r2, r2, r3
 800f408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f40e:	4619      	mov	r1, r3
 800f410:	460b      	mov	r3, r1
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	440b      	add	r3, r1
 800f416:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f418:	429a      	cmp	r2, r3
 800f41a:	d302      	bcc.n	800f422 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800f41c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f41e:	f000 fddf 	bl	800ffe0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f424:	7d1b      	ldrb	r3, [r3, #20]
 800f426:	2b03      	cmp	r3, #3
 800f428:	d10b      	bne.n	800f442 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f42a:	4b61      	ldr	r3, [pc, #388]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	2b28      	cmp	r3, #40	@ 0x28
 800f436:	d904      	bls.n	800f442 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f43c:	3301      	adds	r3, #1
 800f43e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f444:	7d1b      	ldrb	r3, [r3, #20]
 800f446:	2b09      	cmp	r3, #9
 800f448:	d10b      	bne.n	800f462 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f44a:	4b59      	ldr	r3, [pc, #356]	@ (800f5b0 <tcp_slowtmr+0x584>)
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	2bf0      	cmp	r3, #240	@ 0xf0
 800f456:	d904      	bls.n	800f462 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f45c:	3301      	adds	r3, #1
 800f45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f466:	2b00      	cmp	r3, #0
 800f468:	d060      	beq.n	800f52c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f470:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f474:	f000 fc00 	bl	800fc78 <tcp_pcb_purge>
      if (prev != NULL) {
 800f478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d010      	beq.n	800f4a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f47e:	4b50      	ldr	r3, [pc, #320]	@ (800f5c0 <tcp_slowtmr+0x594>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f484:	429a      	cmp	r2, r3
 800f486:	d106      	bne.n	800f496 <tcp_slowtmr+0x46a>
 800f488:	4b4e      	ldr	r3, [pc, #312]	@ (800f5c4 <tcp_slowtmr+0x598>)
 800f48a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f48e:	494e      	ldr	r1, [pc, #312]	@ (800f5c8 <tcp_slowtmr+0x59c>)
 800f490:	484e      	ldr	r0, [pc, #312]	@ (800f5cc <tcp_slowtmr+0x5a0>)
 800f492:	f005 f94d 	bl	8014730 <iprintf>
        prev->next = pcb->next;
 800f496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f498:	68da      	ldr	r2, [r3, #12]
 800f49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49c:	60da      	str	r2, [r3, #12]
 800f49e:	e00f      	b.n	800f4c0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f4a0:	4b47      	ldr	r3, [pc, #284]	@ (800f5c0 <tcp_slowtmr+0x594>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d006      	beq.n	800f4b8 <tcp_slowtmr+0x48c>
 800f4aa:	4b46      	ldr	r3, [pc, #280]	@ (800f5c4 <tcp_slowtmr+0x598>)
 800f4ac:	f240 5271 	movw	r2, #1393	@ 0x571
 800f4b0:	4947      	ldr	r1, [pc, #284]	@ (800f5d0 <tcp_slowtmr+0x5a4>)
 800f4b2:	4846      	ldr	r0, [pc, #280]	@ (800f5cc <tcp_slowtmr+0x5a0>)
 800f4b4:	f005 f93c 	bl	8014730 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	4a40      	ldr	r2, [pc, #256]	@ (800f5c0 <tcp_slowtmr+0x594>)
 800f4be:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d013      	beq.n	800f4f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ca:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f4d0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4d8:	8ad2      	ldrh	r2, [r2, #22]
 800f4da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4dc:	8b09      	ldrh	r1, [r1, #24]
 800f4de:	9102      	str	r1, [sp, #8]
 800f4e0:	9201      	str	r2, [sp, #4]
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	462b      	mov	r3, r5
 800f4e6:	4622      	mov	r2, r4
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4ec:	f004 f988 	bl	8013800 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f8:	7d1b      	ldrb	r3, [r3, #20]
 800f4fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f506:	6838      	ldr	r0, [r7, #0]
 800f508:	f7ff f9f0 	bl	800e8ec <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f50c:	4b31      	ldr	r3, [pc, #196]	@ (800f5d4 <tcp_slowtmr+0x5a8>)
 800f50e:	2200      	movs	r2, #0
 800f510:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d004      	beq.n	800f522 <tcp_slowtmr+0x4f6>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f06f 010c 	mvn.w	r1, #12
 800f51e:	68b8      	ldr	r0, [r7, #8]
 800f520:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f522:	4b2c      	ldr	r3, [pc, #176]	@ (800f5d4 <tcp_slowtmr+0x5a8>)
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d037      	beq.n	800f59a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f52a:	e592      	b.n	800f052 <tcp_slowtmr+0x26>
      prev = pcb;
 800f52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f538:	7f1b      	ldrb	r3, [r3, #28]
 800f53a:	3301      	adds	r3, #1
 800f53c:	b2da      	uxtb	r2, r3
 800f53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f540:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f544:	7f1a      	ldrb	r2, [r3, #28]
 800f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f548:	7f5b      	ldrb	r3, [r3, #29]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d325      	bcc.n	800f59a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f550:	2200      	movs	r2, #0
 800f552:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f554:	4b1f      	ldr	r3, [pc, #124]	@ (800f5d4 <tcp_slowtmr+0x5a8>)
 800f556:	2200      	movs	r2, #0
 800f558:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00b      	beq.n	800f57c <tcp_slowtmr+0x550>
 800f564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f56a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f56c:	6912      	ldr	r2, [r2, #16]
 800f56e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f570:	4610      	mov	r0, r2
 800f572:	4798      	blx	r3
 800f574:	4603      	mov	r3, r0
 800f576:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f57a:	e002      	b.n	800f582 <tcp_slowtmr+0x556>
 800f57c:	2300      	movs	r3, #0
 800f57e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f582:	4b14      	ldr	r3, [pc, #80]	@ (800f5d4 <tcp_slowtmr+0x5a8>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f47f ad62 	bne.w	800f050 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f58c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f596:	f003 fb7f 	bl	8012c98 <tcp_output>
  while (pcb != NULL) {
 800f59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f47f ad5e 	bne.w	800f05e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f5d8 <tcp_slowtmr+0x5ac>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f5ac:	e069      	b.n	800f682 <tcp_slowtmr+0x656>
 800f5ae:	bf00      	nop
 800f5b0:	2400f930 	.word	0x2400f930
 800f5b4:	000a4cb8 	.word	0x000a4cb8
 800f5b8:	10624dd3 	.word	0x10624dd3
 800f5bc:	000124f8 	.word	0x000124f8
 800f5c0:	2400f93c 	.word	0x2400f93c
 800f5c4:	080169c4 	.word	0x080169c4
 800f5c8:	08016e28 	.word	0x08016e28
 800f5cc:	08016a34 	.word	0x08016a34
 800f5d0:	08016e54 	.word	0x08016e54
 800f5d4:	2400f944 	.word	0x2400f944
 800f5d8:	2400f940 	.word	0x2400f940
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5de:	7d1b      	ldrb	r3, [r3, #20]
 800f5e0:	2b0a      	cmp	r3, #10
 800f5e2:	d006      	beq.n	800f5f2 <tcp_slowtmr+0x5c6>
 800f5e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f694 <tcp_slowtmr+0x668>)
 800f5e6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f5ea:	492b      	ldr	r1, [pc, #172]	@ (800f698 <tcp_slowtmr+0x66c>)
 800f5ec:	482b      	ldr	r0, [pc, #172]	@ (800f69c <tcp_slowtmr+0x670>)
 800f5ee:	f005 f89f 	bl	8014730 <iprintf>
    pcb_remove = 0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f5f8:	4b29      	ldr	r3, [pc, #164]	@ (800f6a0 <tcp_slowtmr+0x674>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fe:	6a1b      	ldr	r3, [r3, #32]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	2bf0      	cmp	r3, #240	@ 0xf0
 800f604:	d904      	bls.n	800f610 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f60a:	3301      	adds	r3, #1
 800f60c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f614:	2b00      	cmp	r3, #0
 800f616:	d02f      	beq.n	800f678 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f61a:	f000 fb2d 	bl	800fc78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f620:	2b00      	cmp	r3, #0
 800f622:	d010      	beq.n	800f646 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f624:	4b1f      	ldr	r3, [pc, #124]	@ (800f6a4 <tcp_slowtmr+0x678>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d106      	bne.n	800f63c <tcp_slowtmr+0x610>
 800f62e:	4b19      	ldr	r3, [pc, #100]	@ (800f694 <tcp_slowtmr+0x668>)
 800f630:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f634:	491c      	ldr	r1, [pc, #112]	@ (800f6a8 <tcp_slowtmr+0x67c>)
 800f636:	4819      	ldr	r0, [pc, #100]	@ (800f69c <tcp_slowtmr+0x670>)
 800f638:	f005 f87a 	bl	8014730 <iprintf>
        prev->next = pcb->next;
 800f63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f63e:	68da      	ldr	r2, [r3, #12]
 800f640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f642:	60da      	str	r2, [r3, #12]
 800f644:	e00f      	b.n	800f666 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f646:	4b17      	ldr	r3, [pc, #92]	@ (800f6a4 <tcp_slowtmr+0x678>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d006      	beq.n	800f65e <tcp_slowtmr+0x632>
 800f650:	4b10      	ldr	r3, [pc, #64]	@ (800f694 <tcp_slowtmr+0x668>)
 800f652:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f656:	4915      	ldr	r1, [pc, #84]	@ (800f6ac <tcp_slowtmr+0x680>)
 800f658:	4810      	ldr	r0, [pc, #64]	@ (800f69c <tcp_slowtmr+0x670>)
 800f65a:	f005 f869 	bl	8014730 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	4a10      	ldr	r2, [pc, #64]	@ (800f6a4 <tcp_slowtmr+0x678>)
 800f664:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f668:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f670:	69f8      	ldr	r0, [r7, #28]
 800f672:	f7ff f93b 	bl	800e8ec <tcp_free>
 800f676:	e004      	b.n	800f682 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1a9      	bne.n	800f5dc <tcp_slowtmr+0x5b0>
    }
  }
}
 800f688:	bf00      	nop
 800f68a:	bf00      	nop
 800f68c:	3730      	adds	r7, #48	@ 0x30
 800f68e:	46bd      	mov	sp, r7
 800f690:	bdb0      	pop	{r4, r5, r7, pc}
 800f692:	bf00      	nop
 800f694:	080169c4 	.word	0x080169c4
 800f698:	08016e80 	.word	0x08016e80
 800f69c:	08016a34 	.word	0x08016a34
 800f6a0:	2400f930 	.word	0x2400f930
 800f6a4:	2400f940 	.word	0x2400f940
 800f6a8:	08016eb0 	.word	0x08016eb0
 800f6ac:	08016ed8 	.word	0x08016ed8

0800f6b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f6b6:	4b2d      	ldr	r3, [pc, #180]	@ (800f76c <tcp_fasttmr+0xbc>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	4b2b      	ldr	r3, [pc, #172]	@ (800f76c <tcp_fasttmr+0xbc>)
 800f6c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800f770 <tcp_fasttmr+0xc0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f6c8:	e048      	b.n	800f75c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	7f9a      	ldrb	r2, [r3, #30]
 800f6ce:	4b27      	ldr	r3, [pc, #156]	@ (800f76c <tcp_fasttmr+0xbc>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d03f      	beq.n	800f756 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f6d6:	4b25      	ldr	r3, [pc, #148]	@ (800f76c <tcp_fasttmr+0xbc>)
 800f6d8:	781a      	ldrb	r2, [r3, #0]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	8b5b      	ldrh	r3, [r3, #26]
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d010      	beq.n	800f70c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	8b5b      	ldrh	r3, [r3, #26]
 800f6ee:	f043 0302 	orr.w	r3, r3, #2
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f003 facd 	bl	8012c98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	8b5b      	ldrh	r3, [r3, #26]
 800f702:	f023 0303 	bic.w	r3, r3, #3
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	8b5b      	ldrh	r3, [r3, #26]
 800f710:	f003 0308 	and.w	r3, r3, #8
 800f714:	2b00      	cmp	r3, #0
 800f716:	d009      	beq.n	800f72c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	8b5b      	ldrh	r3, [r3, #26]
 800f71c:	f023 0308 	bic.w	r3, r3, #8
 800f720:	b29a      	uxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fa74 	bl	800ec14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00a      	beq.n	800f750 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f73a:	4b0e      	ldr	r3, [pc, #56]	@ (800f774 <tcp_fasttmr+0xc4>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f819 	bl	800f778 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f746:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <tcp_fasttmr+0xc4>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d000      	beq.n	800f750 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f74e:	e7b8      	b.n	800f6c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	607b      	str	r3, [r7, #4]
 800f754:	e002      	b.n	800f75c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1b3      	bne.n	800f6ca <tcp_fasttmr+0x1a>
    }
  }
}
 800f762:	bf00      	nop
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	2400f946 	.word	0x2400f946
 800f770:	2400f93c 	.word	0x2400f93c
 800f774:	2400f944 	.word	0x2400f944

0800f778 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f778:	b590      	push	{r4, r7, lr}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d109      	bne.n	800f79a <tcp_process_refused_data+0x22>
 800f786:	4b38      	ldr	r3, [pc, #224]	@ (800f868 <tcp_process_refused_data+0xf0>)
 800f788:	f240 6209 	movw	r2, #1545	@ 0x609
 800f78c:	4937      	ldr	r1, [pc, #220]	@ (800f86c <tcp_process_refused_data+0xf4>)
 800f78e:	4838      	ldr	r0, [pc, #224]	@ (800f870 <tcp_process_refused_data+0xf8>)
 800f790:	f004 ffce 	bl	8014730 <iprintf>
 800f794:	f06f 030f 	mvn.w	r3, #15
 800f798:	e061      	b.n	800f85e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f79e:	7b5b      	ldrb	r3, [r3, #13]
 800f7a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00b      	beq.n	800f7d0 <tcp_process_refused_data+0x58>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6918      	ldr	r0, [r3, #16]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	47a0      	blx	r4
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	73fb      	strb	r3, [r7, #15]
 800f7ce:	e007      	b.n	800f7e0 <tcp_process_refused_data+0x68>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	6879      	ldr	r1, [r7, #4]
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	f000 f8a6 	bl	800f928 <tcp_recv_null>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d12b      	bne.n	800f840 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ea:	f003 0320 	and.w	r3, r3, #32
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d034      	beq.n	800f85c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7f6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d005      	beq.n	800f80a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f802:	3301      	adds	r3, #1
 800f804:	b29a      	uxth	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00b      	beq.n	800f82c <tcp_process_refused_data+0xb4>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6918      	ldr	r0, [r3, #16]
 800f81e:	2300      	movs	r3, #0
 800f820:	2200      	movs	r2, #0
 800f822:	6879      	ldr	r1, [r7, #4]
 800f824:	47a0      	blx	r4
 800f826:	4603      	mov	r3, r0
 800f828:	73fb      	strb	r3, [r7, #15]
 800f82a:	e001      	b.n	800f830 <tcp_process_refused_data+0xb8>
 800f82c:	2300      	movs	r3, #0
 800f82e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f834:	f113 0f0d 	cmn.w	r3, #13
 800f838:	d110      	bne.n	800f85c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800f83a:	f06f 030c 	mvn.w	r3, #12
 800f83e:	e00e      	b.n	800f85e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800f840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f844:	f113 0f0d 	cmn.w	r3, #13
 800f848:	d102      	bne.n	800f850 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f84a:	f06f 030c 	mvn.w	r3, #12
 800f84e:	e006      	b.n	800f85e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	68ba      	ldr	r2, [r7, #8]
 800f854:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f856:	f06f 0304 	mvn.w	r3, #4
 800f85a:	e000      	b.n	800f85e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	bd90      	pop	{r4, r7, pc}
 800f866:	bf00      	nop
 800f868:	080169c4 	.word	0x080169c4
 800f86c:	08016f00 	.word	0x08016f00
 800f870:	08016a34 	.word	0x08016a34

0800f874 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f87c:	e007      	b.n	800f88e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 f80a 	bl	800f89e <tcp_seg_free>
    seg = next;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1f4      	bne.n	800f87e <tcp_segs_free+0xa>
  }
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00c      	beq.n	800f8c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d004      	beq.n	800f8be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fe fc55 	bl	800e168 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	2003      	movs	r0, #3
 800f8c2:	f7fd fdad 	bl	800d420 <memp_free>
  }
}
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
	...

0800f8d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <tcp_seg_copy+0x1c>
 800f8de:	4b0f      	ldr	r3, [pc, #60]	@ (800f91c <tcp_seg_copy+0x4c>)
 800f8e0:	f240 6282 	movw	r2, #1666	@ 0x682
 800f8e4:	490e      	ldr	r1, [pc, #56]	@ (800f920 <tcp_seg_copy+0x50>)
 800f8e6:	480f      	ldr	r0, [pc, #60]	@ (800f924 <tcp_seg_copy+0x54>)
 800f8e8:	f004 ff22 	bl	8014730 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f8ec:	2003      	movs	r0, #3
 800f8ee:	f7fd fd21 	bl	800d334 <memp_malloc>
 800f8f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <tcp_seg_copy+0x2e>
    return NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	e00a      	b.n	800f914 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f8fe:	2210      	movs	r2, #16
 800f900:	6879      	ldr	r1, [r7, #4]
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f005 f84d 	bl	80149a2 <memcpy>
  pbuf_ref(cseg->p);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fcd1 	bl	800e2b4 <pbuf_ref>
  return cseg;
 800f912:	68fb      	ldr	r3, [r7, #12]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3710      	adds	r7, #16
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	080169c4 	.word	0x080169c4
 800f920:	08016f44 	.word	0x08016f44
 800f924:	08016a34 	.word	0x08016a34

0800f928 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
 800f934:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d109      	bne.n	800f950 <tcp_recv_null+0x28>
 800f93c:	4b12      	ldr	r3, [pc, #72]	@ (800f988 <tcp_recv_null+0x60>)
 800f93e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f942:	4912      	ldr	r1, [pc, #72]	@ (800f98c <tcp_recv_null+0x64>)
 800f944:	4812      	ldr	r0, [pc, #72]	@ (800f990 <tcp_recv_null+0x68>)
 800f946:	f004 fef3 	bl	8014730 <iprintf>
 800f94a:	f06f 030f 	mvn.w	r3, #15
 800f94e:	e016      	b.n	800f97e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d009      	beq.n	800f96a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	891b      	ldrh	r3, [r3, #8]
 800f95a:	4619      	mov	r1, r3
 800f95c:	68b8      	ldr	r0, [r7, #8]
 800f95e:	f7ff fb13 	bl	800ef88 <tcp_recved>
    pbuf_free(p);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7fe fc00 	bl	800e168 <pbuf_free>
 800f968:	e008      	b.n	800f97c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f96a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d104      	bne.n	800f97c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f972:	68b8      	ldr	r0, [r7, #8]
 800f974:	f7ff f9b8 	bl	800ece8 <tcp_close>
 800f978:	4603      	mov	r3, r0
 800f97a:	e000      	b.n	800f97e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	080169c4 	.word	0x080169c4
 800f98c:	08016f60 	.word	0x08016f60
 800f990:	08016a34 	.word	0x08016a34

0800f994 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f99e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	db01      	blt.n	800f9aa <tcp_kill_prio+0x16>
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	e000      	b.n	800f9ac <tcp_kill_prio+0x18>
 800f9aa:	237f      	movs	r3, #127	@ 0x7f
 800f9ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f9ae:	7afb      	ldrb	r3, [r7, #11]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d034      	beq.n	800fa1e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f9b4:	7afb      	ldrb	r3, [r7, #11]
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9c2:	4b19      	ldr	r3, [pc, #100]	@ (800fa28 <tcp_kill_prio+0x94>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	617b      	str	r3, [r7, #20]
 800f9c8:	e01f      	b.n	800fa0a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	7d5b      	ldrb	r3, [r3, #21]
 800f9ce:	7afa      	ldrb	r2, [r7, #11]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d80c      	bhi.n	800f9ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f9d8:	7afa      	ldrb	r2, [r7, #11]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d112      	bne.n	800fa04 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f9de:	4b13      	ldr	r3, [pc, #76]	@ (800fa2c <tcp_kill_prio+0x98>)
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d80a      	bhi.n	800fa04 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800fa2c <tcp_kill_prio+0x98>)
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	1ad3      	subs	r3, r2, r3
 800f9f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	7d5b      	ldrb	r3, [r3, #21]
 800fa02:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	617b      	str	r3, [r7, #20]
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1dc      	bne.n	800f9ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d004      	beq.n	800fa20 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa16:	6938      	ldr	r0, [r7, #16]
 800fa18:	f7ff fa50 	bl	800eebc <tcp_abort>
 800fa1c:	e000      	b.n	800fa20 <tcp_kill_prio+0x8c>
    return;
 800fa1e:	bf00      	nop
  }
}
 800fa20:	3718      	adds	r7, #24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	2400f93c 	.word	0x2400f93c
 800fa2c:	2400f930 	.word	0x2400f930

0800fa30 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4603      	mov	r3, r0
 800fa38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	2b08      	cmp	r3, #8
 800fa3e:	d009      	beq.n	800fa54 <tcp_kill_state+0x24>
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	2b09      	cmp	r3, #9
 800fa44:	d006      	beq.n	800fa54 <tcp_kill_state+0x24>
 800fa46:	4b1a      	ldr	r3, [pc, #104]	@ (800fab0 <tcp_kill_state+0x80>)
 800fa48:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800fa4c:	4919      	ldr	r1, [pc, #100]	@ (800fab4 <tcp_kill_state+0x84>)
 800fa4e:	481a      	ldr	r0, [pc, #104]	@ (800fab8 <tcp_kill_state+0x88>)
 800fa50:	f004 fe6e 	bl	8014730 <iprintf>

  inactivity = 0;
 800fa54:	2300      	movs	r3, #0
 800fa56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa5c:	4b17      	ldr	r3, [pc, #92]	@ (800fabc <tcp_kill_state+0x8c>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	e017      	b.n	800fa94 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	7d1b      	ldrb	r3, [r3, #20]
 800fa68:	79fa      	ldrb	r2, [r7, #7]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d10f      	bne.n	800fa8e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa6e:	4b14      	ldr	r3, [pc, #80]	@ (800fac0 <tcp_kill_state+0x90>)
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	6a1b      	ldr	r3, [r3, #32]
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	68fa      	ldr	r2, [r7, #12]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d807      	bhi.n	800fa8e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fa7e:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <tcp_kill_state+0x90>)
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	6a1b      	ldr	r3, [r3, #32]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	617b      	str	r3, [r7, #20]
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1e4      	bne.n	800fa64 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800faa0:	2100      	movs	r1, #0
 800faa2:	6938      	ldr	r0, [r7, #16]
 800faa4:	f7ff f94c 	bl	800ed40 <tcp_abandon>
  }
}
 800faa8:	bf00      	nop
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	080169c4 	.word	0x080169c4
 800fab4:	08016f7c 	.word	0x08016f7c
 800fab8:	08016a34 	.word	0x08016a34
 800fabc:	2400f93c 	.word	0x2400f93c
 800fac0:	2400f930 	.word	0x2400f930

0800fac4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800face:	2300      	movs	r3, #0
 800fad0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fad2:	4b12      	ldr	r3, [pc, #72]	@ (800fb1c <tcp_kill_timewait+0x58>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60fb      	str	r3, [r7, #12]
 800fad8:	e012      	b.n	800fb00 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fada:	4b11      	ldr	r3, [pc, #68]	@ (800fb20 <tcp_kill_timewait+0x5c>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d807      	bhi.n	800fafa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800faea:	4b0d      	ldr	r3, [pc, #52]	@ (800fb20 <tcp_kill_timewait+0x5c>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	60fb      	str	r3, [r7, #12]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e9      	bne.n	800fada <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d002      	beq.n	800fb12 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fb0c:	68b8      	ldr	r0, [r7, #8]
 800fb0e:	f7ff f9d5 	bl	800eebc <tcp_abort>
  }
}
 800fb12:	bf00      	nop
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	2400f940 	.word	0x2400f940
 800fb20:	2400f930 	.word	0x2400f930

0800fb24 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fb2a:	4b10      	ldr	r3, [pc, #64]	@ (800fb6c <tcp_handle_closepend+0x48>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fb30:	e014      	b.n	800fb5c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	8b5b      	ldrh	r3, [r3, #26]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d009      	beq.n	800fb58 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	8b5b      	ldrh	r3, [r3, #26]
 800fb48:	f023 0308 	bic.w	r3, r3, #8
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff f85e 	bl	800ec14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1e7      	bne.n	800fb32 <tcp_handle_closepend+0xe>
  }
}
 800fb62:	bf00      	nop
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	2400f93c 	.word	0x2400f93c

0800fb70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	4603      	mov	r3, r0
 800fb78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	f7fd fbda 	bl	800d334 <memp_malloc>
 800fb80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d126      	bne.n	800fbd6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fb88:	f7ff ffcc 	bl	800fb24 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fb8c:	f7ff ff9a 	bl	800fac4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb90:	2001      	movs	r0, #1
 800fb92:	f7fd fbcf 	bl	800d334 <memp_malloc>
 800fb96:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d11b      	bne.n	800fbd6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fb9e:	2009      	movs	r0, #9
 800fba0:	f7ff ff46 	bl	800fa30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fba4:	2001      	movs	r0, #1
 800fba6:	f7fd fbc5 	bl	800d334 <memp_malloc>
 800fbaa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d111      	bne.n	800fbd6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fbb2:	2008      	movs	r0, #8
 800fbb4:	f7ff ff3c 	bl	800fa30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbb8:	2001      	movs	r0, #1
 800fbba:	f7fd fbbb 	bl	800d334 <memp_malloc>
 800fbbe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d107      	bne.n	800fbd6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fee3 	bl	800f994 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbce:	2001      	movs	r0, #1
 800fbd0:	f7fd fbb0 	bl	800d334 <memp_malloc>
 800fbd4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d03f      	beq.n	800fc5c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fbdc:	229c      	movs	r2, #156	@ 0x9c
 800fbde:	2100      	movs	r1, #0
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	f004 fe0a 	bl	80147fa <memset>
    pcb->prio = prio;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	79fa      	ldrb	r2, [r7, #7]
 800fbea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800fbf2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800fbfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	22ff      	movs	r2, #255	@ 0xff
 800fc0a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fc12:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2206      	movs	r2, #6
 800fc18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2206      	movs	r2, #6
 800fc20:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc28:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fc32:	4b0d      	ldr	r3, [pc, #52]	@ (800fc68 <tcp_alloc+0xf8>)
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc6c <tcp_alloc+0xfc>)
 800fc3c:	781a      	ldrb	r2, [r3, #0]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800fc48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4a08      	ldr	r2, [pc, #32]	@ (800fc70 <tcp_alloc+0x100>)
 800fc50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4a07      	ldr	r2, [pc, #28]	@ (800fc74 <tcp_alloc+0x104>)
 800fc58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	2400f930 	.word	0x2400f930
 800fc6c:	2400f946 	.word	0x2400f946
 800fc70:	0800f929 	.word	0x0800f929
 800fc74:	006ddd00 	.word	0x006ddd00

0800fc78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d107      	bne.n	800fc96 <tcp_pcb_purge+0x1e>
 800fc86:	4b21      	ldr	r3, [pc, #132]	@ (800fd0c <tcp_pcb_purge+0x94>)
 800fc88:	f640 0251 	movw	r2, #2129	@ 0x851
 800fc8c:	4920      	ldr	r1, [pc, #128]	@ (800fd10 <tcp_pcb_purge+0x98>)
 800fc8e:	4821      	ldr	r0, [pc, #132]	@ (800fd14 <tcp_pcb_purge+0x9c>)
 800fc90:	f004 fd4e 	bl	8014730 <iprintf>
 800fc94:	e037      	b.n	800fd06 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	7d1b      	ldrb	r3, [r3, #20]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d033      	beq.n	800fd06 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fca2:	2b0a      	cmp	r3, #10
 800fca4:	d02f      	beq.n	800fd06 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d02b      	beq.n	800fd06 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe fa54 	bl	800e168 <pbuf_free>
      pcb->refused_data = NULL;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d002      	beq.n	800fcd4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 f986 	bl	800ffe0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcda:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff fdc7 	bl	800f874 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff fdc2 	bl	800f874 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	080169c4 	.word	0x080169c4
 800fd10:	0801703c 	.word	0x0801703c
 800fd14:	08016a34 	.word	0x08016a34

0800fd18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d106      	bne.n	800fd36 <tcp_pcb_remove+0x1e>
 800fd28:	4b3e      	ldr	r3, [pc, #248]	@ (800fe24 <tcp_pcb_remove+0x10c>)
 800fd2a:	f640 0283 	movw	r2, #2179	@ 0x883
 800fd2e:	493e      	ldr	r1, [pc, #248]	@ (800fe28 <tcp_pcb_remove+0x110>)
 800fd30:	483e      	ldr	r0, [pc, #248]	@ (800fe2c <tcp_pcb_remove+0x114>)
 800fd32:	f004 fcfd 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d106      	bne.n	800fd4a <tcp_pcb_remove+0x32>
 800fd3c:	4b39      	ldr	r3, [pc, #228]	@ (800fe24 <tcp_pcb_remove+0x10c>)
 800fd3e:	f640 0284 	movw	r2, #2180	@ 0x884
 800fd42:	493b      	ldr	r1, [pc, #236]	@ (800fe30 <tcp_pcb_remove+0x118>)
 800fd44:	4839      	ldr	r0, [pc, #228]	@ (800fe2c <tcp_pcb_remove+0x114>)
 800fd46:	f004 fcf3 	bl	8014730 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d105      	bne.n	800fd60 <tcp_pcb_remove+0x48>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	68da      	ldr	r2, [r3, #12]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	e013      	b.n	800fd88 <tcp_pcb_remove+0x70>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	60fb      	str	r3, [r7, #12]
 800fd66:	e00c      	b.n	800fd82 <tcp_pcb_remove+0x6a>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d104      	bne.n	800fd7c <tcp_pcb_remove+0x64>
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	60da      	str	r2, [r3, #12]
 800fd7a:	e005      	b.n	800fd88 <tcp_pcb_remove+0x70>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	60fb      	str	r3, [r7, #12]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1ef      	bne.n	800fd68 <tcp_pcb_remove+0x50>
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd8e:	6838      	ldr	r0, [r7, #0]
 800fd90:	f7ff ff72 	bl	800fc78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	7d1b      	ldrb	r3, [r3, #20]
 800fd98:	2b0a      	cmp	r3, #10
 800fd9a:	d013      	beq.n	800fdc4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d00f      	beq.n	800fdc4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	8b5b      	ldrh	r3, [r3, #26]
 800fda8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d009      	beq.n	800fdc4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	8b5b      	ldrh	r3, [r3, #26]
 800fdb4:	f043 0302 	orr.w	r3, r3, #2
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdbe:	6838      	ldr	r0, [r7, #0]
 800fdc0:	f002 ff6a 	bl	8012c98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	7d1b      	ldrb	r3, [r3, #20]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d020      	beq.n	800fe0e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d006      	beq.n	800fde2 <tcp_pcb_remove+0xca>
 800fdd4:	4b13      	ldr	r3, [pc, #76]	@ (800fe24 <tcp_pcb_remove+0x10c>)
 800fdd6:	f640 0293 	movw	r2, #2195	@ 0x893
 800fdda:	4916      	ldr	r1, [pc, #88]	@ (800fe34 <tcp_pcb_remove+0x11c>)
 800fddc:	4813      	ldr	r0, [pc, #76]	@ (800fe2c <tcp_pcb_remove+0x114>)
 800fdde:	f004 fca7 	bl	8014730 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <tcp_pcb_remove+0xe0>
 800fdea:	4b0e      	ldr	r3, [pc, #56]	@ (800fe24 <tcp_pcb_remove+0x10c>)
 800fdec:	f640 0294 	movw	r2, #2196	@ 0x894
 800fdf0:	4911      	ldr	r1, [pc, #68]	@ (800fe38 <tcp_pcb_remove+0x120>)
 800fdf2:	480e      	ldr	r0, [pc, #56]	@ (800fe2c <tcp_pcb_remove+0x114>)
 800fdf4:	f004 fc9c 	bl	8014730 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d006      	beq.n	800fe0e <tcp_pcb_remove+0xf6>
 800fe00:	4b08      	ldr	r3, [pc, #32]	@ (800fe24 <tcp_pcb_remove+0x10c>)
 800fe02:	f640 0296 	movw	r2, #2198	@ 0x896
 800fe06:	490d      	ldr	r1, [pc, #52]	@ (800fe3c <tcp_pcb_remove+0x124>)
 800fe08:	4808      	ldr	r0, [pc, #32]	@ (800fe2c <tcp_pcb_remove+0x114>)
 800fe0a:	f004 fc91 	bl	8014730 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	2200      	movs	r2, #0
 800fe12:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2200      	movs	r2, #0
 800fe18:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe1a:	bf00      	nop
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	080169c4 	.word	0x080169c4
 800fe28:	08017058 	.word	0x08017058
 800fe2c:	08016a34 	.word	0x08016a34
 800fe30:	08017074 	.word	0x08017074
 800fe34:	08017094 	.word	0x08017094
 800fe38:	080170ac 	.word	0x080170ac
 800fe3c:	080170c8 	.word	0x080170c8

0800fe40 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <tcp_next_iss+0x1c>
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe78 <tcp_next_iss+0x38>)
 800fe50:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fe54:	4909      	ldr	r1, [pc, #36]	@ (800fe7c <tcp_next_iss+0x3c>)
 800fe56:	480a      	ldr	r0, [pc, #40]	@ (800fe80 <tcp_next_iss+0x40>)
 800fe58:	f004 fc6a 	bl	8014730 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe5c:	4b09      	ldr	r3, [pc, #36]	@ (800fe84 <tcp_next_iss+0x44>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	4b09      	ldr	r3, [pc, #36]	@ (800fe88 <tcp_next_iss+0x48>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4413      	add	r3, r2
 800fe66:	4a07      	ldr	r2, [pc, #28]	@ (800fe84 <tcp_next_iss+0x44>)
 800fe68:	6013      	str	r3, [r2, #0]
  return iss;
 800fe6a:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <tcp_next_iss+0x44>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	080169c4 	.word	0x080169c4
 800fe7c:	080170e0 	.word	0x080170e0
 800fe80:	08016a34 	.word	0x08016a34
 800fe84:	24000048 	.word	0x24000048
 800fe88:	2400f930 	.word	0x2400f930

0800fe8c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	4603      	mov	r3, r0
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d106      	bne.n	800feae <tcp_eff_send_mss_netif+0x22>
 800fea0:	4b14      	ldr	r3, [pc, #80]	@ (800fef4 <tcp_eff_send_mss_netif+0x68>)
 800fea2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fea6:	4914      	ldr	r1, [pc, #80]	@ (800fef8 <tcp_eff_send_mss_netif+0x6c>)
 800fea8:	4814      	ldr	r0, [pc, #80]	@ (800fefc <tcp_eff_send_mss_netif+0x70>)
 800feaa:	f004 fc41 	bl	8014730 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800feb4:	89fb      	ldrh	r3, [r7, #14]
 800feb6:	e019      	b.n	800feec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800febc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800febe:	8afb      	ldrh	r3, [r7, #22]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d012      	beq.n	800feea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fec4:	2328      	movs	r3, #40	@ 0x28
 800fec6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fec8:	8afa      	ldrh	r2, [r7, #22]
 800feca:	8abb      	ldrh	r3, [r7, #20]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d904      	bls.n	800feda <tcp_eff_send_mss_netif+0x4e>
 800fed0:	8afa      	ldrh	r2, [r7, #22]
 800fed2:	8abb      	ldrh	r3, [r7, #20]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	e000      	b.n	800fedc <tcp_eff_send_mss_netif+0x50>
 800feda:	2300      	movs	r3, #0
 800fedc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fede:	8a7a      	ldrh	r2, [r7, #18]
 800fee0:	89fb      	ldrh	r3, [r7, #14]
 800fee2:	4293      	cmp	r3, r2
 800fee4:	bf28      	it	cs
 800fee6:	4613      	movcs	r3, r2
 800fee8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800feea:	89fb      	ldrh	r3, [r7, #14]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	080169c4 	.word	0x080169c4
 800fef8:	080170fc 	.word	0x080170fc
 800fefc:	08016a34 	.word	0x08016a34

0800ff00 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d119      	bne.n	800ff48 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff14:	4b10      	ldr	r3, [pc, #64]	@ (800ff58 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff16:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ff1a:	4910      	ldr	r1, [pc, #64]	@ (800ff5c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff1c:	4810      	ldr	r0, [pc, #64]	@ (800ff60 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff1e:	f004 fc07 	bl	8014730 <iprintf>

  while (pcb != NULL) {
 800ff22:	e011      	b.n	800ff48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d108      	bne.n	800ff42 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f7fe ffc0 	bl	800eebc <tcp_abort>
      pcb = next;
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	60fb      	str	r3, [r7, #12]
 800ff40:	e002      	b.n	800ff48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1ea      	bne.n	800ff24 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff4e:	bf00      	nop
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	080169c4 	.word	0x080169c4
 800ff5c:	08017124 	.word	0x08017124
 800ff60:	08016a34 	.word	0x08016a34

0800ff64 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d02a      	beq.n	800ffca <tcp_netif_ip_addr_changed+0x66>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d026      	beq.n	800ffca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff7c:	4b15      	ldr	r3, [pc, #84]	@ (800ffd4 <tcp_netif_ip_addr_changed+0x70>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4619      	mov	r1, r3
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7ff ffbc 	bl	800ff00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff88:	4b13      	ldr	r3, [pc, #76]	@ (800ffd8 <tcp_netif_ip_addr_changed+0x74>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff ffb6 	bl	800ff00 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d017      	beq.n	800ffca <tcp_netif_ip_addr_changed+0x66>
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d013      	beq.n	800ffca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffa2:	4b0e      	ldr	r3, [pc, #56]	@ (800ffdc <tcp_netif_ip_addr_changed+0x78>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	e00c      	b.n	800ffc4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d103      	bne.n	800ffbe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d1ef      	bne.n	800ffaa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ffca:	bf00      	nop
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	2400f93c 	.word	0x2400f93c
 800ffd8:	2400f934 	.word	0x2400f934
 800ffdc:	2400f938 	.word	0x2400f938

0800ffe0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d007      	beq.n	8010000 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7ff fc3d 	bl	800f874 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010000:	bf00      	nop
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010008:	b590      	push	{r4, r7, lr}
 801000a:	b08d      	sub	sp, #52	@ 0x34
 801000c:	af04      	add	r7, sp, #16
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d105      	bne.n	8010024 <tcp_input+0x1c>
 8010018:	4b9b      	ldr	r3, [pc, #620]	@ (8010288 <tcp_input+0x280>)
 801001a:	2283      	movs	r2, #131	@ 0x83
 801001c:	499b      	ldr	r1, [pc, #620]	@ (801028c <tcp_input+0x284>)
 801001e:	489c      	ldr	r0, [pc, #624]	@ (8010290 <tcp_input+0x288>)
 8010020:	f004 fb86 	bl	8014730 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	4a9a      	ldr	r2, [pc, #616]	@ (8010294 <tcp_input+0x28c>)
 801002a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	895b      	ldrh	r3, [r3, #10]
 8010030:	2b13      	cmp	r3, #19
 8010032:	f240 83d1 	bls.w	80107d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010036:	4b98      	ldr	r3, [pc, #608]	@ (8010298 <tcp_input+0x290>)
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	4a97      	ldr	r2, [pc, #604]	@ (8010298 <tcp_input+0x290>)
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	4611      	mov	r1, r2
 8010040:	4618      	mov	r0, r3
 8010042:	f7fb fe7b 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	f040 83c7 	bne.w	80107dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801004e:	4b92      	ldr	r3, [pc, #584]	@ (8010298 <tcp_input+0x290>)
 8010050:	695b      	ldr	r3, [r3, #20]
 8010052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010056:	2be0      	cmp	r3, #224	@ 0xe0
 8010058:	f000 83c0 	beq.w	80107dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801005c:	4b8d      	ldr	r3, [pc, #564]	@ (8010294 <tcp_input+0x28c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	899b      	ldrh	r3, [r3, #12]
 8010062:	b29b      	uxth	r3, r3
 8010064:	4618      	mov	r0, r3
 8010066:	f7fa f8f9 	bl	800a25c <lwip_htons>
 801006a:	4603      	mov	r3, r0
 801006c:	0b1b      	lsrs	r3, r3, #12
 801006e:	b29b      	uxth	r3, r3
 8010070:	b2db      	uxtb	r3, r3
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010076:	7cbb      	ldrb	r3, [r7, #18]
 8010078:	2b13      	cmp	r3, #19
 801007a:	f240 83b1 	bls.w	80107e0 <tcp_input+0x7d8>
 801007e:	7cbb      	ldrb	r3, [r7, #18]
 8010080:	b29a      	uxth	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	891b      	ldrh	r3, [r3, #8]
 8010086:	429a      	cmp	r2, r3
 8010088:	f200 83aa 	bhi.w	80107e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801008c:	7cbb      	ldrb	r3, [r7, #18]
 801008e:	b29b      	uxth	r3, r3
 8010090:	3b14      	subs	r3, #20
 8010092:	b29a      	uxth	r2, r3
 8010094:	4b81      	ldr	r3, [pc, #516]	@ (801029c <tcp_input+0x294>)
 8010096:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010098:	4b81      	ldr	r3, [pc, #516]	@ (80102a0 <tcp_input+0x298>)
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	895a      	ldrh	r2, [r3, #10]
 80100a2:	7cbb      	ldrb	r3, [r7, #18]
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d309      	bcc.n	80100be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80100aa:	4b7c      	ldr	r3, [pc, #496]	@ (801029c <tcp_input+0x294>)
 80100ac:	881a      	ldrh	r2, [r3, #0]
 80100ae:	4b7d      	ldr	r3, [pc, #500]	@ (80102a4 <tcp_input+0x29c>)
 80100b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100b2:	7cbb      	ldrb	r3, [r7, #18]
 80100b4:	4619      	mov	r1, r3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7fd ffd0 	bl	800e05c <pbuf_remove_header>
 80100bc:	e04e      	b.n	801015c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d105      	bne.n	80100d2 <tcp_input+0xca>
 80100c6:	4b70      	ldr	r3, [pc, #448]	@ (8010288 <tcp_input+0x280>)
 80100c8:	22c2      	movs	r2, #194	@ 0xc2
 80100ca:	4977      	ldr	r1, [pc, #476]	@ (80102a8 <tcp_input+0x2a0>)
 80100cc:	4870      	ldr	r0, [pc, #448]	@ (8010290 <tcp_input+0x288>)
 80100ce:	f004 fb2f 	bl	8014730 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80100d2:	2114      	movs	r1, #20
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fd ffc1 	bl	800e05c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	895a      	ldrh	r2, [r3, #10]
 80100de:	4b71      	ldr	r3, [pc, #452]	@ (80102a4 <tcp_input+0x29c>)
 80100e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80100e2:	4b6e      	ldr	r3, [pc, #440]	@ (801029c <tcp_input+0x294>)
 80100e4:	881a      	ldrh	r2, [r3, #0]
 80100e6:	4b6f      	ldr	r3, [pc, #444]	@ (80102a4 <tcp_input+0x29c>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80100ee:	4b6d      	ldr	r3, [pc, #436]	@ (80102a4 <tcp_input+0x29c>)
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	4619      	mov	r1, r3
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7fd ffb1 	bl	800e05c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	895b      	ldrh	r3, [r3, #10]
 8010100:	8a3a      	ldrh	r2, [r7, #16]
 8010102:	429a      	cmp	r2, r3
 8010104:	f200 836e 	bhi.w	80107e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	4a64      	ldr	r2, [pc, #400]	@ (80102a0 <tcp_input+0x298>)
 8010110:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	8a3a      	ldrh	r2, [r7, #16]
 8010118:	4611      	mov	r1, r2
 801011a:	4618      	mov	r0, r3
 801011c:	f7fd ff9e 	bl	800e05c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	891a      	ldrh	r2, [r3, #8]
 8010124:	8a3b      	ldrh	r3, [r7, #16]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	895b      	ldrh	r3, [r3, #10]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d005      	beq.n	8010142 <tcp_input+0x13a>
 8010136:	4b54      	ldr	r3, [pc, #336]	@ (8010288 <tcp_input+0x280>)
 8010138:	22df      	movs	r2, #223	@ 0xdf
 801013a:	495c      	ldr	r1, [pc, #368]	@ (80102ac <tcp_input+0x2a4>)
 801013c:	4854      	ldr	r0, [pc, #336]	@ (8010290 <tcp_input+0x288>)
 801013e:	f004 faf7 	bl	8014730 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	891a      	ldrh	r2, [r3, #8]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	891b      	ldrh	r3, [r3, #8]
 801014c:	429a      	cmp	r2, r3
 801014e:	d005      	beq.n	801015c <tcp_input+0x154>
 8010150:	4b4d      	ldr	r3, [pc, #308]	@ (8010288 <tcp_input+0x280>)
 8010152:	22e0      	movs	r2, #224	@ 0xe0
 8010154:	4956      	ldr	r1, [pc, #344]	@ (80102b0 <tcp_input+0x2a8>)
 8010156:	484e      	ldr	r0, [pc, #312]	@ (8010290 <tcp_input+0x288>)
 8010158:	f004 faea 	bl	8014730 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801015c:	4b4d      	ldr	r3, [pc, #308]	@ (8010294 <tcp_input+0x28c>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	881b      	ldrh	r3, [r3, #0]
 8010162:	b29b      	uxth	r3, r3
 8010164:	4a4b      	ldr	r2, [pc, #300]	@ (8010294 <tcp_input+0x28c>)
 8010166:	6814      	ldr	r4, [r2, #0]
 8010168:	4618      	mov	r0, r3
 801016a:	f7fa f877 	bl	800a25c <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010172:	4b48      	ldr	r3, [pc, #288]	@ (8010294 <tcp_input+0x28c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	885b      	ldrh	r3, [r3, #2]
 8010178:	b29b      	uxth	r3, r3
 801017a:	4a46      	ldr	r2, [pc, #280]	@ (8010294 <tcp_input+0x28c>)
 801017c:	6814      	ldr	r4, [r2, #0]
 801017e:	4618      	mov	r0, r3
 8010180:	f7fa f86c 	bl	800a25c <lwip_htons>
 8010184:	4603      	mov	r3, r0
 8010186:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010188:	4b42      	ldr	r3, [pc, #264]	@ (8010294 <tcp_input+0x28c>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	4a41      	ldr	r2, [pc, #260]	@ (8010294 <tcp_input+0x28c>)
 8010190:	6814      	ldr	r4, [r2, #0]
 8010192:	4618      	mov	r0, r3
 8010194:	f7fa f878 	bl	800a288 <lwip_htonl>
 8010198:	4603      	mov	r3, r0
 801019a:	6063      	str	r3, [r4, #4]
 801019c:	6863      	ldr	r3, [r4, #4]
 801019e:	4a45      	ldr	r2, [pc, #276]	@ (80102b4 <tcp_input+0x2ac>)
 80101a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80101a2:	4b3c      	ldr	r3, [pc, #240]	@ (8010294 <tcp_input+0x28c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	4a3a      	ldr	r2, [pc, #232]	@ (8010294 <tcp_input+0x28c>)
 80101aa:	6814      	ldr	r4, [r2, #0]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fa f86b 	bl	800a288 <lwip_htonl>
 80101b2:	4603      	mov	r3, r0
 80101b4:	60a3      	str	r3, [r4, #8]
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	4a3f      	ldr	r2, [pc, #252]	@ (80102b8 <tcp_input+0x2b0>)
 80101ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101bc:	4b35      	ldr	r3, [pc, #212]	@ (8010294 <tcp_input+0x28c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	89db      	ldrh	r3, [r3, #14]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	4a33      	ldr	r2, [pc, #204]	@ (8010294 <tcp_input+0x28c>)
 80101c6:	6814      	ldr	r4, [r2, #0]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fa f847 	bl	800a25c <lwip_htons>
 80101ce:	4603      	mov	r3, r0
 80101d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80101d2:	4b30      	ldr	r3, [pc, #192]	@ (8010294 <tcp_input+0x28c>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	899b      	ldrh	r3, [r3, #12]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fa f83e 	bl	800a25c <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	4b34      	ldr	r3, [pc, #208]	@ (80102bc <tcp_input+0x2b4>)
 80101ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	891a      	ldrh	r2, [r3, #8]
 80101f2:	4b33      	ldr	r3, [pc, #204]	@ (80102c0 <tcp_input+0x2b8>)
 80101f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80101f6:	4b31      	ldr	r3, [pc, #196]	@ (80102bc <tcp_input+0x2b4>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	f003 0303 	and.w	r3, r3, #3
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00c      	beq.n	801021c <tcp_input+0x214>
    tcplen++;
 8010202:	4b2f      	ldr	r3, [pc, #188]	@ (80102c0 <tcp_input+0x2b8>)
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	3301      	adds	r3, #1
 8010208:	b29a      	uxth	r2, r3
 801020a:	4b2d      	ldr	r3, [pc, #180]	@ (80102c0 <tcp_input+0x2b8>)
 801020c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	891a      	ldrh	r2, [r3, #8]
 8010212:	4b2b      	ldr	r3, [pc, #172]	@ (80102c0 <tcp_input+0x2b8>)
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	429a      	cmp	r2, r3
 8010218:	f200 82e6 	bhi.w	80107e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801021c:	2300      	movs	r3, #0
 801021e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010220:	4b28      	ldr	r3, [pc, #160]	@ (80102c4 <tcp_input+0x2bc>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	61fb      	str	r3, [r7, #28]
 8010226:	e09d      	b.n	8010364 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	7d1b      	ldrb	r3, [r3, #20]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d105      	bne.n	801023c <tcp_input+0x234>
 8010230:	4b15      	ldr	r3, [pc, #84]	@ (8010288 <tcp_input+0x280>)
 8010232:	22fb      	movs	r2, #251	@ 0xfb
 8010234:	4924      	ldr	r1, [pc, #144]	@ (80102c8 <tcp_input+0x2c0>)
 8010236:	4816      	ldr	r0, [pc, #88]	@ (8010290 <tcp_input+0x288>)
 8010238:	f004 fa7a 	bl	8014730 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	7d1b      	ldrb	r3, [r3, #20]
 8010240:	2b0a      	cmp	r3, #10
 8010242:	d105      	bne.n	8010250 <tcp_input+0x248>
 8010244:	4b10      	ldr	r3, [pc, #64]	@ (8010288 <tcp_input+0x280>)
 8010246:	22fc      	movs	r2, #252	@ 0xfc
 8010248:	4920      	ldr	r1, [pc, #128]	@ (80102cc <tcp_input+0x2c4>)
 801024a:	4811      	ldr	r0, [pc, #68]	@ (8010290 <tcp_input+0x288>)
 801024c:	f004 fa70 	bl	8014730 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	7d1b      	ldrb	r3, [r3, #20]
 8010254:	2b01      	cmp	r3, #1
 8010256:	d105      	bne.n	8010264 <tcp_input+0x25c>
 8010258:	4b0b      	ldr	r3, [pc, #44]	@ (8010288 <tcp_input+0x280>)
 801025a:	22fd      	movs	r2, #253	@ 0xfd
 801025c:	491c      	ldr	r1, [pc, #112]	@ (80102d0 <tcp_input+0x2c8>)
 801025e:	480c      	ldr	r0, [pc, #48]	@ (8010290 <tcp_input+0x288>)
 8010260:	f004 fa66 	bl	8014730 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	7a1b      	ldrb	r3, [r3, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d033      	beq.n	80102d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	7a1a      	ldrb	r2, [r3, #8]
 8010270:	4b09      	ldr	r3, [pc, #36]	@ (8010298 <tcp_input+0x290>)
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010278:	3301      	adds	r3, #1
 801027a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801027c:	429a      	cmp	r2, r3
 801027e:	d029      	beq.n	80102d4 <tcp_input+0x2cc>
      prev = pcb;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	61bb      	str	r3, [r7, #24]
      continue;
 8010284:	e06b      	b.n	801035e <tcp_input+0x356>
 8010286:	bf00      	nop
 8010288:	08017158 	.word	0x08017158
 801028c:	080171b8 	.word	0x080171b8
 8010290:	080171d0 	.word	0x080171d0
 8010294:	2400f958 	.word	0x2400f958
 8010298:	24008e60 	.word	0x24008e60
 801029c:	2400f95c 	.word	0x2400f95c
 80102a0:	2400f960 	.word	0x2400f960
 80102a4:	2400f95e 	.word	0x2400f95e
 80102a8:	080171f8 	.word	0x080171f8
 80102ac:	08017208 	.word	0x08017208
 80102b0:	08017214 	.word	0x08017214
 80102b4:	2400f968 	.word	0x2400f968
 80102b8:	2400f96c 	.word	0x2400f96c
 80102bc:	2400f974 	.word	0x2400f974
 80102c0:	2400f972 	.word	0x2400f972
 80102c4:	2400f93c 	.word	0x2400f93c
 80102c8:	08017234 	.word	0x08017234
 80102cc:	0801725c 	.word	0x0801725c
 80102d0:	08017288 	.word	0x08017288
    }

    if (pcb->remote_port == tcphdr->src &&
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	8b1a      	ldrh	r2, [r3, #24]
 80102d8:	4b72      	ldr	r3, [pc, #456]	@ (80104a4 <tcp_input+0x49c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	b29b      	uxth	r3, r3
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d13a      	bne.n	801035a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	8ada      	ldrh	r2, [r3, #22]
 80102e8:	4b6e      	ldr	r3, [pc, #440]	@ (80104a4 <tcp_input+0x49c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	885b      	ldrh	r3, [r3, #2]
 80102ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d132      	bne.n	801035a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	4b6b      	ldr	r3, [pc, #428]	@ (80104a8 <tcp_input+0x4a0>)
 80102fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d12c      	bne.n	801035a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	4b68      	ldr	r3, [pc, #416]	@ (80104a8 <tcp_input+0x4a0>)
 8010306:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010308:	429a      	cmp	r2, r3
 801030a:	d126      	bne.n	801035a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	69fa      	ldr	r2, [r7, #28]
 8010312:	429a      	cmp	r2, r3
 8010314:	d106      	bne.n	8010324 <tcp_input+0x31c>
 8010316:	4b65      	ldr	r3, [pc, #404]	@ (80104ac <tcp_input+0x4a4>)
 8010318:	f240 120d 	movw	r2, #269	@ 0x10d
 801031c:	4964      	ldr	r1, [pc, #400]	@ (80104b0 <tcp_input+0x4a8>)
 801031e:	4865      	ldr	r0, [pc, #404]	@ (80104b4 <tcp_input+0x4ac>)
 8010320:	f004 fa06 	bl	8014730 <iprintf>
      if (prev != NULL) {
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <tcp_input+0x338>
        prev->next = pcb->next;
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	68da      	ldr	r2, [r3, #12]
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010332:	4b61      	ldr	r3, [pc, #388]	@ (80104b8 <tcp_input+0x4b0>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801033a:	4a5f      	ldr	r2, [pc, #380]	@ (80104b8 <tcp_input+0x4b0>)
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	69fa      	ldr	r2, [r7, #28]
 8010346:	429a      	cmp	r2, r3
 8010348:	d111      	bne.n	801036e <tcp_input+0x366>
 801034a:	4b58      	ldr	r3, [pc, #352]	@ (80104ac <tcp_input+0x4a4>)
 801034c:	f240 1215 	movw	r2, #277	@ 0x115
 8010350:	495a      	ldr	r1, [pc, #360]	@ (80104bc <tcp_input+0x4b4>)
 8010352:	4858      	ldr	r0, [pc, #352]	@ (80104b4 <tcp_input+0x4ac>)
 8010354:	f004 f9ec 	bl	8014730 <iprintf>
      break;
 8010358:	e009      	b.n	801036e <tcp_input+0x366>
    }
    prev = pcb;
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	2b00      	cmp	r3, #0
 8010368:	f47f af5e 	bne.w	8010228 <tcp_input+0x220>
 801036c:	e000      	b.n	8010370 <tcp_input+0x368>
      break;
 801036e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f040 80aa 	bne.w	80104cc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010378:	4b51      	ldr	r3, [pc, #324]	@ (80104c0 <tcp_input+0x4b8>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	61fb      	str	r3, [r7, #28]
 801037e:	e03f      	b.n	8010400 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	7d1b      	ldrb	r3, [r3, #20]
 8010384:	2b0a      	cmp	r3, #10
 8010386:	d006      	beq.n	8010396 <tcp_input+0x38e>
 8010388:	4b48      	ldr	r3, [pc, #288]	@ (80104ac <tcp_input+0x4a4>)
 801038a:	f240 121f 	movw	r2, #287	@ 0x11f
 801038e:	494d      	ldr	r1, [pc, #308]	@ (80104c4 <tcp_input+0x4bc>)
 8010390:	4848      	ldr	r0, [pc, #288]	@ (80104b4 <tcp_input+0x4ac>)
 8010392:	f004 f9cd 	bl	8014730 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	7a1b      	ldrb	r3, [r3, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d009      	beq.n	80103b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	7a1a      	ldrb	r2, [r3, #8]
 80103a2:	4b41      	ldr	r3, [pc, #260]	@ (80104a8 <tcp_input+0x4a0>)
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80103aa:	3301      	adds	r3, #1
 80103ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d122      	bne.n	80103f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	8b1a      	ldrh	r2, [r3, #24]
 80103b6:	4b3b      	ldr	r3, [pc, #236]	@ (80104a4 <tcp_input+0x49c>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	881b      	ldrh	r3, [r3, #0]
 80103bc:	b29b      	uxth	r3, r3
 80103be:	429a      	cmp	r2, r3
 80103c0:	d11b      	bne.n	80103fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	8ada      	ldrh	r2, [r3, #22]
 80103c6:	4b37      	ldr	r3, [pc, #220]	@ (80104a4 <tcp_input+0x49c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	885b      	ldrh	r3, [r3, #2]
 80103cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d113      	bne.n	80103fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	4b34      	ldr	r3, [pc, #208]	@ (80104a8 <tcp_input+0x4a0>)
 80103d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80103da:	429a      	cmp	r2, r3
 80103dc:	d10d      	bne.n	80103fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	4b31      	ldr	r3, [pc, #196]	@ (80104a8 <tcp_input+0x4a0>)
 80103e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d107      	bne.n	80103fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80103ea:	69f8      	ldr	r0, [r7, #28]
 80103ec:	f000 fb56 	bl	8010a9c <tcp_timewait_input>
        }
        pbuf_free(p);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7fd feb9 	bl	800e168 <pbuf_free>
        return;
 80103f6:	e1fd      	b.n	80107f4 <tcp_input+0x7ec>
        continue;
 80103f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	61fb      	str	r3, [r7, #28]
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1bc      	bne.n	8010380 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010406:	2300      	movs	r3, #0
 8010408:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801040a:	4b2f      	ldr	r3, [pc, #188]	@ (80104c8 <tcp_input+0x4c0>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	617b      	str	r3, [r7, #20]
 8010410:	e02a      	b.n	8010468 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	7a1b      	ldrb	r3, [r3, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00c      	beq.n	8010434 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	7a1a      	ldrb	r2, [r3, #8]
 801041e:	4b22      	ldr	r3, [pc, #136]	@ (80104a8 <tcp_input+0x4a0>)
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010426:	3301      	adds	r3, #1
 8010428:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801042a:	429a      	cmp	r2, r3
 801042c:	d002      	beq.n	8010434 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	61bb      	str	r3, [r7, #24]
        continue;
 8010432:	e016      	b.n	8010462 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	8ada      	ldrh	r2, [r3, #22]
 8010438:	4b1a      	ldr	r3, [pc, #104]	@ (80104a4 <tcp_input+0x49c>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	885b      	ldrh	r3, [r3, #2]
 801043e:	b29b      	uxth	r3, r3
 8010440:	429a      	cmp	r2, r3
 8010442:	d10c      	bne.n	801045e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	4b17      	ldr	r3, [pc, #92]	@ (80104a8 <tcp_input+0x4a0>)
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	429a      	cmp	r2, r3
 801044e:	d00f      	beq.n	8010470 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00d      	beq.n	8010472 <tcp_input+0x46a>
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d009      	beq.n	8010472 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1d1      	bne.n	8010412 <tcp_input+0x40a>
 801046e:	e000      	b.n	8010472 <tcp_input+0x46a>
            break;
 8010470:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d029      	beq.n	80104cc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00a      	beq.n	8010494 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	68da      	ldr	r2, [r3, #12]
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010486:	4b10      	ldr	r3, [pc, #64]	@ (80104c8 <tcp_input+0x4c0>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801048e:	4a0e      	ldr	r2, [pc, #56]	@ (80104c8 <tcp_input+0x4c0>)
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010494:	6978      	ldr	r0, [r7, #20]
 8010496:	f000 fa03 	bl	80108a0 <tcp_listen_input>
      }
      pbuf_free(p);
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7fd fe64 	bl	800e168 <pbuf_free>
      return;
 80104a0:	e1a8      	b.n	80107f4 <tcp_input+0x7ec>
 80104a2:	bf00      	nop
 80104a4:	2400f958 	.word	0x2400f958
 80104a8:	24008e60 	.word	0x24008e60
 80104ac:	08017158 	.word	0x08017158
 80104b0:	080172b0 	.word	0x080172b0
 80104b4:	080171d0 	.word	0x080171d0
 80104b8:	2400f93c 	.word	0x2400f93c
 80104bc:	080172dc 	.word	0x080172dc
 80104c0:	2400f940 	.word	0x2400f940
 80104c4:	08017308 	.word	0x08017308
 80104c8:	2400f938 	.word	0x2400f938
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 8158 	beq.w	8010784 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80104d4:	4b95      	ldr	r3, [pc, #596]	@ (801072c <tcp_input+0x724>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	891a      	ldrh	r2, [r3, #8]
 80104de:	4b93      	ldr	r3, [pc, #588]	@ (801072c <tcp_input+0x724>)
 80104e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80104e2:	4a92      	ldr	r2, [pc, #584]	@ (801072c <tcp_input+0x724>)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80104e8:	4b91      	ldr	r3, [pc, #580]	@ (8010730 <tcp_input+0x728>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a8f      	ldr	r2, [pc, #572]	@ (801072c <tcp_input+0x724>)
 80104ee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80104f0:	4b90      	ldr	r3, [pc, #576]	@ (8010734 <tcp_input+0x72c>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80104f6:	4b90      	ldr	r3, [pc, #576]	@ (8010738 <tcp_input+0x730>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80104fc:	4b8f      	ldr	r3, [pc, #572]	@ (801073c <tcp_input+0x734>)
 80104fe:	2200      	movs	r2, #0
 8010500:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010502:	4b8f      	ldr	r3, [pc, #572]	@ (8010740 <tcp_input+0x738>)
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	f003 0308 	and.w	r3, r3, #8
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	7b5b      	ldrb	r3, [r3, #13]
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	b2da      	uxtb	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010520:	2b00      	cmp	r3, #0
 8010522:	d017      	beq.n	8010554 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010524:	69f8      	ldr	r0, [r7, #28]
 8010526:	f7ff f927 	bl	800f778 <tcp_process_refused_data>
 801052a:	4603      	mov	r3, r0
 801052c:	f113 0f0d 	cmn.w	r3, #13
 8010530:	d007      	beq.n	8010542 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00c      	beq.n	8010554 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801053a:	4b82      	ldr	r3, [pc, #520]	@ (8010744 <tcp_input+0x73c>)
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d008      	beq.n	8010554 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010546:	2b00      	cmp	r3, #0
 8010548:	f040 80e4 	bne.w	8010714 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801054c:	69f8      	ldr	r0, [r7, #28]
 801054e:	f003 f9a9 	bl	80138a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010552:	e0df      	b.n	8010714 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8010554:	4a7c      	ldr	r2, [pc, #496]	@ (8010748 <tcp_input+0x740>)
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801055a:	69f8      	ldr	r0, [r7, #28]
 801055c:	f000 fb18 	bl	8010b90 <tcp_process>
 8010560:	4603      	mov	r3, r0
 8010562:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010568:	f113 0f0d 	cmn.w	r3, #13
 801056c:	f000 80d4 	beq.w	8010718 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8010570:	4b71      	ldr	r3, [pc, #452]	@ (8010738 <tcp_input+0x730>)
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	f003 0308 	and.w	r3, r3, #8
 8010578:	2b00      	cmp	r3, #0
 801057a:	d015      	beq.n	80105a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010582:	2b00      	cmp	r3, #0
 8010584:	d008      	beq.n	8010598 <tcp_input+0x590>
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801058c:	69fa      	ldr	r2, [r7, #28]
 801058e:	6912      	ldr	r2, [r2, #16]
 8010590:	f06f 010d 	mvn.w	r1, #13
 8010594:	4610      	mov	r0, r2
 8010596:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	486c      	ldr	r0, [pc, #432]	@ (801074c <tcp_input+0x744>)
 801059c:	f7ff fbbc 	bl	800fd18 <tcp_pcb_remove>
        tcp_free(pcb);
 80105a0:	69f8      	ldr	r0, [r7, #28]
 80105a2:	f7fe f9a3 	bl	800e8ec <tcp_free>
 80105a6:	e0da      	b.n	801075e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80105ac:	4b63      	ldr	r3, [pc, #396]	@ (801073c <tcp_input+0x734>)
 80105ae:	881b      	ldrh	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d01d      	beq.n	80105f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80105b4:	4b61      	ldr	r3, [pc, #388]	@ (801073c <tcp_input+0x734>)
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00a      	beq.n	80105da <tcp_input+0x5d2>
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105ca:	69fa      	ldr	r2, [r7, #28]
 80105cc:	6910      	ldr	r0, [r2, #16]
 80105ce:	89fa      	ldrh	r2, [r7, #14]
 80105d0:	69f9      	ldr	r1, [r7, #28]
 80105d2:	4798      	blx	r3
 80105d4:	4603      	mov	r3, r0
 80105d6:	74fb      	strb	r3, [r7, #19]
 80105d8:	e001      	b.n	80105de <tcp_input+0x5d6>
 80105da:	2300      	movs	r3, #0
 80105dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80105de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105e2:	f113 0f0d 	cmn.w	r3, #13
 80105e6:	f000 8099 	beq.w	801071c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105ea:	4b54      	ldr	r3, [pc, #336]	@ (801073c <tcp_input+0x734>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80105f0:	69f8      	ldr	r0, [r7, #28]
 80105f2:	f000 f915 	bl	8010820 <tcp_input_delayed_close>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f040 8091 	bne.w	8010720 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80105fe:	4b4d      	ldr	r3, [pc, #308]	@ (8010734 <tcp_input+0x72c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d041      	beq.n	801068a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801060a:	2b00      	cmp	r3, #0
 801060c:	d006      	beq.n	801061c <tcp_input+0x614>
 801060e:	4b50      	ldr	r3, [pc, #320]	@ (8010750 <tcp_input+0x748>)
 8010610:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010614:	494f      	ldr	r1, [pc, #316]	@ (8010754 <tcp_input+0x74c>)
 8010616:	4850      	ldr	r0, [pc, #320]	@ (8010758 <tcp_input+0x750>)
 8010618:	f004 f88a 	bl	8014730 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	8b5b      	ldrh	r3, [r3, #26]
 8010620:	f003 0310 	and.w	r3, r3, #16
 8010624:	2b00      	cmp	r3, #0
 8010626:	d008      	beq.n	801063a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010628:	4b42      	ldr	r3, [pc, #264]	@ (8010734 <tcp_input+0x72c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f7fd fd9b 	bl	800e168 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010632:	69f8      	ldr	r0, [r7, #28]
 8010634:	f7fe fc42 	bl	800eebc <tcp_abort>
            goto aborted;
 8010638:	e091      	b.n	801075e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00c      	beq.n	801065e <tcp_input+0x656>
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	6918      	ldr	r0, [r3, #16]
 801064e:	4b39      	ldr	r3, [pc, #228]	@ (8010734 <tcp_input+0x72c>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	2300      	movs	r3, #0
 8010654:	69f9      	ldr	r1, [r7, #28]
 8010656:	47a0      	blx	r4
 8010658:	4603      	mov	r3, r0
 801065a:	74fb      	strb	r3, [r7, #19]
 801065c:	e008      	b.n	8010670 <tcp_input+0x668>
 801065e:	4b35      	ldr	r3, [pc, #212]	@ (8010734 <tcp_input+0x72c>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	2300      	movs	r3, #0
 8010664:	69f9      	ldr	r1, [r7, #28]
 8010666:	2000      	movs	r0, #0
 8010668:	f7ff f95e 	bl	800f928 <tcp_recv_null>
 801066c:	4603      	mov	r3, r0
 801066e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010674:	f113 0f0d 	cmn.w	r3, #13
 8010678:	d054      	beq.n	8010724 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801067a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010682:	4b2c      	ldr	r3, [pc, #176]	@ (8010734 <tcp_input+0x72c>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801068a:	4b2b      	ldr	r3, [pc, #172]	@ (8010738 <tcp_input+0x730>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f003 0320 	and.w	r3, r3, #32
 8010692:	2b00      	cmp	r3, #0
 8010694:	d031      	beq.n	80106fa <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801069a:	2b00      	cmp	r3, #0
 801069c:	d009      	beq.n	80106b2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106a2:	7b5a      	ldrb	r2, [r3, #13]
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106a8:	f042 0220 	orr.w	r2, r2, #32
 80106ac:	b2d2      	uxtb	r2, r2
 80106ae:	735a      	strb	r2, [r3, #13]
 80106b0:	e023      	b.n	80106fa <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106b6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d005      	beq.n	80106ca <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c2:	3301      	adds	r3, #1
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00b      	beq.n	80106ec <tcp_input+0x6e4>
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	6918      	ldr	r0, [r3, #16]
 80106de:	2300      	movs	r3, #0
 80106e0:	2200      	movs	r2, #0
 80106e2:	69f9      	ldr	r1, [r7, #28]
 80106e4:	47a0      	blx	r4
 80106e6:	4603      	mov	r3, r0
 80106e8:	74fb      	strb	r3, [r7, #19]
 80106ea:	e001      	b.n	80106f0 <tcp_input+0x6e8>
 80106ec:	2300      	movs	r3, #0
 80106ee:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106f4:	f113 0f0d 	cmn.w	r3, #13
 80106f8:	d016      	beq.n	8010728 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80106fa:	4b13      	ldr	r3, [pc, #76]	@ (8010748 <tcp_input+0x740>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010700:	69f8      	ldr	r0, [r7, #28]
 8010702:	f000 f88d 	bl	8010820 <tcp_input_delayed_close>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d127      	bne.n	801075c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801070c:	69f8      	ldr	r0, [r7, #28]
 801070e:	f002 fac3 	bl	8012c98 <tcp_output>
 8010712:	e024      	b.n	801075e <tcp_input+0x756>
        goto aborted;
 8010714:	bf00      	nop
 8010716:	e022      	b.n	801075e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010718:	bf00      	nop
 801071a:	e020      	b.n	801075e <tcp_input+0x756>
              goto aborted;
 801071c:	bf00      	nop
 801071e:	e01e      	b.n	801075e <tcp_input+0x756>
          goto aborted;
 8010720:	bf00      	nop
 8010722:	e01c      	b.n	801075e <tcp_input+0x756>
            goto aborted;
 8010724:	bf00      	nop
 8010726:	e01a      	b.n	801075e <tcp_input+0x756>
              goto aborted;
 8010728:	bf00      	nop
 801072a:	e018      	b.n	801075e <tcp_input+0x756>
 801072c:	2400f948 	.word	0x2400f948
 8010730:	2400f958 	.word	0x2400f958
 8010734:	2400f978 	.word	0x2400f978
 8010738:	2400f975 	.word	0x2400f975
 801073c:	2400f970 	.word	0x2400f970
 8010740:	2400f974 	.word	0x2400f974
 8010744:	2400f972 	.word	0x2400f972
 8010748:	2400f97c 	.word	0x2400f97c
 801074c:	2400f93c 	.word	0x2400f93c
 8010750:	08017158 	.word	0x08017158
 8010754:	08017338 	.word	0x08017338
 8010758:	080171d0 	.word	0x080171d0
          goto aborted;
 801075c:	bf00      	nop
    tcp_input_pcb = NULL;
 801075e:	4b27      	ldr	r3, [pc, #156]	@ (80107fc <tcp_input+0x7f4>)
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010764:	4b26      	ldr	r3, [pc, #152]	@ (8010800 <tcp_input+0x7f8>)
 8010766:	2200      	movs	r2, #0
 8010768:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801076a:	4b26      	ldr	r3, [pc, #152]	@ (8010804 <tcp_input+0x7fc>)
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d03f      	beq.n	80107f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010772:	4b24      	ldr	r3, [pc, #144]	@ (8010804 <tcp_input+0x7fc>)
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f7fd fcf6 	bl	800e168 <pbuf_free>
      inseg.p = NULL;
 801077c:	4b21      	ldr	r3, [pc, #132]	@ (8010804 <tcp_input+0x7fc>)
 801077e:	2200      	movs	r2, #0
 8010780:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010782:	e036      	b.n	80107f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010784:	4b20      	ldr	r3, [pc, #128]	@ (8010808 <tcp_input+0x800>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	899b      	ldrh	r3, [r3, #12]
 801078a:	b29b      	uxth	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	f7f9 fd65 	bl	800a25c <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	f003 0304 	and.w	r3, r3, #4
 801079a:	2b00      	cmp	r3, #0
 801079c:	d118      	bne.n	80107d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801079e:	4b1b      	ldr	r3, [pc, #108]	@ (801080c <tcp_input+0x804>)
 80107a0:	6819      	ldr	r1, [r3, #0]
 80107a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010810 <tcp_input+0x808>)
 80107a4:	881b      	ldrh	r3, [r3, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010814 <tcp_input+0x80c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107ae:	4b16      	ldr	r3, [pc, #88]	@ (8010808 <tcp_input+0x800>)
 80107b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107b2:	885b      	ldrh	r3, [r3, #2]
 80107b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107b6:	4a14      	ldr	r2, [pc, #80]	@ (8010808 <tcp_input+0x800>)
 80107b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107ba:	8812      	ldrh	r2, [r2, #0]
 80107bc:	b292      	uxth	r2, r2
 80107be:	9202      	str	r2, [sp, #8]
 80107c0:	9301      	str	r3, [sp, #4]
 80107c2:	4b15      	ldr	r3, [pc, #84]	@ (8010818 <tcp_input+0x810>)
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	4b15      	ldr	r3, [pc, #84]	@ (801081c <tcp_input+0x814>)
 80107c8:	4602      	mov	r2, r0
 80107ca:	2000      	movs	r0, #0
 80107cc:	f003 f818 	bl	8013800 <tcp_rst>
    pbuf_free(p);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7fd fcc9 	bl	800e168 <pbuf_free>
  return;
 80107d6:	e00c      	b.n	80107f2 <tcp_input+0x7ea>
    goto dropped;
 80107d8:	bf00      	nop
 80107da:	e006      	b.n	80107ea <tcp_input+0x7e2>
    goto dropped;
 80107dc:	bf00      	nop
 80107de:	e004      	b.n	80107ea <tcp_input+0x7e2>
    goto dropped;
 80107e0:	bf00      	nop
 80107e2:	e002      	b.n	80107ea <tcp_input+0x7e2>
      goto dropped;
 80107e4:	bf00      	nop
 80107e6:	e000      	b.n	80107ea <tcp_input+0x7e2>
      goto dropped;
 80107e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7fd fcbc 	bl	800e168 <pbuf_free>
 80107f0:	e000      	b.n	80107f4 <tcp_input+0x7ec>
  return;
 80107f2:	bf00      	nop
}
 80107f4:	3724      	adds	r7, #36	@ 0x24
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd90      	pop	{r4, r7, pc}
 80107fa:	bf00      	nop
 80107fc:	2400f97c 	.word	0x2400f97c
 8010800:	2400f978 	.word	0x2400f978
 8010804:	2400f948 	.word	0x2400f948
 8010808:	2400f958 	.word	0x2400f958
 801080c:	2400f96c 	.word	0x2400f96c
 8010810:	2400f972 	.word	0x2400f972
 8010814:	2400f968 	.word	0x2400f968
 8010818:	24008e70 	.word	0x24008e70
 801081c:	24008e74 	.word	0x24008e74

08010820 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d106      	bne.n	801083c <tcp_input_delayed_close+0x1c>
 801082e:	4b17      	ldr	r3, [pc, #92]	@ (801088c <tcp_input_delayed_close+0x6c>)
 8010830:	f240 225a 	movw	r2, #602	@ 0x25a
 8010834:	4916      	ldr	r1, [pc, #88]	@ (8010890 <tcp_input_delayed_close+0x70>)
 8010836:	4817      	ldr	r0, [pc, #92]	@ (8010894 <tcp_input_delayed_close+0x74>)
 8010838:	f003 ff7a 	bl	8014730 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801083c:	4b16      	ldr	r3, [pc, #88]	@ (8010898 <tcp_input_delayed_close+0x78>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f003 0310 	and.w	r3, r3, #16
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01c      	beq.n	8010882 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	8b5b      	ldrh	r3, [r3, #26]
 801084c:	f003 0310 	and.w	r3, r3, #16
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10d      	bne.n	8010870 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801085a:	2b00      	cmp	r3, #0
 801085c:	d008      	beq.n	8010870 <tcp_input_delayed_close+0x50>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	6912      	ldr	r2, [r2, #16]
 8010868:	f06f 010e 	mvn.w	r1, #14
 801086c:	4610      	mov	r0, r2
 801086e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	480a      	ldr	r0, [pc, #40]	@ (801089c <tcp_input_delayed_close+0x7c>)
 8010874:	f7ff fa50 	bl	800fd18 <tcp_pcb_remove>
    tcp_free(pcb);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7fe f837 	bl	800e8ec <tcp_free>
    return 1;
 801087e:	2301      	movs	r3, #1
 8010880:	e000      	b.n	8010884 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	08017158 	.word	0x08017158
 8010890:	08017354 	.word	0x08017354
 8010894:	080171d0 	.word	0x080171d0
 8010898:	2400f975 	.word	0x2400f975
 801089c:	2400f93c 	.word	0x2400f93c

080108a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b08b      	sub	sp, #44	@ 0x2c
 80108a4:	af04      	add	r7, sp, #16
 80108a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80108a8:	4b6f      	ldr	r3, [pc, #444]	@ (8010a68 <tcp_listen_input+0x1c8>)
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f040 80d2 	bne.w	8010a5a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d106      	bne.n	80108ca <tcp_listen_input+0x2a>
 80108bc:	4b6b      	ldr	r3, [pc, #428]	@ (8010a6c <tcp_listen_input+0x1cc>)
 80108be:	f240 2281 	movw	r2, #641	@ 0x281
 80108c2:	496b      	ldr	r1, [pc, #428]	@ (8010a70 <tcp_listen_input+0x1d0>)
 80108c4:	486b      	ldr	r0, [pc, #428]	@ (8010a74 <tcp_listen_input+0x1d4>)
 80108c6:	f003 ff33 	bl	8014730 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80108ca:	4b67      	ldr	r3, [pc, #412]	@ (8010a68 <tcp_listen_input+0x1c8>)
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	f003 0310 	and.w	r3, r3, #16
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d019      	beq.n	801090a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108d6:	4b68      	ldr	r3, [pc, #416]	@ (8010a78 <tcp_listen_input+0x1d8>)
 80108d8:	6819      	ldr	r1, [r3, #0]
 80108da:	4b68      	ldr	r3, [pc, #416]	@ (8010a7c <tcp_listen_input+0x1dc>)
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	461a      	mov	r2, r3
 80108e0:	4b67      	ldr	r3, [pc, #412]	@ (8010a80 <tcp_listen_input+0x1e0>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108e6:	4b67      	ldr	r3, [pc, #412]	@ (8010a84 <tcp_listen_input+0x1e4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ea:	885b      	ldrh	r3, [r3, #2]
 80108ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108ee:	4a65      	ldr	r2, [pc, #404]	@ (8010a84 <tcp_listen_input+0x1e4>)
 80108f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108f2:	8812      	ldrh	r2, [r2, #0]
 80108f4:	b292      	uxth	r2, r2
 80108f6:	9202      	str	r2, [sp, #8]
 80108f8:	9301      	str	r3, [sp, #4]
 80108fa:	4b63      	ldr	r3, [pc, #396]	@ (8010a88 <tcp_listen_input+0x1e8>)
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4b63      	ldr	r3, [pc, #396]	@ (8010a8c <tcp_listen_input+0x1ec>)
 8010900:	4602      	mov	r2, r0
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f002 ff7c 	bl	8013800 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010908:	e0a9      	b.n	8010a5e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801090a:	4b57      	ldr	r3, [pc, #348]	@ (8010a68 <tcp_listen_input+0x1c8>)
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	f003 0302 	and.w	r3, r3, #2
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 80a3 	beq.w	8010a5e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7d5b      	ldrb	r3, [r3, #21]
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff f927 	bl	800fb70 <tcp_alloc>
 8010922:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d111      	bne.n	801094e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00a      	beq.n	8010948 <tcp_listen_input+0xa8>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	699b      	ldr	r3, [r3, #24]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	6910      	ldr	r0, [r2, #16]
 801093a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801093e:	2100      	movs	r1, #0
 8010940:	4798      	blx	r3
 8010942:	4603      	mov	r3, r0
 8010944:	73bb      	strb	r3, [r7, #14]
      return;
 8010946:	e08b      	b.n	8010a60 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010948:	23f0      	movs	r3, #240	@ 0xf0
 801094a:	73bb      	strb	r3, [r7, #14]
      return;
 801094c:	e088      	b.n	8010a60 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801094e:	4b50      	ldr	r3, [pc, #320]	@ (8010a90 <tcp_listen_input+0x1f0>)
 8010950:	695a      	ldr	r2, [r3, #20]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010956:	4b4e      	ldr	r3, [pc, #312]	@ (8010a90 <tcp_listen_input+0x1f0>)
 8010958:	691a      	ldr	r2, [r3, #16]
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	8ada      	ldrh	r2, [r3, #22]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010966:	4b47      	ldr	r3, [pc, #284]	@ (8010a84 <tcp_listen_input+0x1e4>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	b29a      	uxth	r2, r3
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2203      	movs	r2, #3
 8010976:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010978:	4b41      	ldr	r3, [pc, #260]	@ (8010a80 <tcp_listen_input+0x1e0>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	1c5a      	adds	r2, r3, #1
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801098a:	6978      	ldr	r0, [r7, #20]
 801098c:	f7ff fa58 	bl	800fe40 <tcp_next_iss>
 8010990:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	693a      	ldr	r2, [r7, #16]
 8010996:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	693a      	ldr	r2, [r7, #16]
 801099c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80109aa:	4b35      	ldr	r3, [pc, #212]	@ (8010a80 <tcp_listen_input+0x1e0>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	1e5a      	subs	r2, r3, #1
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	691a      	ldr	r2, [r3, #16]
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	7a5b      	ldrb	r3, [r3, #9]
 80109c6:	f003 030c 	and.w	r3, r3, #12
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	7a1a      	ldrb	r2, [r3, #8]
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80109d8:	4b2e      	ldr	r3, [pc, #184]	@ (8010a94 <tcp_listen_input+0x1f4>)
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	60da      	str	r2, [r3, #12]
 80109e0:	4a2c      	ldr	r2, [pc, #176]	@ (8010a94 <tcp_listen_input+0x1f4>)
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	6013      	str	r3, [r2, #0]
 80109e6:	f003 fa6f 	bl	8013ec8 <tcp_timer_needed>
 80109ea:	4b2b      	ldr	r3, [pc, #172]	@ (8010a98 <tcp_listen_input+0x1f8>)
 80109ec:	2201      	movs	r2, #1
 80109ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80109f0:	6978      	ldr	r0, [r7, #20]
 80109f2:	f001 fd8b 	bl	801250c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80109f6:	4b23      	ldr	r3, [pc, #140]	@ (8010a84 <tcp_listen_input+0x1e4>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	89db      	ldrh	r3, [r3, #14]
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	3304      	adds	r3, #4
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fa fef9 	bl	800b810 <ip4_route>
 8010a1e:	4601      	mov	r1, r0
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	3304      	adds	r3, #4
 8010a24:	461a      	mov	r2, r3
 8010a26:	4620      	mov	r0, r4
 8010a28:	f7ff fa30 	bl	800fe8c <tcp_eff_send_mss_netif>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	461a      	mov	r2, r3
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a34:	2112      	movs	r1, #18
 8010a36:	6978      	ldr	r0, [r7, #20]
 8010a38:	f002 f840 	bl	8012abc <tcp_enqueue_flags>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a48:	2100      	movs	r1, #0
 8010a4a:	6978      	ldr	r0, [r7, #20]
 8010a4c:	f7fe f978 	bl	800ed40 <tcp_abandon>
      return;
 8010a50:	e006      	b.n	8010a60 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010a52:	6978      	ldr	r0, [r7, #20]
 8010a54:	f002 f920 	bl	8012c98 <tcp_output>
  return;
 8010a58:	e001      	b.n	8010a5e <tcp_listen_input+0x1be>
    return;
 8010a5a:	bf00      	nop
 8010a5c:	e000      	b.n	8010a60 <tcp_listen_input+0x1c0>
  return;
 8010a5e:	bf00      	nop
}
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd90      	pop	{r4, r7, pc}
 8010a66:	bf00      	nop
 8010a68:	2400f974 	.word	0x2400f974
 8010a6c:	08017158 	.word	0x08017158
 8010a70:	0801737c 	.word	0x0801737c
 8010a74:	080171d0 	.word	0x080171d0
 8010a78:	2400f96c 	.word	0x2400f96c
 8010a7c:	2400f972 	.word	0x2400f972
 8010a80:	2400f968 	.word	0x2400f968
 8010a84:	2400f958 	.word	0x2400f958
 8010a88:	24008e70 	.word	0x24008e70
 8010a8c:	24008e74 	.word	0x24008e74
 8010a90:	24008e60 	.word	0x24008e60
 8010a94:	2400f93c 	.word	0x2400f93c
 8010a98:	2400f944 	.word	0x2400f944

08010a9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b086      	sub	sp, #24
 8010aa0:	af04      	add	r7, sp, #16
 8010aa2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8010b64 <tcp_timewait_input+0xc8>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	f003 0304 	and.w	r3, r3, #4
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d153      	bne.n	8010b58 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <tcp_timewait_input+0x28>
 8010ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8010b68 <tcp_timewait_input+0xcc>)
 8010ab8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010abc:	492b      	ldr	r1, [pc, #172]	@ (8010b6c <tcp_timewait_input+0xd0>)
 8010abe:	482c      	ldr	r0, [pc, #176]	@ (8010b70 <tcp_timewait_input+0xd4>)
 8010ac0:	f003 fe36 	bl	8014730 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010ac4:	4b27      	ldr	r3, [pc, #156]	@ (8010b64 <tcp_timewait_input+0xc8>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	f003 0302 	and.w	r3, r3, #2
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d02a      	beq.n	8010b26 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010ad0:	4b28      	ldr	r3, [pc, #160]	@ (8010b74 <tcp_timewait_input+0xd8>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	db2d      	blt.n	8010b3a <tcp_timewait_input+0x9e>
 8010ade:	4b25      	ldr	r3, [pc, #148]	@ (8010b74 <tcp_timewait_input+0xd8>)
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010aea:	440b      	add	r3, r1
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	dc23      	bgt.n	8010b3a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010af2:	4b21      	ldr	r3, [pc, #132]	@ (8010b78 <tcp_timewait_input+0xdc>)
 8010af4:	6819      	ldr	r1, [r3, #0]
 8010af6:	4b21      	ldr	r3, [pc, #132]	@ (8010b7c <tcp_timewait_input+0xe0>)
 8010af8:	881b      	ldrh	r3, [r3, #0]
 8010afa:	461a      	mov	r2, r3
 8010afc:	4b1d      	ldr	r3, [pc, #116]	@ (8010b74 <tcp_timewait_input+0xd8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b02:	4b1f      	ldr	r3, [pc, #124]	@ (8010b80 <tcp_timewait_input+0xe4>)
 8010b04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b06:	885b      	ldrh	r3, [r3, #2]
 8010b08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8010b80 <tcp_timewait_input+0xe4>)
 8010b0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b0e:	8812      	ldrh	r2, [r2, #0]
 8010b10:	b292      	uxth	r2, r2
 8010b12:	9202      	str	r2, [sp, #8]
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	4b1b      	ldr	r3, [pc, #108]	@ (8010b84 <tcp_timewait_input+0xe8>)
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010b88 <tcp_timewait_input+0xec>)
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f002 fe6e 	bl	8013800 <tcp_rst>
      return;
 8010b24:	e01b      	b.n	8010b5e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010b26:	4b0f      	ldr	r3, [pc, #60]	@ (8010b64 <tcp_timewait_input+0xc8>)
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	f003 0301 	and.w	r3, r3, #1
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d003      	beq.n	8010b3a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b32:	4b16      	ldr	r3, [pc, #88]	@ (8010b8c <tcp_timewait_input+0xf0>)
 8010b34:	681a      	ldr	r2, [r3, #0]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b3a:	4b10      	ldr	r3, [pc, #64]	@ (8010b7c <tcp_timewait_input+0xe0>)
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00c      	beq.n	8010b5c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	8b5b      	ldrh	r3, [r3, #26]
 8010b46:	f043 0302 	orr.w	r3, r3, #2
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f002 f8a1 	bl	8012c98 <tcp_output>
  }
  return;
 8010b56:	e001      	b.n	8010b5c <tcp_timewait_input+0xc0>
    return;
 8010b58:	bf00      	nop
 8010b5a:	e000      	b.n	8010b5e <tcp_timewait_input+0xc2>
  return;
 8010b5c:	bf00      	nop
}
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	2400f974 	.word	0x2400f974
 8010b68:	08017158 	.word	0x08017158
 8010b6c:	0801739c 	.word	0x0801739c
 8010b70:	080171d0 	.word	0x080171d0
 8010b74:	2400f968 	.word	0x2400f968
 8010b78:	2400f96c 	.word	0x2400f96c
 8010b7c:	2400f972 	.word	0x2400f972
 8010b80:	2400f958 	.word	0x2400f958
 8010b84:	24008e70 	.word	0x24008e70
 8010b88:	24008e74 	.word	0x24008e74
 8010b8c:	2400f930 	.word	0x2400f930

08010b90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b90:	b590      	push	{r4, r7, lr}
 8010b92:	b08d      	sub	sp, #52	@ 0x34
 8010b94:	af04      	add	r7, sp, #16
 8010b96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d106      	bne.n	8010bb4 <tcp_process+0x24>
 8010ba6:	4b9d      	ldr	r3, [pc, #628]	@ (8010e1c <tcp_process+0x28c>)
 8010ba8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010bac:	499c      	ldr	r1, [pc, #624]	@ (8010e20 <tcp_process+0x290>)
 8010bae:	489d      	ldr	r0, [pc, #628]	@ (8010e24 <tcp_process+0x294>)
 8010bb0:	f003 fdbe 	bl	8014730 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8010e28 <tcp_process+0x298>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f003 0304 	and.w	r3, r3, #4
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d04e      	beq.n	8010c5e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	7d1b      	ldrb	r3, [r3, #20]
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d108      	bne.n	8010bda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010bcc:	4b97      	ldr	r3, [pc, #604]	@ (8010e2c <tcp_process+0x29c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d123      	bne.n	8010c1c <tcp_process+0x8c>
        acceptable = 1;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	76fb      	strb	r3, [r7, #27]
 8010bd8:	e020      	b.n	8010c1c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bde:	4b94      	ldr	r3, [pc, #592]	@ (8010e30 <tcp_process+0x2a0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d102      	bne.n	8010bec <tcp_process+0x5c>
        acceptable = 1;
 8010be6:	2301      	movs	r3, #1
 8010be8:	76fb      	strb	r3, [r7, #27]
 8010bea:	e017      	b.n	8010c1c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bec:	4b90      	ldr	r3, [pc, #576]	@ (8010e30 <tcp_process+0x2a0>)
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf4:	1ad3      	subs	r3, r2, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	db10      	blt.n	8010c1c <tcp_process+0x8c>
 8010bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8010e30 <tcp_process+0x2a0>)
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c02:	6879      	ldr	r1, [r7, #4]
 8010c04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010c06:	440b      	add	r3, r1
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dc06      	bgt.n	8010c1c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8b5b      	ldrh	r3, [r3, #26]
 8010c12:	f043 0302 	orr.w	r3, r3, #2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c1c:	7efb      	ldrb	r3, [r7, #27]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d01b      	beq.n	8010c5a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	7d1b      	ldrb	r3, [r3, #20]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d106      	bne.n	8010c38 <tcp_process+0xa8>
 8010c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8010e1c <tcp_process+0x28c>)
 8010c2c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010c30:	4980      	ldr	r1, [pc, #512]	@ (8010e34 <tcp_process+0x2a4>)
 8010c32:	487c      	ldr	r0, [pc, #496]	@ (8010e24 <tcp_process+0x294>)
 8010c34:	f003 fd7c 	bl	8014730 <iprintf>
      recv_flags |= TF_RESET;
 8010c38:	4b7f      	ldr	r3, [pc, #508]	@ (8010e38 <tcp_process+0x2a8>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	f043 0308 	orr.w	r3, r3, #8
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	4b7d      	ldr	r3, [pc, #500]	@ (8010e38 <tcp_process+0x2a8>)
 8010c44:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8b5b      	ldrh	r3, [r3, #26]
 8010c4a:	f023 0301 	bic.w	r3, r3, #1
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c54:	f06f 030d 	mvn.w	r3, #13
 8010c58:	e37a      	b.n	8011350 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e378      	b.n	8011350 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c5e:	4b72      	ldr	r3, [pc, #456]	@ (8010e28 <tcp_process+0x298>)
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	f003 0302 	and.w	r3, r3, #2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d010      	beq.n	8010c8c <tcp_process+0xfc>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	7d1b      	ldrb	r3, [r3, #20]
 8010c6e:	2b02      	cmp	r3, #2
 8010c70:	d00c      	beq.n	8010c8c <tcp_process+0xfc>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7d1b      	ldrb	r3, [r3, #20]
 8010c76:	2b03      	cmp	r3, #3
 8010c78:	d008      	beq.n	8010c8c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	8b5b      	ldrh	r3, [r3, #26]
 8010c7e:	f043 0302 	orr.w	r3, r3, #2
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e361      	b.n	8011350 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	8b5b      	ldrh	r3, [r3, #26]
 8010c90:	f003 0310 	and.w	r3, r3, #16
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d103      	bne.n	8010ca0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c98:	4b68      	ldr	r3, [pc, #416]	@ (8010e3c <tcp_process+0x2ac>)
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f001 fc2b 	bl	801250c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	7d1b      	ldrb	r3, [r3, #20]
 8010cba:	3b02      	subs	r3, #2
 8010cbc:	2b07      	cmp	r3, #7
 8010cbe:	f200 8337 	bhi.w	8011330 <tcp_process+0x7a0>
 8010cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8010cc8 <tcp_process+0x138>)
 8010cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc8:	08010ce9 	.word	0x08010ce9
 8010ccc:	08010f19 	.word	0x08010f19
 8010cd0:	08011091 	.word	0x08011091
 8010cd4:	080110bb 	.word	0x080110bb
 8010cd8:	080111df 	.word	0x080111df
 8010cdc:	08011091 	.word	0x08011091
 8010ce0:	0801126b 	.word	0x0801126b
 8010ce4:	080112fb 	.word	0x080112fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8010e28 <tcp_process+0x298>)
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	f003 0310 	and.w	r3, r3, #16
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 80e4 	beq.w	8010ebe <tcp_process+0x32e>
 8010cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8010e28 <tcp_process+0x298>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 80dd 	beq.w	8010ebe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	4b48      	ldr	r3, [pc, #288]	@ (8010e2c <tcp_process+0x29c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	f040 80d5 	bne.w	8010ebe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d14:	4b46      	ldr	r3, [pc, #280]	@ (8010e30 <tcp_process+0x2a0>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	1c5a      	adds	r2, r3, #1
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010d26:	4b41      	ldr	r3, [pc, #260]	@ (8010e2c <tcp_process+0x29c>)
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d2e:	4b44      	ldr	r3, [pc, #272]	@ (8010e40 <tcp_process+0x2b0>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	89db      	ldrh	r3, [r3, #14]
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d48:	4b39      	ldr	r3, [pc, #228]	@ (8010e30 <tcp_process+0x2a0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	1e5a      	subs	r2, r3, #1
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2204      	movs	r2, #4
 8010d56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fa fd55 	bl	800b810 <ip4_route>
 8010d66:	4601      	mov	r1, r0
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7ff f88c 	bl	800fe8c <tcp_eff_send_mss_netif>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d80:	009a      	lsls	r2, r3, #2
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010d8c:	428b      	cmp	r3, r1
 8010d8e:	bf38      	it	cc
 8010d90:	460b      	movcc	r3, r1
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d204      	bcs.n	8010da0 <tcp_process+0x210>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	e00d      	b.n	8010dbc <tcp_process+0x22c>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d904      	bls.n	8010db8 <tcp_process+0x228>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	e001      	b.n	8010dbc <tcp_process+0x22c>
 8010db8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d106      	bne.n	8010dda <tcp_process+0x24a>
 8010dcc:	4b13      	ldr	r3, [pc, #76]	@ (8010e1c <tcp_process+0x28c>)
 8010dce:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010dd2:	491c      	ldr	r1, [pc, #112]	@ (8010e44 <tcp_process+0x2b4>)
 8010dd4:	4813      	ldr	r0, [pc, #76]	@ (8010e24 <tcp_process+0x294>)
 8010dd6:	f003 fcab 	bl	8014730 <iprintf>
        --pcb->snd_queuelen;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010de0:	3b01      	subs	r3, #1
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010dee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d12a      	bne.n	8010e4c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dfa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <tcp_process+0x280>
 8010e02:	4b06      	ldr	r3, [pc, #24]	@ (8010e1c <tcp_process+0x28c>)
 8010e04:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010e08:	490f      	ldr	r1, [pc, #60]	@ (8010e48 <tcp_process+0x2b8>)
 8010e0a:	4806      	ldr	r0, [pc, #24]	@ (8010e24 <tcp_process+0x294>)
 8010e0c:	f003 fc90 	bl	8014730 <iprintf>
          pcb->unsent = rseg->next;
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e18:	e01c      	b.n	8010e54 <tcp_process+0x2c4>
 8010e1a:	bf00      	nop
 8010e1c:	08017158 	.word	0x08017158
 8010e20:	080173bc 	.word	0x080173bc
 8010e24:	080171d0 	.word	0x080171d0
 8010e28:	2400f974 	.word	0x2400f974
 8010e2c:	2400f96c 	.word	0x2400f96c
 8010e30:	2400f968 	.word	0x2400f968
 8010e34:	080173d8 	.word	0x080173d8
 8010e38:	2400f975 	.word	0x2400f975
 8010e3c:	2400f930 	.word	0x2400f930
 8010e40:	2400f958 	.word	0x2400f958
 8010e44:	080173f8 	.word	0x080173f8
 8010e48:	08017410 	.word	0x08017410
        } else {
          pcb->unacked = rseg->next;
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010e54:	69f8      	ldr	r0, [r7, #28]
 8010e56:	f7fe fd22 	bl	800f89e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d104      	bne.n	8010e6c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e68:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010e6a:	e006      	b.n	8010e7a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00a      	beq.n	8010e9a <tcp_process+0x30a>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	6910      	ldr	r0, [r2, #16]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	6879      	ldr	r1, [r7, #4]
 8010e92:	4798      	blx	r3
 8010e94:	4603      	mov	r3, r0
 8010e96:	76bb      	strb	r3, [r7, #26]
 8010e98:	e001      	b.n	8010e9e <tcp_process+0x30e>
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ea2:	f113 0f0d 	cmn.w	r3, #13
 8010ea6:	d102      	bne.n	8010eae <tcp_process+0x31e>
          return ERR_ABRT;
 8010ea8:	f06f 030c 	mvn.w	r3, #12
 8010eac:	e250      	b.n	8011350 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8b5b      	ldrh	r3, [r3, #26]
 8010eb2:	f043 0302 	orr.w	r3, r3, #2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010ebc:	e23a      	b.n	8011334 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010ebe:	4b98      	ldr	r3, [pc, #608]	@ (8011120 <tcp_process+0x590>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	f003 0310 	and.w	r3, r3, #16
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f000 8234 	beq.w	8011334 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ecc:	4b95      	ldr	r3, [pc, #596]	@ (8011124 <tcp_process+0x594>)
 8010ece:	6819      	ldr	r1, [r3, #0]
 8010ed0:	4b95      	ldr	r3, [pc, #596]	@ (8011128 <tcp_process+0x598>)
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	4b95      	ldr	r3, [pc, #596]	@ (801112c <tcp_process+0x59c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010edc:	4b94      	ldr	r3, [pc, #592]	@ (8011130 <tcp_process+0x5a0>)
 8010ede:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ee0:	885b      	ldrh	r3, [r3, #2]
 8010ee2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ee4:	4a92      	ldr	r2, [pc, #584]	@ (8011130 <tcp_process+0x5a0>)
 8010ee6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ee8:	8812      	ldrh	r2, [r2, #0]
 8010eea:	b292      	uxth	r2, r2
 8010eec:	9202      	str	r2, [sp, #8]
 8010eee:	9301      	str	r3, [sp, #4]
 8010ef0:	4b90      	ldr	r3, [pc, #576]	@ (8011134 <tcp_process+0x5a4>)
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	4b90      	ldr	r3, [pc, #576]	@ (8011138 <tcp_process+0x5a8>)
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f002 fc81 	bl	8013800 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010f04:	2b05      	cmp	r3, #5
 8010f06:	f200 8215 	bhi.w	8011334 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f002 fa4d 	bl	80133b0 <tcp_rexmit_rto>
      break;
 8010f16:	e20d      	b.n	8011334 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f18:	4b81      	ldr	r3, [pc, #516]	@ (8011120 <tcp_process+0x590>)
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	f003 0310 	and.w	r3, r3, #16
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 80a1 	beq.w	8011068 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f26:	4b7f      	ldr	r3, [pc, #508]	@ (8011124 <tcp_process+0x594>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	3b01      	subs	r3, #1
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	db7e      	blt.n	8011034 <tcp_process+0x4a4>
 8010f36:	4b7b      	ldr	r3, [pc, #492]	@ (8011124 <tcp_process+0x594>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f3e:	1ad3      	subs	r3, r2, r3
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	dc77      	bgt.n	8011034 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2204      	movs	r2, #4
 8010f48:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d102      	bne.n	8010f58 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f52:	23fa      	movs	r3, #250	@ 0xfa
 8010f54:	76bb      	strb	r3, [r7, #26]
 8010f56:	e01d      	b.n	8010f94 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f5c:	699b      	ldr	r3, [r3, #24]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d106      	bne.n	8010f70 <tcp_process+0x3e0>
 8010f62:	4b76      	ldr	r3, [pc, #472]	@ (801113c <tcp_process+0x5ac>)
 8010f64:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010f68:	4975      	ldr	r1, [pc, #468]	@ (8011140 <tcp_process+0x5b0>)
 8010f6a:	4876      	ldr	r0, [pc, #472]	@ (8011144 <tcp_process+0x5b4>)
 8010f6c:	f003 fbe0 	bl	8014730 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f74:	699b      	ldr	r3, [r3, #24]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00a      	beq.n	8010f90 <tcp_process+0x400>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	6910      	ldr	r0, [r2, #16]
 8010f84:	2200      	movs	r2, #0
 8010f86:	6879      	ldr	r1, [r7, #4]
 8010f88:	4798      	blx	r3
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	76bb      	strb	r3, [r7, #26]
 8010f8e:	e001      	b.n	8010f94 <tcp_process+0x404>
 8010f90:	23f0      	movs	r3, #240	@ 0xf0
 8010f92:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00a      	beq.n	8010fb2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fa0:	f113 0f0d 	cmn.w	r3, #13
 8010fa4:	d002      	beq.n	8010fac <tcp_process+0x41c>
              tcp_abort(pcb);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7fd ff88 	bl	800eebc <tcp_abort>
            }
            return ERR_ABRT;
 8010fac:	f06f 030c 	mvn.w	r3, #12
 8010fb0:	e1ce      	b.n	8011350 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fae0 	bl	8011578 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010fb8:	4b63      	ldr	r3, [pc, #396]	@ (8011148 <tcp_process+0x5b8>)
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d005      	beq.n	8010fcc <tcp_process+0x43c>
            recv_acked--;
 8010fc0:	4b61      	ldr	r3, [pc, #388]	@ (8011148 <tcp_process+0x5b8>)
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8011148 <tcp_process+0x5b8>)
 8010fca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fd0:	009a      	lsls	r2, r3, #2
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fd6:	005b      	lsls	r3, r3, #1
 8010fd8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010fdc:	428b      	cmp	r3, r1
 8010fde:	bf38      	it	cc
 8010fe0:	460b      	movcc	r3, r1
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d204      	bcs.n	8010ff0 <tcp_process+0x460>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	e00d      	b.n	801100c <tcp_process+0x47c>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d904      	bls.n	8011008 <tcp_process+0x478>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	b29b      	uxth	r3, r3
 8011006:	e001      	b.n	801100c <tcp_process+0x47c>
 8011008:	f241 131c 	movw	r3, #4380	@ 0x111c
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011012:	4b4e      	ldr	r3, [pc, #312]	@ (801114c <tcp_process+0x5bc>)
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 0320 	and.w	r3, r3, #32
 801101a:	2b00      	cmp	r3, #0
 801101c:	d037      	beq.n	801108e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8b5b      	ldrh	r3, [r3, #26]
 8011022:	f043 0302 	orr.w	r3, r3, #2
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2207      	movs	r2, #7
 8011030:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011032:	e02c      	b.n	801108e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011034:	4b3b      	ldr	r3, [pc, #236]	@ (8011124 <tcp_process+0x594>)
 8011036:	6819      	ldr	r1, [r3, #0]
 8011038:	4b3b      	ldr	r3, [pc, #236]	@ (8011128 <tcp_process+0x598>)
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	461a      	mov	r2, r3
 801103e:	4b3b      	ldr	r3, [pc, #236]	@ (801112c <tcp_process+0x59c>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011044:	4b3a      	ldr	r3, [pc, #232]	@ (8011130 <tcp_process+0x5a0>)
 8011046:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011048:	885b      	ldrh	r3, [r3, #2]
 801104a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801104c:	4a38      	ldr	r2, [pc, #224]	@ (8011130 <tcp_process+0x5a0>)
 801104e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011050:	8812      	ldrh	r2, [r2, #0]
 8011052:	b292      	uxth	r2, r2
 8011054:	9202      	str	r2, [sp, #8]
 8011056:	9301      	str	r3, [sp, #4]
 8011058:	4b36      	ldr	r3, [pc, #216]	@ (8011134 <tcp_process+0x5a4>)
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	4b36      	ldr	r3, [pc, #216]	@ (8011138 <tcp_process+0x5a8>)
 801105e:	4602      	mov	r2, r0
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f002 fbcd 	bl	8013800 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011066:	e167      	b.n	8011338 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011068:	4b2d      	ldr	r3, [pc, #180]	@ (8011120 <tcp_process+0x590>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b00      	cmp	r3, #0
 8011072:	f000 8161 	beq.w	8011338 <tcp_process+0x7a8>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801107a:	1e5a      	subs	r2, r3, #1
 801107c:	4b2b      	ldr	r3, [pc, #172]	@ (801112c <tcp_process+0x59c>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	429a      	cmp	r2, r3
 8011082:	f040 8159 	bne.w	8011338 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f002 f9b4 	bl	80133f4 <tcp_rexmit>
      break;
 801108c:	e154      	b.n	8011338 <tcp_process+0x7a8>
 801108e:	e153      	b.n	8011338 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fa71 	bl	8011578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011096:	4b2d      	ldr	r3, [pc, #180]	@ (801114c <tcp_process+0x5bc>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	f003 0320 	and.w	r3, r3, #32
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f000 814c 	beq.w	801133c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8b5b      	ldrh	r3, [r3, #26]
 80110a8:	f043 0302 	orr.w	r3, r3, #2
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2207      	movs	r2, #7
 80110b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110b8:	e140      	b.n	801133c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 fa5c 	bl	8011578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110c0:	4b22      	ldr	r3, [pc, #136]	@ (801114c <tcp_process+0x5bc>)
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	f003 0320 	and.w	r3, r3, #32
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d071      	beq.n	80111b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110cc:	4b14      	ldr	r3, [pc, #80]	@ (8011120 <tcp_process+0x590>)
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	f003 0310 	and.w	r3, r3, #16
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d060      	beq.n	801119a <tcp_process+0x60a>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110dc:	4b11      	ldr	r3, [pc, #68]	@ (8011124 <tcp_process+0x594>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d15a      	bne.n	801119a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d156      	bne.n	801119a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8b5b      	ldrh	r3, [r3, #26]
 80110f0:	f043 0302 	orr.w	r3, r3, #2
 80110f4:	b29a      	uxth	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7fe fdbc 	bl	800fc78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011100:	4b13      	ldr	r3, [pc, #76]	@ (8011150 <tcp_process+0x5c0>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	429a      	cmp	r2, r3
 8011108:	d105      	bne.n	8011116 <tcp_process+0x586>
 801110a:	4b11      	ldr	r3, [pc, #68]	@ (8011150 <tcp_process+0x5c0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	4a0f      	ldr	r2, [pc, #60]	@ (8011150 <tcp_process+0x5c0>)
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	e02e      	b.n	8011174 <tcp_process+0x5e4>
 8011116:	4b0e      	ldr	r3, [pc, #56]	@ (8011150 <tcp_process+0x5c0>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	617b      	str	r3, [r7, #20]
 801111c:	e027      	b.n	801116e <tcp_process+0x5de>
 801111e:	bf00      	nop
 8011120:	2400f974 	.word	0x2400f974
 8011124:	2400f96c 	.word	0x2400f96c
 8011128:	2400f972 	.word	0x2400f972
 801112c:	2400f968 	.word	0x2400f968
 8011130:	2400f958 	.word	0x2400f958
 8011134:	24008e70 	.word	0x24008e70
 8011138:	24008e74 	.word	0x24008e74
 801113c:	08017158 	.word	0x08017158
 8011140:	08017424 	.word	0x08017424
 8011144:	080171d0 	.word	0x080171d0
 8011148:	2400f970 	.word	0x2400f970
 801114c:	2400f975 	.word	0x2400f975
 8011150:	2400f93c 	.word	0x2400f93c
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	429a      	cmp	r2, r3
 801115c:	d104      	bne.n	8011168 <tcp_process+0x5d8>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68da      	ldr	r2, [r3, #12]
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	60da      	str	r2, [r3, #12]
 8011166:	e005      	b.n	8011174 <tcp_process+0x5e4>
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	617b      	str	r3, [r7, #20]
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d1ef      	bne.n	8011154 <tcp_process+0x5c4>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	60da      	str	r2, [r3, #12]
 801117a:	4b77      	ldr	r3, [pc, #476]	@ (8011358 <tcp_process+0x7c8>)
 801117c:	2201      	movs	r2, #1
 801117e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	220a      	movs	r2, #10
 8011184:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011186:	4b75      	ldr	r3, [pc, #468]	@ (801135c <tcp_process+0x7cc>)
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	60da      	str	r2, [r3, #12]
 801118e:	4a73      	ldr	r2, [pc, #460]	@ (801135c <tcp_process+0x7cc>)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	f002 fe98 	bl	8013ec8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011198:	e0d2      	b.n	8011340 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8b5b      	ldrh	r3, [r3, #26]
 801119e:	f043 0302 	orr.w	r3, r3, #2
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2208      	movs	r2, #8
 80111ac:	751a      	strb	r2, [r3, #20]
      break;
 80111ae:	e0c7      	b.n	8011340 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111b0:	4b6b      	ldr	r3, [pc, #428]	@ (8011360 <tcp_process+0x7d0>)
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f003 0310 	and.w	r3, r3, #16
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 80c1 	beq.w	8011340 <tcp_process+0x7b0>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111c2:	4b68      	ldr	r3, [pc, #416]	@ (8011364 <tcp_process+0x7d4>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	429a      	cmp	r2, r3
 80111c8:	f040 80ba 	bne.w	8011340 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f040 80b5 	bne.w	8011340 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2206      	movs	r2, #6
 80111da:	751a      	strb	r2, [r3, #20]
      break;
 80111dc:	e0b0      	b.n	8011340 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f9ca 	bl	8011578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111e4:	4b60      	ldr	r3, [pc, #384]	@ (8011368 <tcp_process+0x7d8>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f003 0320 	and.w	r3, r3, #32
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80a9 	beq.w	8011344 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	8b5b      	ldrh	r3, [r3, #26]
 80111f6:	f043 0302 	orr.w	r3, r3, #2
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7fe fd39 	bl	800fc78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011206:	4b59      	ldr	r3, [pc, #356]	@ (801136c <tcp_process+0x7dc>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	429a      	cmp	r2, r3
 801120e:	d105      	bne.n	801121c <tcp_process+0x68c>
 8011210:	4b56      	ldr	r3, [pc, #344]	@ (801136c <tcp_process+0x7dc>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	4a55      	ldr	r2, [pc, #340]	@ (801136c <tcp_process+0x7dc>)
 8011218:	6013      	str	r3, [r2, #0]
 801121a:	e013      	b.n	8011244 <tcp_process+0x6b4>
 801121c:	4b53      	ldr	r3, [pc, #332]	@ (801136c <tcp_process+0x7dc>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	613b      	str	r3, [r7, #16]
 8011222:	e00c      	b.n	801123e <tcp_process+0x6ae>
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	429a      	cmp	r2, r3
 801122c:	d104      	bne.n	8011238 <tcp_process+0x6a8>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	68da      	ldr	r2, [r3, #12]
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	60da      	str	r2, [r3, #12]
 8011236:	e005      	b.n	8011244 <tcp_process+0x6b4>
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	613b      	str	r3, [r7, #16]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1ef      	bne.n	8011224 <tcp_process+0x694>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	60da      	str	r2, [r3, #12]
 801124a:	4b43      	ldr	r3, [pc, #268]	@ (8011358 <tcp_process+0x7c8>)
 801124c:	2201      	movs	r2, #1
 801124e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	220a      	movs	r2, #10
 8011254:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011256:	4b41      	ldr	r3, [pc, #260]	@ (801135c <tcp_process+0x7cc>)
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	60da      	str	r2, [r3, #12]
 801125e:	4a3f      	ldr	r2, [pc, #252]	@ (801135c <tcp_process+0x7cc>)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6013      	str	r3, [r2, #0]
 8011264:	f002 fe30 	bl	8013ec8 <tcp_timer_needed>
      }
      break;
 8011268:	e06c      	b.n	8011344 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 f984 	bl	8011578 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011270:	4b3b      	ldr	r3, [pc, #236]	@ (8011360 <tcp_process+0x7d0>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f003 0310 	and.w	r3, r3, #16
 8011278:	2b00      	cmp	r3, #0
 801127a:	d065      	beq.n	8011348 <tcp_process+0x7b8>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011280:	4b38      	ldr	r3, [pc, #224]	@ (8011364 <tcp_process+0x7d4>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	429a      	cmp	r2, r3
 8011286:	d15f      	bne.n	8011348 <tcp_process+0x7b8>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d15b      	bne.n	8011348 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f7fe fcf1 	bl	800fc78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011296:	4b35      	ldr	r3, [pc, #212]	@ (801136c <tcp_process+0x7dc>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	429a      	cmp	r2, r3
 801129e:	d105      	bne.n	80112ac <tcp_process+0x71c>
 80112a0:	4b32      	ldr	r3, [pc, #200]	@ (801136c <tcp_process+0x7dc>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	4a31      	ldr	r2, [pc, #196]	@ (801136c <tcp_process+0x7dc>)
 80112a8:	6013      	str	r3, [r2, #0]
 80112aa:	e013      	b.n	80112d4 <tcp_process+0x744>
 80112ac:	4b2f      	ldr	r3, [pc, #188]	@ (801136c <tcp_process+0x7dc>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	e00c      	b.n	80112ce <tcp_process+0x73e>
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d104      	bne.n	80112c8 <tcp_process+0x738>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68da      	ldr	r2, [r3, #12]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	60da      	str	r2, [r3, #12]
 80112c6:	e005      	b.n	80112d4 <tcp_process+0x744>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	60fb      	str	r3, [r7, #12]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1ef      	bne.n	80112b4 <tcp_process+0x724>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	60da      	str	r2, [r3, #12]
 80112da:	4b1f      	ldr	r3, [pc, #124]	@ (8011358 <tcp_process+0x7c8>)
 80112dc:	2201      	movs	r2, #1
 80112de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	220a      	movs	r2, #10
 80112e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80112e6:	4b1d      	ldr	r3, [pc, #116]	@ (801135c <tcp_process+0x7cc>)
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	60da      	str	r2, [r3, #12]
 80112ee:	4a1b      	ldr	r2, [pc, #108]	@ (801135c <tcp_process+0x7cc>)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6013      	str	r3, [r2, #0]
 80112f4:	f002 fde8 	bl	8013ec8 <tcp_timer_needed>
      }
      break;
 80112f8:	e026      	b.n	8011348 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 f93c 	bl	8011578 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011300:	4b17      	ldr	r3, [pc, #92]	@ (8011360 <tcp_process+0x7d0>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 0310 	and.w	r3, r3, #16
 8011308:	2b00      	cmp	r3, #0
 801130a:	d01f      	beq.n	801134c <tcp_process+0x7bc>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011310:	4b14      	ldr	r3, [pc, #80]	@ (8011364 <tcp_process+0x7d4>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	429a      	cmp	r2, r3
 8011316:	d119      	bne.n	801134c <tcp_process+0x7bc>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801131c:	2b00      	cmp	r3, #0
 801131e:	d115      	bne.n	801134c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011320:	4b11      	ldr	r3, [pc, #68]	@ (8011368 <tcp_process+0x7d8>)
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	f043 0310 	orr.w	r3, r3, #16
 8011328:	b2da      	uxtb	r2, r3
 801132a:	4b0f      	ldr	r3, [pc, #60]	@ (8011368 <tcp_process+0x7d8>)
 801132c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801132e:	e00d      	b.n	801134c <tcp_process+0x7bc>
    default:
      break;
 8011330:	bf00      	nop
 8011332:	e00c      	b.n	801134e <tcp_process+0x7be>
      break;
 8011334:	bf00      	nop
 8011336:	e00a      	b.n	801134e <tcp_process+0x7be>
      break;
 8011338:	bf00      	nop
 801133a:	e008      	b.n	801134e <tcp_process+0x7be>
      break;
 801133c:	bf00      	nop
 801133e:	e006      	b.n	801134e <tcp_process+0x7be>
      break;
 8011340:	bf00      	nop
 8011342:	e004      	b.n	801134e <tcp_process+0x7be>
      break;
 8011344:	bf00      	nop
 8011346:	e002      	b.n	801134e <tcp_process+0x7be>
      break;
 8011348:	bf00      	nop
 801134a:	e000      	b.n	801134e <tcp_process+0x7be>
      break;
 801134c:	bf00      	nop
  }
  return ERR_OK;
 801134e:	2300      	movs	r3, #0
}
 8011350:	4618      	mov	r0, r3
 8011352:	3724      	adds	r7, #36	@ 0x24
 8011354:	46bd      	mov	sp, r7
 8011356:	bd90      	pop	{r4, r7, pc}
 8011358:	2400f944 	.word	0x2400f944
 801135c:	2400f940 	.word	0x2400f940
 8011360:	2400f974 	.word	0x2400f974
 8011364:	2400f96c 	.word	0x2400f96c
 8011368:	2400f975 	.word	0x2400f975
 801136c:	2400f93c 	.word	0x2400f93c

08011370 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011370:	b590      	push	{r4, r7, lr}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d106      	bne.n	801138e <tcp_oos_insert_segment+0x1e>
 8011380:	4b3b      	ldr	r3, [pc, #236]	@ (8011470 <tcp_oos_insert_segment+0x100>)
 8011382:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011386:	493b      	ldr	r1, [pc, #236]	@ (8011474 <tcp_oos_insert_segment+0x104>)
 8011388:	483b      	ldr	r0, [pc, #236]	@ (8011478 <tcp_oos_insert_segment+0x108>)
 801138a:	f003 f9d1 	bl	8014730 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	899b      	ldrh	r3, [r3, #12]
 8011394:	b29b      	uxth	r3, r3
 8011396:	4618      	mov	r0, r3
 8011398:	f7f8 ff60 	bl	800a25c <lwip_htons>
 801139c:	4603      	mov	r3, r0
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	f003 0301 	and.w	r3, r3, #1
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d028      	beq.n	80113fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80113a8:	6838      	ldr	r0, [r7, #0]
 80113aa:	f7fe fa63 	bl	800f874 <tcp_segs_free>
    next = NULL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	603b      	str	r3, [r7, #0]
 80113b2:	e056      	b.n	8011462 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	899b      	ldrh	r3, [r3, #12]
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	4618      	mov	r0, r3
 80113be:	f7f8 ff4d 	bl	800a25c <lwip_htons>
 80113c2:	4603      	mov	r3, r0
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00d      	beq.n	80113ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	899b      	ldrh	r3, [r3, #12]
 80113d4:	b29c      	uxth	r4, r3
 80113d6:	2001      	movs	r0, #1
 80113d8:	f7f8 ff40 	bl	800a25c <lwip_htons>
 80113dc:	4603      	mov	r3, r0
 80113de:	461a      	mov	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	4322      	orrs	r2, r4
 80113e6:	b292      	uxth	r2, r2
 80113e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7fe fa52 	bl	800f89e <tcp_seg_free>
    while (next &&
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d00e      	beq.n	801141e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	891b      	ldrh	r3, [r3, #8]
 8011404:	461a      	mov	r2, r3
 8011406:	4b1d      	ldr	r3, [pc, #116]	@ (801147c <tcp_oos_insert_segment+0x10c>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	441a      	add	r2, r3
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	6839      	ldr	r1, [r7, #0]
 8011414:	8909      	ldrh	r1, [r1, #8]
 8011416:	440b      	add	r3, r1
 8011418:	1ad3      	subs	r3, r2, r3
    while (next &&
 801141a:	2b00      	cmp	r3, #0
 801141c:	daca      	bge.n	80113b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d01e      	beq.n	8011462 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	891b      	ldrh	r3, [r3, #8]
 8011428:	461a      	mov	r2, r3
 801142a:	4b14      	ldr	r3, [pc, #80]	@ (801147c <tcp_oos_insert_segment+0x10c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	441a      	add	r2, r3
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011438:	2b00      	cmp	r3, #0
 801143a:	dd12      	ble.n	8011462 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	b29a      	uxth	r2, r3
 8011444:	4b0d      	ldr	r3, [pc, #52]	@ (801147c <tcp_oos_insert_segment+0x10c>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	b29b      	uxth	r3, r3
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	b29a      	uxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	685a      	ldr	r2, [r3, #4]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	891b      	ldrh	r3, [r3, #8]
 801145a:	4619      	mov	r1, r3
 801145c:	4610      	mov	r0, r2
 801145e:	f7fc fcff 	bl	800de60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	683a      	ldr	r2, [r7, #0]
 8011466:	601a      	str	r2, [r3, #0]
}
 8011468:	bf00      	nop
 801146a:	3714      	adds	r7, #20
 801146c:	46bd      	mov	sp, r7
 801146e:	bd90      	pop	{r4, r7, pc}
 8011470:	08017158 	.word	0x08017158
 8011474:	08017444 	.word	0x08017444
 8011478:	080171d0 	.word	0x080171d0
 801147c:	2400f968 	.word	0x2400f968

08011480 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011480:	b5b0      	push	{r4, r5, r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
 801148c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801148e:	e03e      	b.n	801150e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fc fef0 	bl	800e284 <pbuf_clen>
 80114a4:	4603      	mov	r3, r0
 80114a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114ae:	8a7a      	ldrh	r2, [r7, #18]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d906      	bls.n	80114c2 <tcp_free_acked_segments+0x42>
 80114b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011560 <tcp_free_acked_segments+0xe0>)
 80114b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80114ba:	492a      	ldr	r1, [pc, #168]	@ (8011564 <tcp_free_acked_segments+0xe4>)
 80114bc:	482a      	ldr	r0, [pc, #168]	@ (8011568 <tcp_free_acked_segments+0xe8>)
 80114be:	f003 f937 	bl	8014730 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80114c8:	8a7b      	ldrh	r3, [r7, #18]
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	891a      	ldrh	r2, [r3, #8]
 80114d8:	4b24      	ldr	r3, [pc, #144]	@ (801156c <tcp_free_acked_segments+0xec>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	4413      	add	r3, r2
 80114de:	b29a      	uxth	r2, r3
 80114e0:	4b22      	ldr	r3, [pc, #136]	@ (801156c <tcp_free_acked_segments+0xec>)
 80114e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80114e4:	6978      	ldr	r0, [r7, #20]
 80114e6:	f7fe f9da 	bl	800f89e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00c      	beq.n	801150e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d109      	bne.n	801150e <tcp_free_acked_segments+0x8e>
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d106      	bne.n	801150e <tcp_free_acked_segments+0x8e>
 8011500:	4b17      	ldr	r3, [pc, #92]	@ (8011560 <tcp_free_acked_segments+0xe0>)
 8011502:	f240 4261 	movw	r2, #1121	@ 0x461
 8011506:	491a      	ldr	r1, [pc, #104]	@ (8011570 <tcp_free_acked_segments+0xf0>)
 8011508:	4817      	ldr	r0, [pc, #92]	@ (8011568 <tcp_free_acked_segments+0xe8>)
 801150a:	f003 f911 	bl	8014730 <iprintf>
  while (seg_list != NULL &&
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d020      	beq.n	8011556 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	4618      	mov	r0, r3
 801151c:	f7f8 feb4 	bl	800a288 <lwip_htonl>
 8011520:	4604      	mov	r4, r0
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	891b      	ldrh	r3, [r3, #8]
 8011526:	461d      	mov	r5, r3
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	899b      	ldrh	r3, [r3, #12]
 801152e:	b29b      	uxth	r3, r3
 8011530:	4618      	mov	r0, r3
 8011532:	f7f8 fe93 	bl	800a25c <lwip_htons>
 8011536:	4603      	mov	r3, r0
 8011538:	b2db      	uxtb	r3, r3
 801153a:	f003 0303 	and.w	r3, r3, #3
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <tcp_free_acked_segments+0xc6>
 8011542:	2301      	movs	r3, #1
 8011544:	e000      	b.n	8011548 <tcp_free_acked_segments+0xc8>
 8011546:	2300      	movs	r3, #0
 8011548:	442b      	add	r3, r5
 801154a:	18e2      	adds	r2, r4, r3
 801154c:	4b09      	ldr	r3, [pc, #36]	@ (8011574 <tcp_free_acked_segments+0xf4>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011552:	2b00      	cmp	r3, #0
 8011554:	dd9c      	ble.n	8011490 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011556:	68bb      	ldr	r3, [r7, #8]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3718      	adds	r7, #24
 801155c:	46bd      	mov	sp, r7
 801155e:	bdb0      	pop	{r4, r5, r7, pc}
 8011560:	08017158 	.word	0x08017158
 8011564:	0801746c 	.word	0x0801746c
 8011568:	080171d0 	.word	0x080171d0
 801156c:	2400f970 	.word	0x2400f970
 8011570:	08017494 	.word	0x08017494
 8011574:	2400f96c 	.word	0x2400f96c

08011578 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011578:	b5b0      	push	{r4, r5, r7, lr}
 801157a:	b094      	sub	sp, #80	@ 0x50
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011580:	2300      	movs	r3, #0
 8011582:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d106      	bne.n	8011598 <tcp_receive+0x20>
 801158a:	4b91      	ldr	r3, [pc, #580]	@ (80117d0 <tcp_receive+0x258>)
 801158c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011590:	4990      	ldr	r1, [pc, #576]	@ (80117d4 <tcp_receive+0x25c>)
 8011592:	4891      	ldr	r0, [pc, #580]	@ (80117d8 <tcp_receive+0x260>)
 8011594:	f003 f8cc 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7d1b      	ldrb	r3, [r3, #20]
 801159c:	2b03      	cmp	r3, #3
 801159e:	d806      	bhi.n	80115ae <tcp_receive+0x36>
 80115a0:	4b8b      	ldr	r3, [pc, #556]	@ (80117d0 <tcp_receive+0x258>)
 80115a2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80115a6:	498d      	ldr	r1, [pc, #564]	@ (80117dc <tcp_receive+0x264>)
 80115a8:	488b      	ldr	r0, [pc, #556]	@ (80117d8 <tcp_receive+0x260>)
 80115aa:	f003 f8c1 	bl	8014730 <iprintf>

  if (flags & TCP_ACK) {
 80115ae:	4b8c      	ldr	r3, [pc, #560]	@ (80117e0 <tcp_receive+0x268>)
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	f003 0310 	and.w	r3, r3, #16
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f000 8264 	beq.w	8011a84 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80115c2:	461a      	mov	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115c8:	4413      	add	r3, r2
 80115ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80115d0:	4b84      	ldr	r3, [pc, #528]	@ (80117e4 <tcp_receive+0x26c>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	db1b      	blt.n	8011612 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80115de:	4b81      	ldr	r3, [pc, #516]	@ (80117e4 <tcp_receive+0x26c>)
 80115e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d106      	bne.n	80115f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80115ea:	4b7f      	ldr	r3, [pc, #508]	@ (80117e8 <tcp_receive+0x270>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	db0e      	blt.n	8011612 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80115f8:	4b7b      	ldr	r3, [pc, #492]	@ (80117e8 <tcp_receive+0x270>)
 80115fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d125      	bne.n	801164c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011600:	4b7a      	ldr	r3, [pc, #488]	@ (80117ec <tcp_receive+0x274>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	89db      	ldrh	r3, [r3, #14]
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801160e:	429a      	cmp	r2, r3
 8011610:	d91c      	bls.n	801164c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011612:	4b76      	ldr	r3, [pc, #472]	@ (80117ec <tcp_receive+0x274>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	89db      	ldrh	r3, [r3, #14]
 8011618:	b29a      	uxth	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801162c:	429a      	cmp	r2, r3
 801162e:	d205      	bcs.n	801163c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801163c:	4b69      	ldr	r3, [pc, #420]	@ (80117e4 <tcp_receive+0x26c>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011644:	4b68      	ldr	r3, [pc, #416]	@ (80117e8 <tcp_receive+0x270>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801164c:	4b66      	ldr	r3, [pc, #408]	@ (80117e8 <tcp_receive+0x270>)
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011654:	1ad3      	subs	r3, r2, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	dc58      	bgt.n	801170c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801165a:	4b65      	ldr	r3, [pc, #404]	@ (80117f0 <tcp_receive+0x278>)
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d14b      	bne.n	80116fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801166c:	4413      	add	r3, r2
 801166e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011670:	429a      	cmp	r2, r3
 8011672:	d142      	bne.n	80116fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801167a:	2b00      	cmp	r3, #0
 801167c:	db3d      	blt.n	80116fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011682:	4b59      	ldr	r3, [pc, #356]	@ (80117e8 <tcp_receive+0x270>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	429a      	cmp	r2, r3
 8011688:	d137      	bne.n	80116fa <tcp_receive+0x182>
              found_dupack = 1;
 801168a:	2301      	movs	r3, #1
 801168c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011694:	2bff      	cmp	r3, #255	@ 0xff
 8011696:	d007      	beq.n	80116a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801169e:	3301      	adds	r3, #1
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80116ae:	2b03      	cmp	r3, #3
 80116b0:	d91b      	bls.n	80116ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116bc:	4413      	add	r3, r2
 80116be:	b29a      	uxth	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d30a      	bcc.n	80116e0 <tcp_receive+0x168>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116d4:	4413      	add	r3, r2
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80116de:	e004      	b.n	80116ea <tcp_receive+0x172>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d902      	bls.n	80116fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f001 fee9 	bl	80134cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80116fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f040 8161 	bne.w	80119c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801170a:	e15b      	b.n	80119c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801170c:	4b36      	ldr	r3, [pc, #216]	@ (80117e8 <tcp_receive+0x270>)
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011714:	1ad3      	subs	r3, r2, r3
 8011716:	3b01      	subs	r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	f2c0 814e 	blt.w	80119ba <tcp_receive+0x442>
 801171e:	4b32      	ldr	r3, [pc, #200]	@ (80117e8 <tcp_receive+0x270>)
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	f300 8146 	bgt.w	80119ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f003 0304 	and.w	r3, r3, #4
 8011736:	2b00      	cmp	r3, #0
 8011738:	d010      	beq.n	801175c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	8b5b      	ldrh	r3, [r3, #26]
 801173e:	f023 0304 	bic.w	r3, r3, #4
 8011742:	b29a      	uxth	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2200      	movs	r2, #0
 8011758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801176a:	10db      	asrs	r3, r3, #3
 801176c:	b21b      	sxth	r3, r3
 801176e:	b29a      	uxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011776:	b29b      	uxth	r3, r3
 8011778:	4413      	add	r3, r2
 801177a:	b29b      	uxth	r3, r3
 801177c:	b21a      	sxth	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011784:	4b18      	ldr	r3, [pc, #96]	@ (80117e8 <tcp_receive+0x270>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	b29a      	uxth	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801178e:	b29b      	uxth	r3, r3
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801179c:	4b12      	ldr	r3, [pc, #72]	@ (80117e8 <tcp_receive+0x270>)
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	7d1b      	ldrb	r3, [r3, #20]
 80117a8:	2b03      	cmp	r3, #3
 80117aa:	f240 8097 	bls.w	80118dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d245      	bcs.n	801184a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	8b5b      	ldrh	r3, [r3, #26]
 80117c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d014      	beq.n	80117f4 <tcp_receive+0x27c>
 80117ca:	2301      	movs	r3, #1
 80117cc:	e013      	b.n	80117f6 <tcp_receive+0x27e>
 80117ce:	bf00      	nop
 80117d0:	08017158 	.word	0x08017158
 80117d4:	080174b4 	.word	0x080174b4
 80117d8:	080171d0 	.word	0x080171d0
 80117dc:	080174d0 	.word	0x080174d0
 80117e0:	2400f974 	.word	0x2400f974
 80117e4:	2400f968 	.word	0x2400f968
 80117e8:	2400f96c 	.word	0x2400f96c
 80117ec:	2400f958 	.word	0x2400f958
 80117f0:	2400f972 	.word	0x2400f972
 80117f4:	2302      	movs	r3, #2
 80117f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80117fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80117fe:	b29a      	uxth	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011804:	fb12 f303 	smulbb	r3, r2, r3
 8011808:	b29b      	uxth	r3, r3
 801180a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801180c:	4293      	cmp	r3, r2
 801180e:	bf28      	it	cs
 8011810:	4613      	movcs	r3, r2
 8011812:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801181a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801181c:	4413      	add	r3, r2
 801181e:	b29a      	uxth	r2, r3
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011826:	429a      	cmp	r2, r3
 8011828:	d309      	bcc.n	801183e <tcp_receive+0x2c6>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011830:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011832:	4413      	add	r3, r2
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801183c:	e04e      	b.n	80118dc <tcp_receive+0x364>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011844:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011848:	e048      	b.n	80118dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011850:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011852:	4413      	add	r3, r2
 8011854:	b29a      	uxth	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801185c:	429a      	cmp	r2, r3
 801185e:	d309      	bcc.n	8011874 <tcp_receive+0x2fc>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011866:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011868:	4413      	add	r3, r2
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011872:	e004      	b.n	801187e <tcp_receive+0x306>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801187a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801188a:	429a      	cmp	r2, r3
 801188c:	d326      	bcc.n	80118dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80118ae:	4413      	add	r3, r2
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d30a      	bcc.n	80118d2 <tcp_receive+0x35a>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80118c6:	4413      	add	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80118d0:	e004      	b.n	80118dc <tcp_receive+0x364>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80118d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118e4:	4a98      	ldr	r2, [pc, #608]	@ (8011b48 <tcp_receive+0x5d0>)
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff fdca 	bl	8011480 <tcp_free_acked_segments>
 80118ec:	4602      	mov	r2, r0
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118fa:	4a94      	ldr	r2, [pc, #592]	@ (8011b4c <tcp_receive+0x5d4>)
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff fdbf 	bl	8011480 <tcp_free_acked_segments>
 8011902:	4602      	mov	r2, r0
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801190c:	2b00      	cmp	r3, #0
 801190e:	d104      	bne.n	801191a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011916:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011918:	e002      	b.n	8011920 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2200      	movs	r2, #0
 801191e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801192a:	2b00      	cmp	r3, #0
 801192c:	d103      	bne.n	8011936 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2200      	movs	r2, #0
 8011932:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801193c:	4b84      	ldr	r3, [pc, #528]	@ (8011b50 <tcp_receive+0x5d8>)
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	4413      	add	r3, r2
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	8b5b      	ldrh	r3, [r3, #26]
 801194e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011952:	2b00      	cmp	r3, #0
 8011954:	d035      	beq.n	80119c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801195a:	2b00      	cmp	r3, #0
 801195c:	d118      	bne.n	8011990 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00c      	beq.n	8011980 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f8 fc88 	bl	800a288 <lwip_htonl>
 8011978:	4603      	mov	r3, r0
 801197a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801197c:	2b00      	cmp	r3, #0
 801197e:	dc20      	bgt.n	80119c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	8b5b      	ldrh	r3, [r3, #26]
 8011984:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011988:	b29a      	uxth	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801198e:	e018      	b.n	80119c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	4618      	mov	r0, r3
 801199e:	f7f8 fc73 	bl	800a288 <lwip_htonl>
 80119a2:	4603      	mov	r3, r0
 80119a4:	1ae3      	subs	r3, r4, r3
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	dc0b      	bgt.n	80119c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	8b5b      	ldrh	r3, [r3, #26]
 80119ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119b8:	e003      	b.n	80119c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f001 ff72 	bl	80138a4 <tcp_send_empty_ack>
 80119c0:	e000      	b.n	80119c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d05b      	beq.n	8011a84 <tcp_receive+0x50c>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119d0:	4b60      	ldr	r3, [pc, #384]	@ (8011b54 <tcp_receive+0x5dc>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da54      	bge.n	8011a84 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80119da:	4b5f      	ldr	r3, [pc, #380]	@ (8011b58 <tcp_receive+0x5e0>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	b29a      	uxth	r2, r3
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80119ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80119f8:	10db      	asrs	r3, r3, #3
 80119fa:	b21b      	sxth	r3, r3
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011a12:	4413      	add	r3, r2
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	b21a      	sxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011a1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	da05      	bge.n	8011a30 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011a28:	425b      	negs	r3, r3
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a30:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011a3a:	109b      	asrs	r3, r3, #2
 8011a3c:	b21b      	sxth	r3, r3
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011a4e:	b29a      	uxth	r2, r3
 8011a50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011a54:	4413      	add	r3, r2
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	b21a      	sxth	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011a64:	10db      	asrs	r3, r3, #3
 8011a66:	b21b      	sxth	r3, r3
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	4413      	add	r3, r2
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	b21a      	sxth	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a84:	4b35      	ldr	r3, [pc, #212]	@ (8011b5c <tcp_receive+0x5e4>)
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 84df 	beq.w	801244c <tcp_receive+0xed4>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	7d1b      	ldrb	r3, [r3, #20]
 8011a92:	2b06      	cmp	r3, #6
 8011a94:	f200 84da 	bhi.w	801244c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a9c:	4b30      	ldr	r3, [pc, #192]	@ (8011b60 <tcp_receive+0x5e8>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	1ad3      	subs	r3, r2, r3
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f2c0 808f 	blt.w	8011bc8 <tcp_receive+0x650>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011aae:	4b2b      	ldr	r3, [pc, #172]	@ (8011b5c <tcp_receive+0x5e4>)
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8011b60 <tcp_receive+0x5e8>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	440b      	add	r3, r1
 8011aba:	1ad3      	subs	r3, r2, r3
 8011abc:	3301      	adds	r3, #1
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f300 8082 	bgt.w	8011bc8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011ac4:	4b27      	ldr	r3, [pc, #156]	@ (8011b64 <tcp_receive+0x5ec>)
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ace:	4b24      	ldr	r3, [pc, #144]	@ (8011b60 <tcp_receive+0x5e8>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ad6:	4b23      	ldr	r3, [pc, #140]	@ (8011b64 <tcp_receive+0x5ec>)
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d106      	bne.n	8011aec <tcp_receive+0x574>
 8011ade:	4b22      	ldr	r3, [pc, #136]	@ (8011b68 <tcp_receive+0x5f0>)
 8011ae0:	f240 5294 	movw	r2, #1428	@ 0x594
 8011ae4:	4921      	ldr	r1, [pc, #132]	@ (8011b6c <tcp_receive+0x5f4>)
 8011ae6:	4822      	ldr	r0, [pc, #136]	@ (8011b70 <tcp_receive+0x5f8>)
 8011ae8:	f002 fe22 	bl	8014730 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d906      	bls.n	8011b04 <tcp_receive+0x58c>
 8011af6:	4b1c      	ldr	r3, [pc, #112]	@ (8011b68 <tcp_receive+0x5f0>)
 8011af8:	f240 5295 	movw	r2, #1429	@ 0x595
 8011afc:	491d      	ldr	r1, [pc, #116]	@ (8011b74 <tcp_receive+0x5fc>)
 8011afe:	481c      	ldr	r0, [pc, #112]	@ (8011b70 <tcp_receive+0x5f8>)
 8011b00:	f002 fe16 	bl	8014730 <iprintf>
      off = (u16_t)off32;
 8011b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011b0a:	4b16      	ldr	r3, [pc, #88]	@ (8011b64 <tcp_receive+0x5ec>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	891b      	ldrh	r3, [r3, #8]
 8011b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d906      	bls.n	8011b26 <tcp_receive+0x5ae>
 8011b18:	4b13      	ldr	r3, [pc, #76]	@ (8011b68 <tcp_receive+0x5f0>)
 8011b1a:	f240 5297 	movw	r2, #1431	@ 0x597
 8011b1e:	4916      	ldr	r1, [pc, #88]	@ (8011b78 <tcp_receive+0x600>)
 8011b20:	4813      	ldr	r0, [pc, #76]	@ (8011b70 <tcp_receive+0x5f8>)
 8011b22:	f002 fe05 	bl	8014730 <iprintf>
      inseg.len -= off;
 8011b26:	4b0f      	ldr	r3, [pc, #60]	@ (8011b64 <tcp_receive+0x5ec>)
 8011b28:	891a      	ldrh	r2, [r3, #8]
 8011b2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	4b0c      	ldr	r3, [pc, #48]	@ (8011b64 <tcp_receive+0x5ec>)
 8011b34:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b36:	4b0b      	ldr	r3, [pc, #44]	@ (8011b64 <tcp_receive+0x5ec>)
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	891a      	ldrh	r2, [r3, #8]
 8011b3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011b44:	e02a      	b.n	8011b9c <tcp_receive+0x624>
 8011b46:	bf00      	nop
 8011b48:	080174ec 	.word	0x080174ec
 8011b4c:	080174f4 	.word	0x080174f4
 8011b50:	2400f970 	.word	0x2400f970
 8011b54:	2400f96c 	.word	0x2400f96c
 8011b58:	2400f930 	.word	0x2400f930
 8011b5c:	2400f972 	.word	0x2400f972
 8011b60:	2400f968 	.word	0x2400f968
 8011b64:	2400f948 	.word	0x2400f948
 8011b68:	08017158 	.word	0x08017158
 8011b6c:	080174fc 	.word	0x080174fc
 8011b70:	080171d0 	.word	0x080171d0
 8011b74:	0801750c 	.word	0x0801750c
 8011b78:	0801751c 	.word	0x0801751c
        off -= p->len;
 8011b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b7e:	895b      	ldrh	r3, [r3, #10]
 8011b80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011b8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b92:	2200      	movs	r2, #0
 8011b94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b9e:	895b      	ldrh	r3, [r3, #10]
 8011ba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d8e9      	bhi.n	8011b7c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011bac:	4619      	mov	r1, r3
 8011bae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011bb0:	f7fc fa54 	bl	800e05c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bb8:	4a90      	ldr	r2, [pc, #576]	@ (8011dfc <tcp_receive+0x884>)
 8011bba:	6013      	str	r3, [r2, #0]
 8011bbc:	4b90      	ldr	r3, [pc, #576]	@ (8011e00 <tcp_receive+0x888>)
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8011dfc <tcp_receive+0x884>)
 8011bc2:	6812      	ldr	r2, [r2, #0]
 8011bc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bc6:	e00d      	b.n	8011be4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8011dfc <tcp_receive+0x884>)
 8011bca:	681a      	ldr	r2, [r3, #0]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	da06      	bge.n	8011be4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	8b5b      	ldrh	r3, [r3, #26]
 8011bda:	f043 0302 	orr.w	r3, r3, #2
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011be4:	4b85      	ldr	r3, [pc, #532]	@ (8011dfc <tcp_receive+0x884>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f2c0 8427 	blt.w	8012442 <tcp_receive+0xeca>
 8011bf4:	4b81      	ldr	r3, [pc, #516]	@ (8011dfc <tcp_receive+0x884>)
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bfc:	6879      	ldr	r1, [r7, #4]
 8011bfe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011c00:	440b      	add	r3, r1
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	3301      	adds	r3, #1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f300 841b 	bgt.w	8012442 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c10:	4b7a      	ldr	r3, [pc, #488]	@ (8011dfc <tcp_receive+0x884>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	f040 8298 	bne.w	801214a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c1a:	4b79      	ldr	r3, [pc, #484]	@ (8011e00 <tcp_receive+0x888>)
 8011c1c:	891c      	ldrh	r4, [r3, #8]
 8011c1e:	4b78      	ldr	r3, [pc, #480]	@ (8011e00 <tcp_receive+0x888>)
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	899b      	ldrh	r3, [r3, #12]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7f8 fb18 	bl	800a25c <lwip_htons>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	f003 0303 	and.w	r3, r3, #3
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d001      	beq.n	8011c3c <tcp_receive+0x6c4>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e000      	b.n	8011c3e <tcp_receive+0x6c6>
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	4423      	add	r3, r4
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	4b70      	ldr	r3, [pc, #448]	@ (8011e04 <tcp_receive+0x88c>)
 8011c44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8011e04 <tcp_receive+0x88c>)
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d274      	bcs.n	8011d3c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c52:	4b6b      	ldr	r3, [pc, #428]	@ (8011e00 <tcp_receive+0x888>)
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	899b      	ldrh	r3, [r3, #12]
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7f8 fafe 	bl	800a25c <lwip_htons>
 8011c60:	4603      	mov	r3, r0
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	f003 0301 	and.w	r3, r3, #1
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d01e      	beq.n	8011caa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c6c:	4b64      	ldr	r3, [pc, #400]	@ (8011e00 <tcp_receive+0x888>)
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	899b      	ldrh	r3, [r3, #12]
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	b21b      	sxth	r3, r3
 8011c76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011c7a:	b21c      	sxth	r4, r3
 8011c7c:	4b60      	ldr	r3, [pc, #384]	@ (8011e00 <tcp_receive+0x888>)
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	899b      	ldrh	r3, [r3, #12]
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7f8 fae9 	bl	800a25c <lwip_htons>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f8 fae1 	bl	800a25c <lwip_htons>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	b21b      	sxth	r3, r3
 8011c9e:	4323      	orrs	r3, r4
 8011ca0:	b21a      	sxth	r2, r3
 8011ca2:	4b57      	ldr	r3, [pc, #348]	@ (8011e00 <tcp_receive+0x888>)
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	b292      	uxth	r2, r2
 8011ca8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011cae:	4b54      	ldr	r3, [pc, #336]	@ (8011e00 <tcp_receive+0x888>)
 8011cb0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011cb2:	4b53      	ldr	r3, [pc, #332]	@ (8011e00 <tcp_receive+0x888>)
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	899b      	ldrh	r3, [r3, #12]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7f8 face 	bl	800a25c <lwip_htons>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	f003 0302 	and.w	r3, r3, #2
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d005      	beq.n	8011cd8 <tcp_receive+0x760>
            inseg.len -= 1;
 8011ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8011e00 <tcp_receive+0x888>)
 8011cce:	891b      	ldrh	r3, [r3, #8]
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8011e00 <tcp_receive+0x888>)
 8011cd6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011cd8:	4b49      	ldr	r3, [pc, #292]	@ (8011e00 <tcp_receive+0x888>)
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	4a48      	ldr	r2, [pc, #288]	@ (8011e00 <tcp_receive+0x888>)
 8011cde:	8912      	ldrh	r2, [r2, #8]
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fc f8bc 	bl	800de60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011ce8:	4b45      	ldr	r3, [pc, #276]	@ (8011e00 <tcp_receive+0x888>)
 8011cea:	891c      	ldrh	r4, [r3, #8]
 8011cec:	4b44      	ldr	r3, [pc, #272]	@ (8011e00 <tcp_receive+0x888>)
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	899b      	ldrh	r3, [r3, #12]
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7f8 fab1 	bl	800a25c <lwip_htons>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	f003 0303 	and.w	r3, r3, #3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d001      	beq.n	8011d0a <tcp_receive+0x792>
 8011d06:	2301      	movs	r3, #1
 8011d08:	e000      	b.n	8011d0c <tcp_receive+0x794>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	4423      	add	r3, r4
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	4b3c      	ldr	r3, [pc, #240]	@ (8011e04 <tcp_receive+0x88c>)
 8011d12:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d14:	4b3b      	ldr	r3, [pc, #236]	@ (8011e04 <tcp_receive+0x88c>)
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	461a      	mov	r2, r3
 8011d1a:	4b38      	ldr	r3, [pc, #224]	@ (8011dfc <tcp_receive+0x884>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	441a      	add	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d28:	440b      	add	r3, r1
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d006      	beq.n	8011d3c <tcp_receive+0x7c4>
 8011d2e:	4b36      	ldr	r3, [pc, #216]	@ (8011e08 <tcp_receive+0x890>)
 8011d30:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011d34:	4935      	ldr	r1, [pc, #212]	@ (8011e0c <tcp_receive+0x894>)
 8011d36:	4836      	ldr	r0, [pc, #216]	@ (8011e10 <tcp_receive+0x898>)
 8011d38:	f002 fcfa 	bl	8014730 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 80e6 	beq.w	8011f12 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d46:	4b2e      	ldr	r3, [pc, #184]	@ (8011e00 <tcp_receive+0x888>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7f8 fa84 	bl	800a25c <lwip_htons>
 8011d54:	4603      	mov	r3, r0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0301 	and.w	r3, r3, #1
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d010      	beq.n	8011d82 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d60:	e00a      	b.n	8011d78 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d66:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f7fd fd93 	bl	800f89e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1f0      	bne.n	8011d62 <tcp_receive+0x7ea>
 8011d80:	e0c7      	b.n	8011f12 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d88:	e051      	b.n	8011e2e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	899b      	ldrh	r3, [r3, #12]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7f8 fa62 	bl	800a25c <lwip_htons>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	f003 0301 	and.w	r3, r3, #1
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d03c      	beq.n	8011e1e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011da4:	4b16      	ldr	r3, [pc, #88]	@ (8011e00 <tcp_receive+0x888>)
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f8 fa55 	bl	800a25c <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d12f      	bne.n	8011e1e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011dbe:	4b10      	ldr	r3, [pc, #64]	@ (8011e00 <tcp_receive+0x888>)
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	899b      	ldrh	r3, [r3, #12]
 8011dc4:	b29c      	uxth	r4, r3
 8011dc6:	2001      	movs	r0, #1
 8011dc8:	f7f8 fa48 	bl	800a25c <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	461a      	mov	r2, r3
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e00 <tcp_receive+0x888>)
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	4322      	orrs	r2, r4
 8011dd6:	b292      	uxth	r2, r2
 8011dd8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011dda:	4b09      	ldr	r3, [pc, #36]	@ (8011e00 <tcp_receive+0x888>)
 8011ddc:	891c      	ldrh	r4, [r3, #8]
 8011dde:	4b08      	ldr	r3, [pc, #32]	@ (8011e00 <tcp_receive+0x888>)
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	899b      	ldrh	r3, [r3, #12]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7f8 fa38 	bl	800a25c <lwip_htons>
 8011dec:	4603      	mov	r3, r0
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	f003 0303 	and.w	r3, r3, #3
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00d      	beq.n	8011e14 <tcp_receive+0x89c>
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e00c      	b.n	8011e16 <tcp_receive+0x89e>
 8011dfc:	2400f968 	.word	0x2400f968
 8011e00:	2400f948 	.word	0x2400f948
 8011e04:	2400f972 	.word	0x2400f972
 8011e08:	08017158 	.word	0x08017158
 8011e0c:	0801752c 	.word	0x0801752c
 8011e10:	080171d0 	.word	0x080171d0
 8011e14:	2300      	movs	r3, #0
 8011e16:	4423      	add	r3, r4
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	4b98      	ldr	r3, [pc, #608]	@ (801207c <tcp_receive+0xb04>)
 8011e1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e20:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011e28:	6938      	ldr	r0, [r7, #16]
 8011e2a:	f7fd fd38 	bl	800f89e <tcp_seg_free>
            while (next &&
 8011e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d00e      	beq.n	8011e52 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e34:	4b91      	ldr	r3, [pc, #580]	@ (801207c <tcp_receive+0xb04>)
 8011e36:	881b      	ldrh	r3, [r3, #0]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	4b91      	ldr	r3, [pc, #580]	@ (8012080 <tcp_receive+0xb08>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	441a      	add	r2, r3
 8011e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011e48:	8909      	ldrh	r1, [r1, #8]
 8011e4a:	440b      	add	r3, r1
 8011e4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	da9b      	bge.n	8011d8a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d059      	beq.n	8011f0c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e58:	4b88      	ldr	r3, [pc, #544]	@ (801207c <tcp_receive+0xb04>)
 8011e5a:	881b      	ldrh	r3, [r3, #0]
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	4b88      	ldr	r3, [pc, #544]	@ (8012080 <tcp_receive+0xb08>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	441a      	add	r2, r3
 8011e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dd4d      	ble.n	8011f0c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	4b81      	ldr	r3, [pc, #516]	@ (8012080 <tcp_receive+0xb08>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	1ad3      	subs	r3, r2, r3
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	4b80      	ldr	r3, [pc, #512]	@ (8012084 <tcp_receive+0xb0c>)
 8011e84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e86:	4b7f      	ldr	r3, [pc, #508]	@ (8012084 <tcp_receive+0xb0c>)
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	899b      	ldrh	r3, [r3, #12]
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7f8 f9e4 	bl	800a25c <lwip_htons>
 8011e94:	4603      	mov	r3, r0
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f003 0302 	and.w	r3, r3, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d005      	beq.n	8011eac <tcp_receive+0x934>
                inseg.len -= 1;
 8011ea0:	4b78      	ldr	r3, [pc, #480]	@ (8012084 <tcp_receive+0xb0c>)
 8011ea2:	891b      	ldrh	r3, [r3, #8]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	4b76      	ldr	r3, [pc, #472]	@ (8012084 <tcp_receive+0xb0c>)
 8011eaa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011eac:	4b75      	ldr	r3, [pc, #468]	@ (8012084 <tcp_receive+0xb0c>)
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	4a74      	ldr	r2, [pc, #464]	@ (8012084 <tcp_receive+0xb0c>)
 8011eb2:	8912      	ldrh	r2, [r2, #8]
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fb ffd2 	bl	800de60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011ebc:	4b71      	ldr	r3, [pc, #452]	@ (8012084 <tcp_receive+0xb0c>)
 8011ebe:	891c      	ldrh	r4, [r3, #8]
 8011ec0:	4b70      	ldr	r3, [pc, #448]	@ (8012084 <tcp_receive+0xb0c>)
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	899b      	ldrh	r3, [r3, #12]
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7f8 f9c7 	bl	800a25c <lwip_htons>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	f003 0303 	and.w	r3, r3, #3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d001      	beq.n	8011ede <tcp_receive+0x966>
 8011eda:	2301      	movs	r3, #1
 8011edc:	e000      	b.n	8011ee0 <tcp_receive+0x968>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	4423      	add	r3, r4
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	4b65      	ldr	r3, [pc, #404]	@ (801207c <tcp_receive+0xb04>)
 8011ee6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011ee8:	4b64      	ldr	r3, [pc, #400]	@ (801207c <tcp_receive+0xb04>)
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	461a      	mov	r2, r3
 8011eee:	4b64      	ldr	r3, [pc, #400]	@ (8012080 <tcp_receive+0xb08>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	441a      	add	r2, r3
 8011ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d006      	beq.n	8011f0c <tcp_receive+0x994>
 8011efe:	4b62      	ldr	r3, [pc, #392]	@ (8012088 <tcp_receive+0xb10>)
 8011f00:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011f04:	4961      	ldr	r1, [pc, #388]	@ (801208c <tcp_receive+0xb14>)
 8011f06:	4862      	ldr	r0, [pc, #392]	@ (8012090 <tcp_receive+0xb18>)
 8011f08:	f002 fc12 	bl	8014730 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011f10:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f12:	4b5a      	ldr	r3, [pc, #360]	@ (801207c <tcp_receive+0xb04>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	461a      	mov	r2, r3
 8011f18:	4b59      	ldr	r3, [pc, #356]	@ (8012080 <tcp_receive+0xb08>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	441a      	add	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011f26:	4b55      	ldr	r3, [pc, #340]	@ (801207c <tcp_receive+0xb04>)
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d206      	bcs.n	8011f3c <tcp_receive+0x9c4>
 8011f2e:	4b56      	ldr	r3, [pc, #344]	@ (8012088 <tcp_receive+0xb10>)
 8011f30:	f240 6207 	movw	r2, #1543	@ 0x607
 8011f34:	4957      	ldr	r1, [pc, #348]	@ (8012094 <tcp_receive+0xb1c>)
 8011f36:	4856      	ldr	r0, [pc, #344]	@ (8012090 <tcp_receive+0xb18>)
 8011f38:	f002 fbfa 	bl	8014730 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011f40:	4b4e      	ldr	r3, [pc, #312]	@ (801207c <tcp_receive+0xb04>)
 8011f42:	881b      	ldrh	r3, [r3, #0]
 8011f44:	1ad3      	subs	r3, r2, r3
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f7fc ffc1 	bl	800eed4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f52:	4b4c      	ldr	r3, [pc, #304]	@ (8012084 <tcp_receive+0xb0c>)
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	891b      	ldrh	r3, [r3, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d006      	beq.n	8011f6a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f5c:	4b49      	ldr	r3, [pc, #292]	@ (8012084 <tcp_receive+0xb0c>)
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	4a4d      	ldr	r2, [pc, #308]	@ (8012098 <tcp_receive+0xb20>)
 8011f62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f64:	4b47      	ldr	r3, [pc, #284]	@ (8012084 <tcp_receive+0xb0c>)
 8011f66:	2200      	movs	r2, #0
 8011f68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f6a:	4b46      	ldr	r3, [pc, #280]	@ (8012084 <tcp_receive+0xb0c>)
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	899b      	ldrh	r3, [r3, #12]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7f8 f972 	bl	800a25c <lwip_htons>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f000 80b8 	beq.w	80120f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f86:	4b45      	ldr	r3, [pc, #276]	@ (801209c <tcp_receive+0xb24>)
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f043 0320 	orr.w	r3, r3, #32
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	4b42      	ldr	r3, [pc, #264]	@ (801209c <tcp_receive+0xb24>)
 8011f92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f94:	e0af      	b.n	80120f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	4a36      	ldr	r2, [pc, #216]	@ (8012080 <tcp_receive+0xb08>)
 8011fa6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	891b      	ldrh	r3, [r3, #8]
 8011fac:	461c      	mov	r4, r3
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	899b      	ldrh	r3, [r3, #12]
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f8 f950 	bl	800a25c <lwip_htons>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	f003 0303 	and.w	r3, r3, #3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d001      	beq.n	8011fcc <tcp_receive+0xa54>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e000      	b.n	8011fce <tcp_receive+0xa56>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	191a      	adds	r2, r3, r4
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd4:	441a      	add	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fde:	461c      	mov	r4, r3
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	891b      	ldrh	r3, [r3, #8]
 8011fe4:	461d      	mov	r5, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	899b      	ldrh	r3, [r3, #12]
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f8 f934 	bl	800a25c <lwip_htons>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	f003 0303 	and.w	r3, r3, #3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d001      	beq.n	8012004 <tcp_receive+0xa8c>
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <tcp_receive+0xa8e>
 8012004:	2300      	movs	r3, #0
 8012006:	442b      	add	r3, r5
 8012008:	429c      	cmp	r4, r3
 801200a:	d206      	bcs.n	801201a <tcp_receive+0xaa2>
 801200c:	4b1e      	ldr	r3, [pc, #120]	@ (8012088 <tcp_receive+0xb10>)
 801200e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012012:	4923      	ldr	r1, [pc, #140]	@ (80120a0 <tcp_receive+0xb28>)
 8012014:	481e      	ldr	r0, [pc, #120]	@ (8012090 <tcp_receive+0xb18>)
 8012016:	f002 fb8b 	bl	8014730 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	891b      	ldrh	r3, [r3, #8]
 801201e:	461c      	mov	r4, r3
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	899b      	ldrh	r3, [r3, #12]
 8012026:	b29b      	uxth	r3, r3
 8012028:	4618      	mov	r0, r3
 801202a:	f7f8 f917 	bl	800a25c <lwip_htons>
 801202e:	4603      	mov	r3, r0
 8012030:	b2db      	uxtb	r3, r3
 8012032:	f003 0303 	and.w	r3, r3, #3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <tcp_receive+0xac6>
 801203a:	2301      	movs	r3, #1
 801203c:	e000      	b.n	8012040 <tcp_receive+0xac8>
 801203e:	2300      	movs	r3, #0
 8012040:	1919      	adds	r1, r3, r4
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012046:	b28b      	uxth	r3, r1
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	b29a      	uxth	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7fc ff3f 	bl	800eed4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	891b      	ldrh	r3, [r3, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d028      	beq.n	80120b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012060:	4b0d      	ldr	r3, [pc, #52]	@ (8012098 <tcp_receive+0xb20>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d01d      	beq.n	80120a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012068:	4b0b      	ldr	r3, [pc, #44]	@ (8012098 <tcp_receive+0xb20>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	4619      	mov	r1, r3
 8012072:	4610      	mov	r0, r2
 8012074:	f7fc f946 	bl	800e304 <pbuf_cat>
 8012078:	e018      	b.n	80120ac <tcp_receive+0xb34>
 801207a:	bf00      	nop
 801207c:	2400f972 	.word	0x2400f972
 8012080:	2400f968 	.word	0x2400f968
 8012084:	2400f948 	.word	0x2400f948
 8012088:	08017158 	.word	0x08017158
 801208c:	08017564 	.word	0x08017564
 8012090:	080171d0 	.word	0x080171d0
 8012094:	080175a0 	.word	0x080175a0
 8012098:	2400f978 	.word	0x2400f978
 801209c:	2400f975 	.word	0x2400f975
 80120a0:	080175c0 	.word	0x080175c0
            } else {
              recv_data = cseg->p;
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	4a70      	ldr	r2, [pc, #448]	@ (801226c <tcp_receive+0xcf4>)
 80120aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	2200      	movs	r2, #0
 80120b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	899b      	ldrh	r3, [r3, #12]
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7f8 f8ce 	bl	800a25c <lwip_htons>
 80120c0:	4603      	mov	r3, r0
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	f003 0301 	and.w	r3, r3, #1
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d00d      	beq.n	80120e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80120cc:	4b68      	ldr	r3, [pc, #416]	@ (8012270 <tcp_receive+0xcf8>)
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	f043 0320 	orr.w	r3, r3, #32
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	4b66      	ldr	r3, [pc, #408]	@ (8012270 <tcp_receive+0xcf8>)
 80120d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	7d1b      	ldrb	r3, [r3, #20]
 80120de:	2b04      	cmp	r3, #4
 80120e0:	d102      	bne.n	80120e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2207      	movs	r2, #7
 80120e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80120f0:	68b8      	ldr	r0, [r7, #8]
 80120f2:	f7fd fbd4 	bl	800f89e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d008      	beq.n	8012110 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	685a      	ldr	r2, [r3, #4]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801210a:	429a      	cmp	r2, r3
 801210c:	f43f af43 	beq.w	8011f96 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	8b5b      	ldrh	r3, [r3, #26]
 8012114:	f003 0301 	and.w	r3, r3, #1
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00e      	beq.n	801213a <tcp_receive+0xbc2>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	8b5b      	ldrh	r3, [r3, #26]
 8012120:	f023 0301 	bic.w	r3, r3, #1
 8012124:	b29a      	uxth	r2, r3
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	835a      	strh	r2, [r3, #26]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	8b5b      	ldrh	r3, [r3, #26]
 801212e:	f043 0302 	orr.w	r3, r3, #2
 8012132:	b29a      	uxth	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012138:	e187      	b.n	801244a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	8b5b      	ldrh	r3, [r3, #26]
 801213e:	f043 0301 	orr.w	r3, r3, #1
 8012142:	b29a      	uxth	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012148:	e17f      	b.n	801244a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801214e:	2b00      	cmp	r3, #0
 8012150:	d106      	bne.n	8012160 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012152:	4848      	ldr	r0, [pc, #288]	@ (8012274 <tcp_receive+0xcfc>)
 8012154:	f7fd fbbc 	bl	800f8d0 <tcp_seg_copy>
 8012158:	4602      	mov	r2, r0
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	675a      	str	r2, [r3, #116]	@ 0x74
 801215e:	e16c      	b.n	801243a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012160:	2300      	movs	r3, #0
 8012162:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012168:	63bb      	str	r3, [r7, #56]	@ 0x38
 801216a:	e156      	b.n	801241a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801216c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	685a      	ldr	r2, [r3, #4]
 8012172:	4b41      	ldr	r3, [pc, #260]	@ (8012278 <tcp_receive+0xd00>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	429a      	cmp	r2, r3
 8012178:	d11d      	bne.n	80121b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801217a:	4b3e      	ldr	r3, [pc, #248]	@ (8012274 <tcp_receive+0xcfc>)
 801217c:	891a      	ldrh	r2, [r3, #8]
 801217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012180:	891b      	ldrh	r3, [r3, #8]
 8012182:	429a      	cmp	r2, r3
 8012184:	f240 814e 	bls.w	8012424 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012188:	483a      	ldr	r0, [pc, #232]	@ (8012274 <tcp_receive+0xcfc>)
 801218a:	f7fd fba1 	bl	800f8d0 <tcp_seg_copy>
 801218e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 8148 	beq.w	8012428 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801219a:	2b00      	cmp	r3, #0
 801219c:	d003      	beq.n	80121a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121a0:	697a      	ldr	r2, [r7, #20]
 80121a2:	601a      	str	r2, [r3, #0]
 80121a4:	e002      	b.n	80121ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80121ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80121ae:	6978      	ldr	r0, [r7, #20]
 80121b0:	f7ff f8de 	bl	8011370 <tcp_oos_insert_segment>
                }
                break;
 80121b4:	e138      	b.n	8012428 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d117      	bne.n	80121ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121bc:	4b2e      	ldr	r3, [pc, #184]	@ (8012278 <tcp_receive+0xd00>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	1ad3      	subs	r3, r2, r3
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	da57      	bge.n	801227c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121cc:	4829      	ldr	r0, [pc, #164]	@ (8012274 <tcp_receive+0xcfc>)
 80121ce:	f7fd fb7f 	bl	800f8d0 <tcp_seg_copy>
 80121d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f000 8128 	beq.w	801242c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	69ba      	ldr	r2, [r7, #24]
 80121e0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80121e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80121e4:	69b8      	ldr	r0, [r7, #24]
 80121e6:	f7ff f8c3 	bl	8011370 <tcp_oos_insert_segment>
                  }
                  break;
 80121ea:	e11f      	b.n	801242c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80121ec:	4b22      	ldr	r3, [pc, #136]	@ (8012278 <tcp_receive+0xd00>)
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	1ad3      	subs	r3, r2, r3
 80121f8:	3b01      	subs	r3, #1
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	db3e      	blt.n	801227c <tcp_receive+0xd04>
 80121fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012278 <tcp_receive+0xd00>)
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	3301      	adds	r3, #1
 801220c:	2b00      	cmp	r3, #0
 801220e:	dc35      	bgt.n	801227c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012210:	4818      	ldr	r0, [pc, #96]	@ (8012274 <tcp_receive+0xcfc>)
 8012212:	f7fd fb5d 	bl	800f8d0 <tcp_seg_copy>
 8012216:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f000 8108 	beq.w	8012430 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012228:	8912      	ldrh	r2, [r2, #8]
 801222a:	441a      	add	r2, r3
 801222c:	4b12      	ldr	r3, [pc, #72]	@ (8012278 <tcp_receive+0xd00>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	2b00      	cmp	r3, #0
 8012234:	dd12      	ble.n	801225c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012236:	4b10      	ldr	r3, [pc, #64]	@ (8012278 <tcp_receive+0xd00>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	b29a      	uxth	r2, r3
 801223c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	b29b      	uxth	r3, r3
 8012244:	1ad3      	subs	r3, r2, r3
 8012246:	b29a      	uxth	r2, r3
 8012248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801224a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801224c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801224e:	685a      	ldr	r2, [r3, #4]
 8012250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012252:	891b      	ldrh	r3, [r3, #8]
 8012254:	4619      	mov	r1, r3
 8012256:	4610      	mov	r0, r2
 8012258:	f7fb fe02 	bl	800de60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801225e:	69fa      	ldr	r2, [r7, #28]
 8012260:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012262:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012264:	69f8      	ldr	r0, [r7, #28]
 8012266:	f7ff f883 	bl	8011370 <tcp_oos_insert_segment>
                  }
                  break;
 801226a:	e0e1      	b.n	8012430 <tcp_receive+0xeb8>
 801226c:	2400f978 	.word	0x2400f978
 8012270:	2400f975 	.word	0x2400f975
 8012274:	2400f948 	.word	0x2400f948
 8012278:	2400f968 	.word	0x2400f968
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801227c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801227e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	f040 80c5 	bne.w	8012414 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801228a:	4b7f      	ldr	r3, [pc, #508]	@ (8012488 <tcp_receive+0xf10>)
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012296:	2b00      	cmp	r3, #0
 8012298:	f340 80bc 	ble.w	8012414 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801229c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	899b      	ldrh	r3, [r3, #12]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f7 ffd9 	bl	800a25c <lwip_htons>
 80122aa:	4603      	mov	r3, r0
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	f003 0301 	and.w	r3, r3, #1
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f040 80be 	bne.w	8012434 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122b8:	4874      	ldr	r0, [pc, #464]	@ (801248c <tcp_receive+0xf14>)
 80122ba:	f7fd fb09 	bl	800f8d0 <tcp_seg_copy>
 80122be:	4602      	mov	r2, r0
 80122c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80122c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 80b5 	beq.w	8012438 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80122ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80122d6:	8912      	ldrh	r2, [r2, #8]
 80122d8:	441a      	add	r2, r3
 80122da:	4b6b      	ldr	r3, [pc, #428]	@ (8012488 <tcp_receive+0xf10>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	1ad3      	subs	r3, r2, r3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dd12      	ble.n	801230a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80122e4:	4b68      	ldr	r3, [pc, #416]	@ (8012488 <tcp_receive+0xf10>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80122fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122fc:	685a      	ldr	r2, [r3, #4]
 80122fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012300:	891b      	ldrh	r3, [r3, #8]
 8012302:	4619      	mov	r1, r3
 8012304:	4610      	mov	r0, r2
 8012306:	f7fb fdab 	bl	800de60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801230a:	4b61      	ldr	r3, [pc, #388]	@ (8012490 <tcp_receive+0xf18>)
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	461a      	mov	r2, r3
 8012310:	4b5d      	ldr	r3, [pc, #372]	@ (8012488 <tcp_receive+0xf10>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	441a      	add	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801231a:	6879      	ldr	r1, [r7, #4]
 801231c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801231e:	440b      	add	r3, r1
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	2b00      	cmp	r3, #0
 8012324:	f340 8088 	ble.w	8012438 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	68db      	ldr	r3, [r3, #12]
 801232e:	899b      	ldrh	r3, [r3, #12]
 8012330:	b29b      	uxth	r3, r3
 8012332:	4618      	mov	r0, r3
 8012334:	f7f7 ff92 	bl	800a25c <lwip_htons>
 8012338:	4603      	mov	r3, r0
 801233a:	b2db      	uxtb	r3, r3
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b00      	cmp	r3, #0
 8012342:	d021      	beq.n	8012388 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	899b      	ldrh	r3, [r3, #12]
 801234c:	b29b      	uxth	r3, r3
 801234e:	b21b      	sxth	r3, r3
 8012350:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012354:	b21c      	sxth	r4, r3
 8012356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	899b      	ldrh	r3, [r3, #12]
 801235e:	b29b      	uxth	r3, r3
 8012360:	4618      	mov	r0, r3
 8012362:	f7f7 ff7b 	bl	800a25c <lwip_htons>
 8012366:	4603      	mov	r3, r0
 8012368:	b2db      	uxtb	r3, r3
 801236a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801236e:	b29b      	uxth	r3, r3
 8012370:	4618      	mov	r0, r3
 8012372:	f7f7 ff73 	bl	800a25c <lwip_htons>
 8012376:	4603      	mov	r3, r0
 8012378:	b21b      	sxth	r3, r3
 801237a:	4323      	orrs	r3, r4
 801237c:	b21a      	sxth	r2, r3
 801237e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	b292      	uxth	r2, r2
 8012386:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238c:	b29a      	uxth	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012392:	4413      	add	r3, r2
 8012394:	b299      	uxth	r1, r3
 8012396:	4b3c      	ldr	r3, [pc, #240]	@ (8012488 <tcp_receive+0xf10>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	b29a      	uxth	r2, r3
 801239c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	1a8a      	subs	r2, r1, r2
 80123a2:	b292      	uxth	r2, r2
 80123a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80123a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	891b      	ldrh	r3, [r3, #8]
 80123b2:	4619      	mov	r1, r3
 80123b4:	4610      	mov	r0, r2
 80123b6:	f7fb fd53 	bl	800de60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	891c      	ldrh	r4, [r3, #8]
 80123c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	899b      	ldrh	r3, [r3, #12]
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7f7 ff46 	bl	800a25c <lwip_htons>
 80123d0:	4603      	mov	r3, r0
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	f003 0303 	and.w	r3, r3, #3
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <tcp_receive+0xe68>
 80123dc:	2301      	movs	r3, #1
 80123de:	e000      	b.n	80123e2 <tcp_receive+0xe6a>
 80123e0:	2300      	movs	r3, #0
 80123e2:	4423      	add	r3, r4
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	4b2a      	ldr	r3, [pc, #168]	@ (8012490 <tcp_receive+0xf18>)
 80123e8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80123ea:	4b29      	ldr	r3, [pc, #164]	@ (8012490 <tcp_receive+0xf18>)
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	461a      	mov	r2, r3
 80123f0:	4b25      	ldr	r3, [pc, #148]	@ (8012488 <tcp_receive+0xf10>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	441a      	add	r2, r3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123fa:	6879      	ldr	r1, [r7, #4]
 80123fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80123fe:	440b      	add	r3, r1
 8012400:	429a      	cmp	r2, r3
 8012402:	d019      	beq.n	8012438 <tcp_receive+0xec0>
 8012404:	4b23      	ldr	r3, [pc, #140]	@ (8012494 <tcp_receive+0xf1c>)
 8012406:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801240a:	4923      	ldr	r1, [pc, #140]	@ (8012498 <tcp_receive+0xf20>)
 801240c:	4823      	ldr	r0, [pc, #140]	@ (801249c <tcp_receive+0xf24>)
 801240e:	f002 f98f 	bl	8014730 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012412:	e011      	b.n	8012438 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	63bb      	str	r3, [r7, #56]	@ 0x38
 801241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801241c:	2b00      	cmp	r3, #0
 801241e:	f47f aea5 	bne.w	801216c <tcp_receive+0xbf4>
 8012422:	e00a      	b.n	801243a <tcp_receive+0xec2>
                break;
 8012424:	bf00      	nop
 8012426:	e008      	b.n	801243a <tcp_receive+0xec2>
                break;
 8012428:	bf00      	nop
 801242a:	e006      	b.n	801243a <tcp_receive+0xec2>
                  break;
 801242c:	bf00      	nop
 801242e:	e004      	b.n	801243a <tcp_receive+0xec2>
                  break;
 8012430:	bf00      	nop
 8012432:	e002      	b.n	801243a <tcp_receive+0xec2>
                  break;
 8012434:	bf00      	nop
 8012436:	e000      	b.n	801243a <tcp_receive+0xec2>
                break;
 8012438:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f001 fa32 	bl	80138a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012440:	e003      	b.n	801244a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f001 fa2e 	bl	80138a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012448:	e01a      	b.n	8012480 <tcp_receive+0xf08>
 801244a:	e019      	b.n	8012480 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801244c:	4b0e      	ldr	r3, [pc, #56]	@ (8012488 <tcp_receive+0xf10>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012454:	1ad3      	subs	r3, r2, r3
 8012456:	2b00      	cmp	r3, #0
 8012458:	db0a      	blt.n	8012470 <tcp_receive+0xef8>
 801245a:	4b0b      	ldr	r3, [pc, #44]	@ (8012488 <tcp_receive+0xf10>)
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012462:	6879      	ldr	r1, [r7, #4]
 8012464:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012466:	440b      	add	r3, r1
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	3301      	adds	r3, #1
 801246c:	2b00      	cmp	r3, #0
 801246e:	dd07      	ble.n	8012480 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	8b5b      	ldrh	r3, [r3, #26]
 8012474:	f043 0302 	orr.w	r3, r3, #2
 8012478:	b29a      	uxth	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801247e:	e7ff      	b.n	8012480 <tcp_receive+0xf08>
 8012480:	bf00      	nop
 8012482:	3750      	adds	r7, #80	@ 0x50
 8012484:	46bd      	mov	sp, r7
 8012486:	bdb0      	pop	{r4, r5, r7, pc}
 8012488:	2400f968 	.word	0x2400f968
 801248c:	2400f948 	.word	0x2400f948
 8012490:	2400f972 	.word	0x2400f972
 8012494:	08017158 	.word	0x08017158
 8012498:	0801752c 	.word	0x0801752c
 801249c:	080171d0 	.word	0x080171d0

080124a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80124a6:	4b15      	ldr	r3, [pc, #84]	@ (80124fc <tcp_get_next_optbyte+0x5c>)
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	1c5a      	adds	r2, r3, #1
 80124ac:	b291      	uxth	r1, r2
 80124ae:	4a13      	ldr	r2, [pc, #76]	@ (80124fc <tcp_get_next_optbyte+0x5c>)
 80124b0:	8011      	strh	r1, [r2, #0]
 80124b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124b4:	4b12      	ldr	r3, [pc, #72]	@ (8012500 <tcp_get_next_optbyte+0x60>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d004      	beq.n	80124c6 <tcp_get_next_optbyte+0x26>
 80124bc:	4b11      	ldr	r3, [pc, #68]	@ (8012504 <tcp_get_next_optbyte+0x64>)
 80124be:	881b      	ldrh	r3, [r3, #0]
 80124c0:	88fa      	ldrh	r2, [r7, #6]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d208      	bcs.n	80124d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80124c6:	4b10      	ldr	r3, [pc, #64]	@ (8012508 <tcp_get_next_optbyte+0x68>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	3314      	adds	r3, #20
 80124cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80124ce:	88fb      	ldrh	r3, [r7, #6]
 80124d0:	683a      	ldr	r2, [r7, #0]
 80124d2:	4413      	add	r3, r2
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	e00b      	b.n	80124f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80124d8:	88fb      	ldrh	r3, [r7, #6]
 80124da:	b2da      	uxtb	r2, r3
 80124dc:	4b09      	ldr	r3, [pc, #36]	@ (8012504 <tcp_get_next_optbyte+0x64>)
 80124de:	881b      	ldrh	r3, [r3, #0]
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80124e6:	4b06      	ldr	r3, [pc, #24]	@ (8012500 <tcp_get_next_optbyte+0x60>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	797b      	ldrb	r3, [r7, #5]
 80124ec:	4413      	add	r3, r2
 80124ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	2400f964 	.word	0x2400f964
 8012500:	2400f960 	.word	0x2400f960
 8012504:	2400f95e 	.word	0x2400f95e
 8012508:	2400f958 	.word	0x2400f958

0801250c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b084      	sub	sp, #16
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <tcp_parseopt+0x1c>
 801251a:	4b33      	ldr	r3, [pc, #204]	@ (80125e8 <tcp_parseopt+0xdc>)
 801251c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012520:	4932      	ldr	r1, [pc, #200]	@ (80125ec <tcp_parseopt+0xe0>)
 8012522:	4833      	ldr	r0, [pc, #204]	@ (80125f0 <tcp_parseopt+0xe4>)
 8012524:	f002 f904 	bl	8014730 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012528:	4b32      	ldr	r3, [pc, #200]	@ (80125f4 <tcp_parseopt+0xe8>)
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d057      	beq.n	80125e0 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012530:	4b31      	ldr	r3, [pc, #196]	@ (80125f8 <tcp_parseopt+0xec>)
 8012532:	2200      	movs	r2, #0
 8012534:	801a      	strh	r2, [r3, #0]
 8012536:	e047      	b.n	80125c8 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8012538:	f7ff ffb2 	bl	80124a0 <tcp_get_next_optbyte>
 801253c:	4603      	mov	r3, r0
 801253e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	2b02      	cmp	r3, #2
 8012544:	d006      	beq.n	8012554 <tcp_parseopt+0x48>
 8012546:	2b02      	cmp	r3, #2
 8012548:	dc2b      	bgt.n	80125a2 <tcp_parseopt+0x96>
 801254a:	2b00      	cmp	r3, #0
 801254c:	d043      	beq.n	80125d6 <tcp_parseopt+0xca>
 801254e:	2b01      	cmp	r3, #1
 8012550:	d039      	beq.n	80125c6 <tcp_parseopt+0xba>
 8012552:	e026      	b.n	80125a2 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012554:	f7ff ffa4 	bl	80124a0 <tcp_get_next_optbyte>
 8012558:	4603      	mov	r3, r0
 801255a:	2b04      	cmp	r3, #4
 801255c:	d13d      	bne.n	80125da <tcp_parseopt+0xce>
 801255e:	4b26      	ldr	r3, [pc, #152]	@ (80125f8 <tcp_parseopt+0xec>)
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	3301      	adds	r3, #1
 8012564:	4a23      	ldr	r2, [pc, #140]	@ (80125f4 <tcp_parseopt+0xe8>)
 8012566:	8812      	ldrh	r2, [r2, #0]
 8012568:	4293      	cmp	r3, r2
 801256a:	da36      	bge.n	80125da <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801256c:	f7ff ff98 	bl	80124a0 <tcp_get_next_optbyte>
 8012570:	4603      	mov	r3, r0
 8012572:	021b      	lsls	r3, r3, #8
 8012574:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012576:	f7ff ff93 	bl	80124a0 <tcp_get_next_optbyte>
 801257a:	4603      	mov	r3, r0
 801257c:	461a      	mov	r2, r3
 801257e:	89bb      	ldrh	r3, [r7, #12]
 8012580:	4313      	orrs	r3, r2
 8012582:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012584:	89bb      	ldrh	r3, [r7, #12]
 8012586:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801258a:	4293      	cmp	r3, r2
 801258c:	d804      	bhi.n	8012598 <tcp_parseopt+0x8c>
 801258e:	89bb      	ldrh	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <tcp_parseopt+0x8c>
 8012594:	89ba      	ldrh	r2, [r7, #12]
 8012596:	e001      	b.n	801259c <tcp_parseopt+0x90>
 8012598:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80125a0:	e012      	b.n	80125c8 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80125a2:	f7ff ff7d 	bl	80124a0 <tcp_get_next_optbyte>
 80125a6:	4603      	mov	r3, r0
 80125a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80125aa:	7afb      	ldrb	r3, [r7, #11]
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	d916      	bls.n	80125de <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125b0:	7afb      	ldrb	r3, [r7, #11]
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	4b10      	ldr	r3, [pc, #64]	@ (80125f8 <tcp_parseopt+0xec>)
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	4413      	add	r3, r2
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	3b02      	subs	r3, #2
 80125be:	b29a      	uxth	r2, r3
 80125c0:	4b0d      	ldr	r3, [pc, #52]	@ (80125f8 <tcp_parseopt+0xec>)
 80125c2:	801a      	strh	r2, [r3, #0]
 80125c4:	e000      	b.n	80125c8 <tcp_parseopt+0xbc>
          break;
 80125c6:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125c8:	4b0b      	ldr	r3, [pc, #44]	@ (80125f8 <tcp_parseopt+0xec>)
 80125ca:	881a      	ldrh	r2, [r3, #0]
 80125cc:	4b09      	ldr	r3, [pc, #36]	@ (80125f4 <tcp_parseopt+0xe8>)
 80125ce:	881b      	ldrh	r3, [r3, #0]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d3b1      	bcc.n	8012538 <tcp_parseopt+0x2c>
 80125d4:	e004      	b.n	80125e0 <tcp_parseopt+0xd4>
          return;
 80125d6:	bf00      	nop
 80125d8:	e002      	b.n	80125e0 <tcp_parseopt+0xd4>
            return;
 80125da:	bf00      	nop
 80125dc:	e000      	b.n	80125e0 <tcp_parseopt+0xd4>
            return;
 80125de:	bf00      	nop
      }
    }
  }
}
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08017158 	.word	0x08017158
 80125ec:	080175e8 	.word	0x080175e8
 80125f0:	080171d0 	.word	0x080171d0
 80125f4:	2400f95c 	.word	0x2400f95c
 80125f8:	2400f964 	.word	0x2400f964

080125fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80125fc:	b480      	push	{r7}
 80125fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012600:	4b05      	ldr	r3, [pc, #20]	@ (8012618 <tcp_trigger_input_pcb_close+0x1c>)
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f043 0310 	orr.w	r3, r3, #16
 8012608:	b2da      	uxtb	r2, r3
 801260a:	4b03      	ldr	r3, [pc, #12]	@ (8012618 <tcp_trigger_input_pcb_close+0x1c>)
 801260c:	701a      	strb	r2, [r3, #0]
}
 801260e:	bf00      	nop
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr
 8012618:	2400f975 	.word	0x2400f975

0801261c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00a      	beq.n	8012644 <tcp_route+0x28>
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	7a1b      	ldrb	r3, [r3, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d006      	beq.n	8012644 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	7a1b      	ldrb	r3, [r3, #8]
 801263a:	4618      	mov	r0, r3
 801263c:	f7fb fa06 	bl	800da4c <netif_get_by_index>
 8012640:	4603      	mov	r3, r0
 8012642:	e003      	b.n	801264c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7f9 f8e3 	bl	800b810 <ip4_route>
 801264a:	4603      	mov	r3, r0
  }
}
 801264c:	4618      	mov	r0, r3
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b087      	sub	sp, #28
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	603b      	str	r3, [r7, #0]
 8012660:	4613      	mov	r3, r2
 8012662:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d105      	bne.n	8012676 <tcp_create_segment+0x22>
 801266a:	4b43      	ldr	r3, [pc, #268]	@ (8012778 <tcp_create_segment+0x124>)
 801266c:	22a3      	movs	r2, #163	@ 0xa3
 801266e:	4943      	ldr	r1, [pc, #268]	@ (801277c <tcp_create_segment+0x128>)
 8012670:	4843      	ldr	r0, [pc, #268]	@ (8012780 <tcp_create_segment+0x12c>)
 8012672:	f002 f85d 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d105      	bne.n	8012688 <tcp_create_segment+0x34>
 801267c:	4b3e      	ldr	r3, [pc, #248]	@ (8012778 <tcp_create_segment+0x124>)
 801267e:	22a4      	movs	r2, #164	@ 0xa4
 8012680:	4940      	ldr	r1, [pc, #256]	@ (8012784 <tcp_create_segment+0x130>)
 8012682:	483f      	ldr	r0, [pc, #252]	@ (8012780 <tcp_create_segment+0x12c>)
 8012684:	f002 f854 	bl	8014730 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012688:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	b2db      	uxtb	r3, r3
 8012690:	f003 0304 	and.w	r3, r3, #4
 8012694:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012696:	2003      	movs	r0, #3
 8012698:	f7fa fe4c 	bl	800d334 <memp_malloc>
 801269c:	6138      	str	r0, [r7, #16]
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d104      	bne.n	80126ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80126a4:	68b8      	ldr	r0, [r7, #8]
 80126a6:	f7fb fd5f 	bl	800e168 <pbuf_free>
    return NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	e060      	b.n	8012770 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80126b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	2200      	movs	r2, #0
 80126ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	891a      	ldrh	r2, [r3, #8]
 80126c6:	7dfb      	ldrb	r3, [r7, #23]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d205      	bcs.n	80126da <tcp_create_segment+0x86>
 80126ce:	4b2a      	ldr	r3, [pc, #168]	@ (8012778 <tcp_create_segment+0x124>)
 80126d0:	22b0      	movs	r2, #176	@ 0xb0
 80126d2:	492d      	ldr	r1, [pc, #180]	@ (8012788 <tcp_create_segment+0x134>)
 80126d4:	482a      	ldr	r0, [pc, #168]	@ (8012780 <tcp_create_segment+0x12c>)
 80126d6:	f002 f82b 	bl	8014730 <iprintf>
  seg->len = p->tot_len - optlen;
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	891a      	ldrh	r2, [r3, #8]
 80126de:	7dfb      	ldrb	r3, [r7, #23]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	1ad3      	subs	r3, r2, r3
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80126ea:	2114      	movs	r1, #20
 80126ec:	68b8      	ldr	r0, [r7, #8]
 80126ee:	f7fb fca5 	bl	800e03c <pbuf_add_header>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d004      	beq.n	8012702 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80126f8:	6938      	ldr	r0, [r7, #16]
 80126fa:	f7fd f8d0 	bl	800f89e <tcp_seg_free>
    return NULL;
 80126fe:	2300      	movs	r3, #0
 8012700:	e036      	b.n	8012770 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	685a      	ldr	r2, [r3, #4]
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	8ada      	ldrh	r2, [r3, #22]
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	68dc      	ldr	r4, [r3, #12]
 8012714:	4610      	mov	r0, r2
 8012716:	f7f7 fda1 	bl	800a25c <lwip_htons>
 801271a:	4603      	mov	r3, r0
 801271c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	8b1a      	ldrh	r2, [r3, #24]
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	68dc      	ldr	r4, [r3, #12]
 8012726:	4610      	mov	r0, r2
 8012728:	f7f7 fd98 	bl	800a25c <lwip_htons>
 801272c:	4603      	mov	r3, r0
 801272e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	68dc      	ldr	r4, [r3, #12]
 8012734:	6838      	ldr	r0, [r7, #0]
 8012736:	f7f7 fda7 	bl	800a288 <lwip_htonl>
 801273a:	4603      	mov	r3, r0
 801273c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	089b      	lsrs	r3, r3, #2
 8012742:	b2db      	uxtb	r3, r3
 8012744:	3305      	adds	r3, #5
 8012746:	b29b      	uxth	r3, r3
 8012748:	031b      	lsls	r3, r3, #12
 801274a:	b29a      	uxth	r2, r3
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	b29b      	uxth	r3, r3
 8012750:	4313      	orrs	r3, r2
 8012752:	b29a      	uxth	r2, r3
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	68dc      	ldr	r4, [r3, #12]
 8012758:	4610      	mov	r0, r2
 801275a:	f7f7 fd7f 	bl	800a25c <lwip_htons>
 801275e:	4603      	mov	r3, r0
 8012760:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	2200      	movs	r2, #0
 8012768:	749a      	strb	r2, [r3, #18]
 801276a:	2200      	movs	r2, #0
 801276c:	74da      	strb	r2, [r3, #19]
  return seg;
 801276e:	693b      	ldr	r3, [r7, #16]
}
 8012770:	4618      	mov	r0, r3
 8012772:	371c      	adds	r7, #28
 8012774:	46bd      	mov	sp, r7
 8012776:	bd90      	pop	{r4, r7, pc}
 8012778:	08017604 	.word	0x08017604
 801277c:	08017664 	.word	0x08017664
 8012780:	08017684 	.word	0x08017684
 8012784:	080176ac 	.word	0x080176ac
 8012788:	080176d0 	.word	0x080176d0

0801278c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801278c:	b590      	push	{r4, r7, lr}
 801278e:	b08b      	sub	sp, #44	@ 0x2c
 8012790:	af02      	add	r7, sp, #8
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	460b      	mov	r3, r1
 8012796:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012798:	2300      	movs	r3, #0
 801279a:	61fb      	str	r3, [r7, #28]
 801279c:	2300      	movs	r3, #0
 801279e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80127a0:	2300      	movs	r3, #0
 80127a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d106      	bne.n	80127b8 <tcp_split_unsent_seg+0x2c>
 80127aa:	4b95      	ldr	r3, [pc, #596]	@ (8012a00 <tcp_split_unsent_seg+0x274>)
 80127ac:	f240 324b 	movw	r2, #843	@ 0x34b
 80127b0:	4994      	ldr	r1, [pc, #592]	@ (8012a04 <tcp_split_unsent_seg+0x278>)
 80127b2:	4895      	ldr	r0, [pc, #596]	@ (8012a08 <tcp_split_unsent_seg+0x27c>)
 80127b4:	f001 ffbc 	bl	8014730 <iprintf>

  useg = pcb->unsent;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d102      	bne.n	80127ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80127c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127c8:	e116      	b.n	80129f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80127ca:	887b      	ldrh	r3, [r7, #2]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d109      	bne.n	80127e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80127d0:	4b8b      	ldr	r3, [pc, #556]	@ (8012a00 <tcp_split_unsent_seg+0x274>)
 80127d2:	f240 3253 	movw	r2, #851	@ 0x353
 80127d6:	498d      	ldr	r1, [pc, #564]	@ (8012a0c <tcp_split_unsent_seg+0x280>)
 80127d8:	488b      	ldr	r0, [pc, #556]	@ (8012a08 <tcp_split_unsent_seg+0x27c>)
 80127da:	f001 ffa9 	bl	8014730 <iprintf>
    return ERR_VAL;
 80127de:	f06f 0305 	mvn.w	r3, #5
 80127e2:	e109      	b.n	80129f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	891b      	ldrh	r3, [r3, #8]
 80127e8:	887a      	ldrh	r2, [r7, #2]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d301      	bcc.n	80127f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80127ee:	2300      	movs	r3, #0
 80127f0:	e102      	b.n	80129f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127f6:	887a      	ldrh	r2, [r7, #2]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d906      	bls.n	801280a <tcp_split_unsent_seg+0x7e>
 80127fc:	4b80      	ldr	r3, [pc, #512]	@ (8012a00 <tcp_split_unsent_seg+0x274>)
 80127fe:	f240 325b 	movw	r2, #859	@ 0x35b
 8012802:	4983      	ldr	r1, [pc, #524]	@ (8012a10 <tcp_split_unsent_seg+0x284>)
 8012804:	4880      	ldr	r0, [pc, #512]	@ (8012a08 <tcp_split_unsent_seg+0x27c>)
 8012806:	f001 ff93 	bl	8014730 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	891b      	ldrh	r3, [r3, #8]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d106      	bne.n	8012820 <tcp_split_unsent_seg+0x94>
 8012812:	4b7b      	ldr	r3, [pc, #492]	@ (8012a00 <tcp_split_unsent_seg+0x274>)
 8012814:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012818:	497e      	ldr	r1, [pc, #504]	@ (8012a14 <tcp_split_unsent_seg+0x288>)
 801281a:	487b      	ldr	r0, [pc, #492]	@ (8012a08 <tcp_split_unsent_seg+0x27c>)
 801281c:	f001 ff88 	bl	8014730 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	7a9b      	ldrb	r3, [r3, #10]
 8012824:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012826:	7bfb      	ldrb	r3, [r7, #15]
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	b2db      	uxtb	r3, r3
 801282c:	f003 0304 	and.w	r3, r3, #4
 8012830:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	891a      	ldrh	r2, [r3, #8]
 8012836:	887b      	ldrh	r3, [r7, #2]
 8012838:	1ad3      	subs	r3, r2, r3
 801283a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801283c:	7bbb      	ldrb	r3, [r7, #14]
 801283e:	b29a      	uxth	r2, r3
 8012840:	89bb      	ldrh	r3, [r7, #12]
 8012842:	4413      	add	r3, r2
 8012844:	b29b      	uxth	r3, r3
 8012846:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801284a:	4619      	mov	r1, r3
 801284c:	2036      	movs	r0, #54	@ 0x36
 801284e:	f7fb f9a7 	bl	800dba0 <pbuf_alloc>
 8012852:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	2b00      	cmp	r3, #0
 8012858:	f000 80b7 	beq.w	80129ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	891a      	ldrh	r2, [r3, #8]
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	891b      	ldrh	r3, [r3, #8]
 8012866:	1ad3      	subs	r3, r2, r3
 8012868:	b29a      	uxth	r2, r3
 801286a:	887b      	ldrh	r3, [r7, #2]
 801286c:	4413      	add	r3, r2
 801286e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	6858      	ldr	r0, [r3, #4]
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	685a      	ldr	r2, [r3, #4]
 8012878:	7bbb      	ldrb	r3, [r7, #14]
 801287a:	18d1      	adds	r1, r2, r3
 801287c:	897b      	ldrh	r3, [r7, #10]
 801287e:	89ba      	ldrh	r2, [r7, #12]
 8012880:	f7fb fe68 	bl	800e554 <pbuf_copy_partial>
 8012884:	4603      	mov	r3, r0
 8012886:	461a      	mov	r2, r3
 8012888:	89bb      	ldrh	r3, [r7, #12]
 801288a:	4293      	cmp	r3, r2
 801288c:	f040 809f 	bne.w	80129ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	899b      	ldrh	r3, [r3, #12]
 8012896:	b29b      	uxth	r3, r3
 8012898:	4618      	mov	r0, r3
 801289a:	f7f7 fcdf 	bl	800a25c <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80128a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80128a8:	2300      	movs	r3, #0
 80128aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80128ac:	7efb      	ldrb	r3, [r7, #27]
 80128ae:	f003 0308 	and.w	r3, r3, #8
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d007      	beq.n	80128c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80128b6:	7efb      	ldrb	r3, [r7, #27]
 80128b8:	f023 0308 	bic.w	r3, r3, #8
 80128bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80128be:	7ebb      	ldrb	r3, [r7, #26]
 80128c0:	f043 0308 	orr.w	r3, r3, #8
 80128c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80128c6:	7efb      	ldrb	r3, [r7, #27]
 80128c8:	f003 0301 	and.w	r3, r3, #1
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d007      	beq.n	80128e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80128d0:	7efb      	ldrb	r3, [r7, #27]
 80128d2:	f023 0301 	bic.w	r3, r3, #1
 80128d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80128d8:	7ebb      	ldrb	r3, [r7, #26]
 80128da:	f043 0301 	orr.w	r3, r3, #1
 80128de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f7 fcce 	bl	800a288 <lwip_htonl>
 80128ec:	4602      	mov	r2, r0
 80128ee:	887b      	ldrh	r3, [r7, #2]
 80128f0:	18d1      	adds	r1, r2, r3
 80128f2:	7eba      	ldrb	r2, [r7, #26]
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	460b      	mov	r3, r1
 80128fa:	6939      	ldr	r1, [r7, #16]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff fea9 	bl	8012654 <tcp_create_segment>
 8012902:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d063      	beq.n	80129d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	4618      	mov	r0, r3
 8012910:	f7fb fcb8 	bl	800e284 <pbuf_clen>
 8012914:	4603      	mov	r3, r0
 8012916:	461a      	mov	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801291e:	1a9b      	subs	r3, r3, r2
 8012920:	b29a      	uxth	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	6858      	ldr	r0, [r3, #4]
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	891a      	ldrh	r2, [r3, #8]
 8012932:	89bb      	ldrh	r3, [r7, #12]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	b29b      	uxth	r3, r3
 8012938:	4619      	mov	r1, r3
 801293a:	f7fb fa91 	bl	800de60 <pbuf_realloc>
  useg->len -= remainder;
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	891a      	ldrh	r2, [r3, #8]
 8012942:	89bb      	ldrh	r3, [r7, #12]
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	b29a      	uxth	r2, r3
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	899b      	ldrh	r3, [r3, #12]
 8012952:	b29c      	uxth	r4, r3
 8012954:	7efb      	ldrb	r3, [r7, #27]
 8012956:	b29b      	uxth	r3, r3
 8012958:	4618      	mov	r0, r3
 801295a:	f7f7 fc7f 	bl	800a25c <lwip_htons>
 801295e:	4603      	mov	r3, r0
 8012960:	461a      	mov	r2, r3
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	4322      	orrs	r2, r4
 8012968:	b292      	uxth	r2, r2
 801296a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7fb fc87 	bl	800e284 <pbuf_clen>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012980:	4413      	add	r3, r2
 8012982:	b29a      	uxth	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	f7fb fc78 	bl	800e284 <pbuf_clen>
 8012994:	4603      	mov	r3, r0
 8012996:	461a      	mov	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801299e:	4413      	add	r3, r2
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	69fa      	ldr	r2, [r7, #28]
 80129b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80129b6:	69fb      	ldr	r3, [r7, #28]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d103      	bne.n	80129c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2200      	movs	r2, #0
 80129c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e016      	b.n	80129f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80129ca:	bf00      	nop
 80129cc:	e002      	b.n	80129d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80129ce:	bf00      	nop
 80129d0:	e000      	b.n	80129d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80129d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d006      	beq.n	80129e8 <tcp_split_unsent_seg+0x25c>
 80129da:	4b09      	ldr	r3, [pc, #36]	@ (8012a00 <tcp_split_unsent_seg+0x274>)
 80129dc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80129e0:	490d      	ldr	r1, [pc, #52]	@ (8012a18 <tcp_split_unsent_seg+0x28c>)
 80129e2:	4809      	ldr	r0, [pc, #36]	@ (8012a08 <tcp_split_unsent_seg+0x27c>)
 80129e4:	f001 fea4 	bl	8014730 <iprintf>
  if (p != NULL) {
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d002      	beq.n	80129f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80129ee:	6938      	ldr	r0, [r7, #16]
 80129f0:	f7fb fbba 	bl	800e168 <pbuf_free>
  }

  return ERR_MEM;
 80129f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3724      	adds	r7, #36	@ 0x24
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd90      	pop	{r4, r7, pc}
 8012a00:	08017604 	.word	0x08017604
 8012a04:	080179c4 	.word	0x080179c4
 8012a08:	08017684 	.word	0x08017684
 8012a0c:	080179e8 	.word	0x080179e8
 8012a10:	08017a0c 	.word	0x08017a0c
 8012a14:	08017a1c 	.word	0x08017a1c
 8012a18:	08017a2c 	.word	0x08017a2c

08012a1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012a1c:	b590      	push	{r4, r7, lr}
 8012a1e:	b085      	sub	sp, #20
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_send_fin+0x1c>
 8012a2a:	4b21      	ldr	r3, [pc, #132]	@ (8012ab0 <tcp_send_fin+0x94>)
 8012a2c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012a30:	4920      	ldr	r1, [pc, #128]	@ (8012ab4 <tcp_send_fin+0x98>)
 8012a32:	4821      	ldr	r0, [pc, #132]	@ (8012ab8 <tcp_send_fin+0x9c>)
 8012a34:	f001 fe7c 	bl	8014730 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d02e      	beq.n	8012a9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a44:	60fb      	str	r3, [r7, #12]
 8012a46:	e002      	b.n	8012a4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1f8      	bne.n	8012a48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	899b      	ldrh	r3, [r3, #12]
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7f7 fbfc 	bl	800a25c <lwip_htons>
 8012a64:	4603      	mov	r3, r0
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	f003 0307 	and.w	r3, r3, #7
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d116      	bne.n	8012a9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	899b      	ldrh	r3, [r3, #12]
 8012a76:	b29c      	uxth	r4, r3
 8012a78:	2001      	movs	r0, #1
 8012a7a:	f7f7 fbef 	bl	800a25c <lwip_htons>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	461a      	mov	r2, r3
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	4322      	orrs	r2, r4
 8012a88:	b292      	uxth	r2, r2
 8012a8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	8b5b      	ldrh	r3, [r3, #26]
 8012a90:	f043 0320 	orr.w	r3, r3, #32
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e004      	b.n	8012aa8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012a9e:	2101      	movs	r1, #1
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f80b 	bl	8012abc <tcp_enqueue_flags>
 8012aa6:	4603      	mov	r3, r0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3714      	adds	r7, #20
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd90      	pop	{r4, r7, pc}
 8012ab0:	08017604 	.word	0x08017604
 8012ab4:	08017a38 	.word	0x08017a38
 8012ab8:	08017684 	.word	0x08017684

08012abc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08a      	sub	sp, #40	@ 0x28
 8012ac0:	af02      	add	r7, sp, #8
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012acc:	2300      	movs	r3, #0
 8012ace:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012ad0:	78fb      	ldrb	r3, [r7, #3]
 8012ad2:	f003 0303 	and.w	r3, r3, #3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_enqueue_flags+0x2c>
 8012ada:	4b67      	ldr	r3, [pc, #412]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012adc:	f240 4211 	movw	r2, #1041	@ 0x411
 8012ae0:	4966      	ldr	r1, [pc, #408]	@ (8012c7c <tcp_enqueue_flags+0x1c0>)
 8012ae2:	4867      	ldr	r0, [pc, #412]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012ae4:	f001 fe24 	bl	8014730 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d106      	bne.n	8012afc <tcp_enqueue_flags+0x40>
 8012aee:	4b62      	ldr	r3, [pc, #392]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012af0:	f240 4213 	movw	r2, #1043	@ 0x413
 8012af4:	4963      	ldr	r1, [pc, #396]	@ (8012c84 <tcp_enqueue_flags+0x1c8>)
 8012af6:	4862      	ldr	r0, [pc, #392]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012af8:	f001 fe1a 	bl	8014730 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	f003 0302 	and.w	r3, r3, #2
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d001      	beq.n	8012b0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012b06:	2301      	movs	r3, #1
 8012b08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012b0a:	7ffb      	ldrb	r3, [r7, #31]
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	f003 0304 	and.w	r3, r3, #4
 8012b14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012b16:	7dfb      	ldrb	r3, [r7, #23]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012b1e:	4619      	mov	r1, r3
 8012b20:	2036      	movs	r0, #54	@ 0x36
 8012b22:	f7fb f83d 	bl	800dba0 <pbuf_alloc>
 8012b26:	6138      	str	r0, [r7, #16]
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d109      	bne.n	8012b42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	8b5b      	ldrh	r3, [r3, #26]
 8012b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b40:	e095      	b.n	8012c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	895a      	ldrh	r2, [r3, #10]
 8012b46:	7dfb      	ldrb	r3, [r7, #23]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d206      	bcs.n	8012b5c <tcp_enqueue_flags+0xa0>
 8012b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012b50:	f240 4239 	movw	r2, #1081	@ 0x439
 8012b54:	494c      	ldr	r1, [pc, #304]	@ (8012c88 <tcp_enqueue_flags+0x1cc>)
 8012b56:	484a      	ldr	r0, [pc, #296]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012b58:	f001 fdea 	bl	8014730 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012b60:	78fa      	ldrb	r2, [r7, #3]
 8012b62:	7ffb      	ldrb	r3, [r7, #31]
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	460b      	mov	r3, r1
 8012b68:	6939      	ldr	r1, [r7, #16]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff fd72 	bl	8012654 <tcp_create_segment>
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d109      	bne.n	8012b8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8b5b      	ldrh	r3, [r3, #26]
 8012b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b8a:	e070      	b.n	8012c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	f003 0303 	and.w	r3, r3, #3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d006      	beq.n	8012ba6 <tcp_enqueue_flags+0xea>
 8012b98:	4b37      	ldr	r3, [pc, #220]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012b9a:	f240 4242 	movw	r2, #1090	@ 0x442
 8012b9e:	493b      	ldr	r1, [pc, #236]	@ (8012c8c <tcp_enqueue_flags+0x1d0>)
 8012ba0:	4837      	ldr	r0, [pc, #220]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012ba2:	f001 fdc5 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	891b      	ldrh	r3, [r3, #8]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d006      	beq.n	8012bbc <tcp_enqueue_flags+0x100>
 8012bae:	4b32      	ldr	r3, [pc, #200]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012bb0:	f240 4243 	movw	r2, #1091	@ 0x443
 8012bb4:	4936      	ldr	r1, [pc, #216]	@ (8012c90 <tcp_enqueue_flags+0x1d4>)
 8012bb6:	4832      	ldr	r0, [pc, #200]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012bb8:	f001 fdba 	bl	8014730 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d103      	bne.n	8012bcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68fa      	ldr	r2, [r7, #12]
 8012bc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012bca:	e00d      	b.n	8012be8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bd0:	61bb      	str	r3, [r7, #24]
 8012bd2:	e002      	b.n	8012bda <tcp_enqueue_flags+0x11e>
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	61bb      	str	r3, [r7, #24]
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d1f8      	bne.n	8012bd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2200      	movs	r2, #0
 8012bec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012bf0:	78fb      	ldrb	r3, [r7, #3]
 8012bf2:	f003 0302 	and.w	r3, r3, #2
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d104      	bne.n	8012c04 <tcp_enqueue_flags+0x148>
 8012bfa:	78fb      	ldrb	r3, [r7, #3]
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d004      	beq.n	8012c0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012c08:	1c5a      	adds	r2, r3, #1
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012c0e:	78fb      	ldrb	r3, [r7, #3]
 8012c10:	f003 0301 	and.w	r3, r3, #1
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d006      	beq.n	8012c26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	8b5b      	ldrh	r3, [r3, #26]
 8012c1c:	f043 0320 	orr.w	r3, r3, #32
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fb fb2a 	bl	800e284 <pbuf_clen>
 8012c30:	4603      	mov	r3, r0
 8012c32:	461a      	mov	r2, r3
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c3a:	4413      	add	r3, r2
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00e      	beq.n	8012c6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10a      	bne.n	8012c6c <tcp_enqueue_flags+0x1b0>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d106      	bne.n	8012c6c <tcp_enqueue_flags+0x1b0>
 8012c5e:	4b06      	ldr	r3, [pc, #24]	@ (8012c78 <tcp_enqueue_flags+0x1bc>)
 8012c60:	f240 4265 	movw	r2, #1125	@ 0x465
 8012c64:	490b      	ldr	r1, [pc, #44]	@ (8012c94 <tcp_enqueue_flags+0x1d8>)
 8012c66:	4806      	ldr	r0, [pc, #24]	@ (8012c80 <tcp_enqueue_flags+0x1c4>)
 8012c68:	f001 fd62 	bl	8014730 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012c6c:	2300      	movs	r3, #0
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3720      	adds	r7, #32
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	08017604 	.word	0x08017604
 8012c7c:	08017a54 	.word	0x08017a54
 8012c80:	08017684 	.word	0x08017684
 8012c84:	08017aac 	.word	0x08017aac
 8012c88:	08017acc 	.word	0x08017acc
 8012c8c:	08017b08 	.word	0x08017b08
 8012c90:	08017b20 	.word	0x08017b20
 8012c94:	08017b4c 	.word	0x08017b4c

08012c98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012c98:	b5b0      	push	{r4, r5, r7, lr}
 8012c9a:	b08a      	sub	sp, #40	@ 0x28
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d106      	bne.n	8012cb4 <tcp_output+0x1c>
 8012ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8012ed0 <tcp_output+0x238>)
 8012ca8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012cac:	4989      	ldr	r1, [pc, #548]	@ (8012ed4 <tcp_output+0x23c>)
 8012cae:	488a      	ldr	r0, [pc, #552]	@ (8012ed8 <tcp_output+0x240>)
 8012cb0:	f001 fd3e 	bl	8014730 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7d1b      	ldrb	r3, [r3, #20]
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d106      	bne.n	8012cca <tcp_output+0x32>
 8012cbc:	4b84      	ldr	r3, [pc, #528]	@ (8012ed0 <tcp_output+0x238>)
 8012cbe:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012cc2:	4986      	ldr	r1, [pc, #536]	@ (8012edc <tcp_output+0x244>)
 8012cc4:	4884      	ldr	r0, [pc, #528]	@ (8012ed8 <tcp_output+0x240>)
 8012cc6:	f001 fd33 	bl	8014730 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012cca:	4b85      	ldr	r3, [pc, #532]	@ (8012ee0 <tcp_output+0x248>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d101      	bne.n	8012cd8 <tcp_output+0x40>
    return ERR_OK;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	e1ce      	b.n	8013076 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	bf28      	it	cs
 8012ce8:	4613      	movcs	r3, r2
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cf2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10b      	bne.n	8012d12 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	8b5b      	ldrh	r3, [r3, #26]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 81aa 	beq.w	801305c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 fdcb 	bl	80138a4 <tcp_send_empty_ack>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	e1b1      	b.n	8013076 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012d12:	6879      	ldr	r1, [r7, #4]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	3304      	adds	r3, #4
 8012d18:	461a      	mov	r2, r3
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff fc7e 	bl	801261c <tcp_route>
 8012d20:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d102      	bne.n	8012d2e <tcp_output+0x96>
    return ERR_RTE;
 8012d28:	f06f 0303 	mvn.w	r3, #3
 8012d2c:	e1a3      	b.n	8013076 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d003      	beq.n	8012d3c <tcp_output+0xa4>
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d111      	bne.n	8012d60 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d002      	beq.n	8012d48 <tcp_output+0xb0>
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	3304      	adds	r3, #4
 8012d46:	e000      	b.n	8012d4a <tcp_output+0xb2>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d102      	bne.n	8012d58 <tcp_output+0xc0>
      return ERR_RTE;
 8012d52:	f06f 0303 	mvn.w	r3, #3
 8012d56:	e18e      	b.n	8013076 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f7 fa8e 	bl	800a288 <lwip_htonl>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d76:	8912      	ldrh	r2, [r2, #8]
 8012d78:	4413      	add	r3, r2
 8012d7a:	69ba      	ldr	r2, [r7, #24]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d227      	bcs.n	8012dd0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d86:	461a      	mov	r2, r3
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d114      	bne.n	8012db8 <tcp_output+0x120>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d110      	bne.n	8012db8 <tcp_output+0x120>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d10b      	bne.n	8012db8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2201      	movs	r2, #1
 8012dac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2200      	movs	r2, #0
 8012db4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	8b5b      	ldrh	r3, [r3, #26]
 8012dbc:	f003 0302 	and.w	r3, r3, #2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f000 814d 	beq.w	8013060 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 fd6c 	bl	80138a4 <tcp_send_empty_ack>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	e152      	b.n	8013076 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ddc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012dde:	6a3b      	ldr	r3, [r7, #32]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	f000 811c 	beq.w	801301e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012de6:	e002      	b.n	8012dee <tcp_output+0x156>
 8012de8:	6a3b      	ldr	r3, [r7, #32]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	623b      	str	r3, [r7, #32]
 8012dee:	6a3b      	ldr	r3, [r7, #32]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1f8      	bne.n	8012de8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012df6:	e112      	b.n	801301e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	899b      	ldrh	r3, [r3, #12]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f7 fa2b 	bl	800a25c <lwip_htons>
 8012e06:	4603      	mov	r3, r0
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	f003 0304 	and.w	r3, r3, #4
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d006      	beq.n	8012e20 <tcp_output+0x188>
 8012e12:	4b2f      	ldr	r3, [pc, #188]	@ (8012ed0 <tcp_output+0x238>)
 8012e14:	f240 5236 	movw	r2, #1334	@ 0x536
 8012e18:	4932      	ldr	r1, [pc, #200]	@ (8012ee4 <tcp_output+0x24c>)
 8012e1a:	482f      	ldr	r0, [pc, #188]	@ (8012ed8 <tcp_output+0x240>)
 8012e1c:	f001 fc88 	bl	8014730 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d01f      	beq.n	8012e68 <tcp_output+0x1d0>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	8b5b      	ldrh	r3, [r3, #26]
 8012e2c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d119      	bne.n	8012e68 <tcp_output+0x1d0>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d00b      	beq.n	8012e54 <tcp_output+0x1bc>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d110      	bne.n	8012e68 <tcp_output+0x1d0>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e4a:	891a      	ldrh	r2, [r3, #8]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d209      	bcs.n	8012e68 <tcp_output+0x1d0>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d004      	beq.n	8012e68 <tcp_output+0x1d0>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e64:	2b0f      	cmp	r3, #15
 8012e66:	d901      	bls.n	8012e6c <tcp_output+0x1d4>
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e000      	b.n	8012e6e <tcp_output+0x1d6>
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	8b5b      	ldrh	r3, [r3, #26]
 8012e76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f000 80e4 	beq.w	8013048 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	7d1b      	ldrb	r3, [r3, #20]
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d00d      	beq.n	8012ea4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	899b      	ldrh	r3, [r3, #12]
 8012e8e:	b29c      	uxth	r4, r3
 8012e90:	2010      	movs	r0, #16
 8012e92:	f7f7 f9e3 	bl	800a25c <lwip_htons>
 8012e96:	4603      	mov	r3, r0
 8012e98:	461a      	mov	r2, r3
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	4322      	orrs	r2, r4
 8012ea0:	b292      	uxth	r2, r2
 8012ea2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012ea4:	697a      	ldr	r2, [r7, #20]
 8012ea6:	6879      	ldr	r1, [r7, #4]
 8012ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012eaa:	f000 f909 	bl	80130c0 <tcp_output_segment>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d016      	beq.n	8012ee8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8b5b      	ldrh	r3, [r3, #26]
 8012ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ec2:	b29a      	uxth	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	835a      	strh	r2, [r3, #26]
      return err;
 8012ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ecc:	e0d3      	b.n	8013076 <tcp_output+0x3de>
 8012ece:	bf00      	nop
 8012ed0:	08017604 	.word	0x08017604
 8012ed4:	08017b74 	.word	0x08017b74
 8012ed8:	08017684 	.word	0x08017684
 8012edc:	08017b8c 	.word	0x08017b8c
 8012ee0:	2400f97c 	.word	0x2400f97c
 8012ee4:	08017bb4 	.word	0x08017bb4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	7d1b      	ldrb	r3, [r3, #20]
 8012ef4:	2b02      	cmp	r3, #2
 8012ef6:	d006      	beq.n	8012f06 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	8b5b      	ldrh	r3, [r3, #26]
 8012efc:	f023 0303 	bic.w	r3, r3, #3
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7f7 f9bb 	bl	800a288 <lwip_htonl>
 8012f12:	4604      	mov	r4, r0
 8012f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f16:	891b      	ldrh	r3, [r3, #8]
 8012f18:	461d      	mov	r5, r3
 8012f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	899b      	ldrh	r3, [r3, #12]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7f7 f99a 	bl	800a25c <lwip_htons>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	b2db      	uxtb	r3, r3
 8012f2c:	f003 0303 	and.w	r3, r3, #3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d001      	beq.n	8012f38 <tcp_output+0x2a0>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e000      	b.n	8012f3a <tcp_output+0x2a2>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	442b      	add	r3, r5
 8012f3c:	4423      	add	r3, r4
 8012f3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	1ad3      	subs	r3, r2, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	da02      	bge.n	8012f52 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	68ba      	ldr	r2, [r7, #8]
 8012f50:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f54:	891b      	ldrh	r3, [r3, #8]
 8012f56:	461c      	mov	r4, r3
 8012f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	899b      	ldrh	r3, [r3, #12]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f7 f97b 	bl	800a25c <lwip_htons>
 8012f66:	4603      	mov	r3, r0
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	f003 0303 	and.w	r3, r3, #3
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <tcp_output+0x2de>
 8012f72:	2301      	movs	r3, #1
 8012f74:	e000      	b.n	8012f78 <tcp_output+0x2e0>
 8012f76:	2300      	movs	r3, #0
 8012f78:	4423      	add	r3, r4
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d049      	beq.n	8013012 <tcp_output+0x37a>
      seg->next = NULL;
 8012f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f80:	2200      	movs	r2, #0
 8012f82:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d105      	bne.n	8012f98 <tcp_output+0x300>
        pcb->unacked = seg;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f90:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f94:	623b      	str	r3, [r7, #32]
 8012f96:	e03f      	b.n	8013018 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f7 f972 	bl	800a288 <lwip_htonl>
 8012fa4:	4604      	mov	r4, r0
 8012fa6:	6a3b      	ldr	r3, [r7, #32]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f7 f96b 	bl	800a288 <lwip_htonl>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	1ae3      	subs	r3, r4, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	da24      	bge.n	8013004 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	3370      	adds	r3, #112	@ 0x70
 8012fbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012fc0:	e002      	b.n	8012fc8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012fc2:	69fb      	ldr	r3, [r7, #28]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d011      	beq.n	8012ff4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f7 f955 	bl	800a288 <lwip_htonl>
 8012fde:	4604      	mov	r4, r0
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7f7 f94e 	bl	800a288 <lwip_htonl>
 8012fec:	4603      	mov	r3, r0
 8012fee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	dbe6      	blt.n	8012fc2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013000:	601a      	str	r2, [r3, #0]
 8013002:	e009      	b.n	8013018 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013008:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	623b      	str	r3, [r7, #32]
 8013010:	e002      	b.n	8013018 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013012:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013014:	f7fc fc43 	bl	800f89e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801301c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013020:	2b00      	cmp	r3, #0
 8013022:	d012      	beq.n	801304a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	4618      	mov	r0, r3
 801302c:	f7f7 f92c 	bl	800a288 <lwip_htonl>
 8013030:	4602      	mov	r2, r0
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801303a:	8912      	ldrh	r2, [r2, #8]
 801303c:	4413      	add	r3, r2
  while (seg != NULL &&
 801303e:	69ba      	ldr	r2, [r7, #24]
 8013040:	429a      	cmp	r2, r3
 8013042:	f4bf aed9 	bcs.w	8012df8 <tcp_output+0x160>
 8013046:	e000      	b.n	801304a <tcp_output+0x3b2>
      break;
 8013048:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801304e:	2b00      	cmp	r3, #0
 8013050:	d108      	bne.n	8013064 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2200      	movs	r2, #0
 8013056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801305a:	e004      	b.n	8013066 <tcp_output+0x3ce>
    goto output_done;
 801305c:	bf00      	nop
 801305e:	e002      	b.n	8013066 <tcp_output+0x3ce>
    goto output_done;
 8013060:	bf00      	nop
 8013062:	e000      	b.n	8013066 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013064:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	8b5b      	ldrh	r3, [r3, #26]
 801306a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801306e:	b29a      	uxth	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013074:	2300      	movs	r3, #0
}
 8013076:	4618      	mov	r0, r3
 8013078:	3728      	adds	r7, #40	@ 0x28
 801307a:	46bd      	mov	sp, r7
 801307c:	bdb0      	pop	{r4, r5, r7, pc}
 801307e:	bf00      	nop

08013080 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d106      	bne.n	801309c <tcp_output_segment_busy+0x1c>
 801308e:	4b09      	ldr	r3, [pc, #36]	@ (80130b4 <tcp_output_segment_busy+0x34>)
 8013090:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013094:	4908      	ldr	r1, [pc, #32]	@ (80130b8 <tcp_output_segment_busy+0x38>)
 8013096:	4809      	ldr	r0, [pc, #36]	@ (80130bc <tcp_output_segment_busy+0x3c>)
 8013098:	f001 fb4a 	bl	8014730 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	7b9b      	ldrb	r3, [r3, #14]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d001      	beq.n	80130aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e000      	b.n	80130ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	08017604 	.word	0x08017604
 80130b8:	08017bcc 	.word	0x08017bcc
 80130bc:	08017684 	.word	0x08017684

080130c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80130c0:	b5b0      	push	{r4, r5, r7, lr}
 80130c2:	b08c      	sub	sp, #48	@ 0x30
 80130c4:	af04      	add	r7, sp, #16
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d106      	bne.n	80130e0 <tcp_output_segment+0x20>
 80130d2:	4b64      	ldr	r3, [pc, #400]	@ (8013264 <tcp_output_segment+0x1a4>)
 80130d4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80130d8:	4963      	ldr	r1, [pc, #396]	@ (8013268 <tcp_output_segment+0x1a8>)
 80130da:	4864      	ldr	r0, [pc, #400]	@ (801326c <tcp_output_segment+0x1ac>)
 80130dc:	f001 fb28 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d106      	bne.n	80130f4 <tcp_output_segment+0x34>
 80130e6:	4b5f      	ldr	r3, [pc, #380]	@ (8013264 <tcp_output_segment+0x1a4>)
 80130e8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80130ec:	4960      	ldr	r1, [pc, #384]	@ (8013270 <tcp_output_segment+0x1b0>)
 80130ee:	485f      	ldr	r0, [pc, #380]	@ (801326c <tcp_output_segment+0x1ac>)
 80130f0:	f001 fb1e 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d106      	bne.n	8013108 <tcp_output_segment+0x48>
 80130fa:	4b5a      	ldr	r3, [pc, #360]	@ (8013264 <tcp_output_segment+0x1a4>)
 80130fc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013100:	495c      	ldr	r1, [pc, #368]	@ (8013274 <tcp_output_segment+0x1b4>)
 8013102:	485a      	ldr	r0, [pc, #360]	@ (801326c <tcp_output_segment+0x1ac>)
 8013104:	f001 fb14 	bl	8014730 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f7ff ffb9 	bl	8013080 <tcp_output_segment_busy>
 801310e:	4603      	mov	r3, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	d001      	beq.n	8013118 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	e0a1      	b.n	801325c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	68dc      	ldr	r4, [r3, #12]
 8013120:	4610      	mov	r0, r2
 8013122:	f7f7 f8b1 	bl	800a288 <lwip_htonl>
 8013126:	4603      	mov	r3, r0
 8013128:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	68dc      	ldr	r4, [r3, #12]
 8013132:	4610      	mov	r0, r2
 8013134:	f7f7 f892 	bl	800a25c <lwip_htons>
 8013138:	4603      	mov	r3, r0
 801313a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013144:	441a      	add	r2, r3
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	3314      	adds	r3, #20
 8013150:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	7a9b      	ldrb	r3, [r3, #10]
 8013156:	f003 0301 	and.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	d015      	beq.n	801318a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	3304      	adds	r3, #4
 8013162:	461a      	mov	r2, r3
 8013164:	6879      	ldr	r1, [r7, #4]
 8013166:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801316a:	f7fc fe8f 	bl	800fe8c <tcp_eff_send_mss_netif>
 801316e:	4603      	mov	r3, r0
 8013170:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013172:	8b7b      	ldrh	r3, [r7, #26]
 8013174:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013178:	4618      	mov	r0, r3
 801317a:	f7f7 f885 	bl	800a288 <lwip_htonl>
 801317e:	4602      	mov	r2, r0
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	3304      	adds	r3, #4
 8013188:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013190:	2b00      	cmp	r3, #0
 8013192:	da02      	bge.n	801319a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	2200      	movs	r2, #0
 8013198:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d10c      	bne.n	80131bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80131a2:	4b35      	ldr	r3, [pc, #212]	@ (8013278 <tcp_output_segment+0x1b8>)
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f7 f869 	bl	800a288 <lwip_htonl>
 80131b6:	4602      	mov	r2, r0
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	68da      	ldr	r2, [r3, #12]
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	8959      	ldrh	r1, [r3, #10]
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	8b3a      	ldrh	r2, [r7, #24]
 80131d6:	1a8a      	subs	r2, r1, r2
 80131d8:	b292      	uxth	r2, r2
 80131da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	8919      	ldrh	r1, [r3, #8]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	8b3a      	ldrh	r2, [r7, #24]
 80131e8:	1a8a      	subs	r2, r1, r2
 80131ea:	b292      	uxth	r2, r2
 80131ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	68d2      	ldr	r2, [r2, #12]
 80131f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	2200      	movs	r2, #0
 80131fe:	741a      	strb	r2, [r3, #16]
 8013200:	2200      	movs	r2, #0
 8013202:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	68da      	ldr	r2, [r3, #12]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	7a9b      	ldrb	r3, [r3, #10]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <tcp_output_segment+0x158>
 8013214:	2318      	movs	r3, #24
 8013216:	e000      	b.n	801321a <tcp_output_segment+0x15a>
 8013218:	2314      	movs	r3, #20
 801321a:	4413      	add	r3, r2
 801321c:	69fa      	ldr	r2, [r7, #28]
 801321e:	429a      	cmp	r2, r3
 8013220:	d006      	beq.n	8013230 <tcp_output_segment+0x170>
 8013222:	4b10      	ldr	r3, [pc, #64]	@ (8013264 <tcp_output_segment+0x1a4>)
 8013224:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013228:	4914      	ldr	r1, [pc, #80]	@ (801327c <tcp_output_segment+0x1bc>)
 801322a:	4810      	ldr	r0, [pc, #64]	@ (801326c <tcp_output_segment+0x1ac>)
 801322c:	f001 fa80 	bl	8014730 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	6858      	ldr	r0, [r3, #4]
 8013234:	68b9      	ldr	r1, [r7, #8]
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	1d1c      	adds	r4, r3, #4
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	7add      	ldrb	r5, [r3, #11]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	7a9b      	ldrb	r3, [r3, #10]
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	9202      	str	r2, [sp, #8]
 8013246:	2206      	movs	r2, #6
 8013248:	9201      	str	r2, [sp, #4]
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	462b      	mov	r3, r5
 801324e:	4622      	mov	r2, r4
 8013250:	f7f8 fc9c 	bl	800bb8c <ip4_output_if>
 8013254:	4603      	mov	r3, r0
 8013256:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3720      	adds	r7, #32
 8013260:	46bd      	mov	sp, r7
 8013262:	bdb0      	pop	{r4, r5, r7, pc}
 8013264:	08017604 	.word	0x08017604
 8013268:	08017bf4 	.word	0x08017bf4
 801326c:	08017684 	.word	0x08017684
 8013270:	08017c14 	.word	0x08017c14
 8013274:	08017c34 	.word	0x08017c34
 8013278:	2400f930 	.word	0x2400f930
 801327c:	08017c58 	.word	0x08017c58

08013280 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013280:	b5b0      	push	{r4, r5, r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <tcp_rexmit_rto_prepare+0x1c>
 801328e:	4b31      	ldr	r3, [pc, #196]	@ (8013354 <tcp_rexmit_rto_prepare+0xd4>)
 8013290:	f240 6263 	movw	r2, #1635	@ 0x663
 8013294:	4930      	ldr	r1, [pc, #192]	@ (8013358 <tcp_rexmit_rto_prepare+0xd8>)
 8013296:	4831      	ldr	r0, [pc, #196]	@ (801335c <tcp_rexmit_rto_prepare+0xdc>)
 8013298:	f001 fa4a 	bl	8014730 <iprintf>

  if (pcb->unacked == NULL) {
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d102      	bne.n	80132aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80132a4:	f06f 0305 	mvn.w	r3, #5
 80132a8:	e050      	b.n	801334c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132ae:	60fb      	str	r3, [r7, #12]
 80132b0:	e00b      	b.n	80132ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80132b2:	68f8      	ldr	r0, [r7, #12]
 80132b4:	f7ff fee4 	bl	8013080 <tcp_output_segment_busy>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d002      	beq.n	80132c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80132be:	f06f 0305 	mvn.w	r3, #5
 80132c2:	e043      	b.n	801334c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	60fb      	str	r3, [r7, #12]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1ef      	bne.n	80132b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f7ff fed4 	bl	8013080 <tcp_output_segment_busy>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80132de:	f06f 0305 	mvn.w	r3, #5
 80132e2:	e033      	b.n	801334c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	8b5b      	ldrh	r3, [r3, #26]
 80132fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013302:	b29a      	uxth	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	4618      	mov	r0, r3
 8013310:	f7f6 ffba 	bl	800a288 <lwip_htonl>
 8013314:	4604      	mov	r4, r0
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	891b      	ldrh	r3, [r3, #8]
 801331a:	461d      	mov	r5, r3
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	68db      	ldr	r3, [r3, #12]
 8013320:	899b      	ldrh	r3, [r3, #12]
 8013322:	b29b      	uxth	r3, r3
 8013324:	4618      	mov	r0, r3
 8013326:	f7f6 ff99 	bl	800a25c <lwip_htons>
 801332a:	4603      	mov	r3, r0
 801332c:	b2db      	uxtb	r3, r3
 801332e:	f003 0303 	and.w	r3, r3, #3
 8013332:	2b00      	cmp	r3, #0
 8013334:	d001      	beq.n	801333a <tcp_rexmit_rto_prepare+0xba>
 8013336:	2301      	movs	r3, #1
 8013338:	e000      	b.n	801333c <tcp_rexmit_rto_prepare+0xbc>
 801333a:	2300      	movs	r3, #0
 801333c:	442b      	add	r3, r5
 801333e:	18e2      	adds	r2, r4, r3
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2200      	movs	r2, #0
 8013348:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bdb0      	pop	{r4, r5, r7, pc}
 8013354:	08017604 	.word	0x08017604
 8013358:	08017c6c 	.word	0x08017c6c
 801335c:	08017684 	.word	0x08017684

08013360 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_rexmit_rto_commit+0x1c>
 801336e:	4b0d      	ldr	r3, [pc, #52]	@ (80133a4 <tcp_rexmit_rto_commit+0x44>)
 8013370:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013374:	490c      	ldr	r1, [pc, #48]	@ (80133a8 <tcp_rexmit_rto_commit+0x48>)
 8013376:	480d      	ldr	r0, [pc, #52]	@ (80133ac <tcp_rexmit_rto_commit+0x4c>)
 8013378:	f001 f9da 	bl	8014730 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013382:	2bff      	cmp	r3, #255	@ 0xff
 8013384:	d007      	beq.n	8013396 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801338c:	3301      	adds	r3, #1
 801338e:	b2da      	uxtb	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7ff fc7e 	bl	8012c98 <tcp_output>
}
 801339c:	bf00      	nop
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	08017604 	.word	0x08017604
 80133a8:	08017c90 	.word	0x08017c90
 80133ac:	08017684 	.word	0x08017684

080133b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d106      	bne.n	80133cc <tcp_rexmit_rto+0x1c>
 80133be:	4b0a      	ldr	r3, [pc, #40]	@ (80133e8 <tcp_rexmit_rto+0x38>)
 80133c0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80133c4:	4909      	ldr	r1, [pc, #36]	@ (80133ec <tcp_rexmit_rto+0x3c>)
 80133c6:	480a      	ldr	r0, [pc, #40]	@ (80133f0 <tcp_rexmit_rto+0x40>)
 80133c8:	f001 f9b2 	bl	8014730 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f7ff ff57 	bl	8013280 <tcp_rexmit_rto_prepare>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d102      	bne.n	80133de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7ff ffc1 	bl	8013360 <tcp_rexmit_rto_commit>
  }
}
 80133de:	bf00      	nop
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	08017604 	.word	0x08017604
 80133ec:	08017cb4 	.word	0x08017cb4
 80133f0:	08017684 	.word	0x08017684

080133f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80133f4:	b590      	push	{r4, r7, lr}
 80133f6:	b085      	sub	sp, #20
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d106      	bne.n	8013410 <tcp_rexmit+0x1c>
 8013402:	4b2f      	ldr	r3, [pc, #188]	@ (80134c0 <tcp_rexmit+0xcc>)
 8013404:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013408:	492e      	ldr	r1, [pc, #184]	@ (80134c4 <tcp_rexmit+0xd0>)
 801340a:	482f      	ldr	r0, [pc, #188]	@ (80134c8 <tcp_rexmit+0xd4>)
 801340c:	f001 f990 	bl	8014730 <iprintf>

  if (pcb->unacked == NULL) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013414:	2b00      	cmp	r3, #0
 8013416:	d102      	bne.n	801341e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013418:	f06f 0305 	mvn.w	r3, #5
 801341c:	e04c      	b.n	80134b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013422:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013424:	68b8      	ldr	r0, [r7, #8]
 8013426:	f7ff fe2b 	bl	8013080 <tcp_output_segment_busy>
 801342a:	4603      	mov	r3, r0
 801342c:	2b00      	cmp	r3, #0
 801342e:	d002      	beq.n	8013436 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013430:	f06f 0305 	mvn.w	r3, #5
 8013434:	e040      	b.n	80134b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	336c      	adds	r3, #108	@ 0x6c
 8013442:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013444:	e002      	b.n	801344c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d011      	beq.n	8013478 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	685b      	ldr	r3, [r3, #4]
 801345c:	4618      	mov	r0, r3
 801345e:	f7f6 ff13 	bl	800a288 <lwip_htonl>
 8013462:	4604      	mov	r4, r0
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	68db      	ldr	r3, [r3, #12]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	4618      	mov	r0, r3
 801346c:	f7f6 ff0c 	bl	800a288 <lwip_htonl>
 8013470:	4603      	mov	r3, r0
 8013472:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013474:	2b00      	cmp	r3, #0
 8013476:	dbe6      	blt.n	8013446 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	68ba      	ldr	r2, [r7, #8]
 8013484:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d103      	bne.n	8013496 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2200      	movs	r2, #0
 8013492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801349c:	2bff      	cmp	r3, #255	@ 0xff
 801349e:	d007      	beq.n	80134b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80134a6:	3301      	adds	r3, #1
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2200      	movs	r2, #0
 80134b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3714      	adds	r7, #20
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd90      	pop	{r4, r7, pc}
 80134c0:	08017604 	.word	0x08017604
 80134c4:	08017cd0 	.word	0x08017cd0
 80134c8:	08017684 	.word	0x08017684

080134cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d106      	bne.n	80134e8 <tcp_rexmit_fast+0x1c>
 80134da:	4b2a      	ldr	r3, [pc, #168]	@ (8013584 <tcp_rexmit_fast+0xb8>)
 80134dc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80134e0:	4929      	ldr	r1, [pc, #164]	@ (8013588 <tcp_rexmit_fast+0xbc>)
 80134e2:	482a      	ldr	r0, [pc, #168]	@ (801358c <tcp_rexmit_fast+0xc0>)
 80134e4:	f001 f924 	bl	8014730 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d045      	beq.n	801357c <tcp_rexmit_fast+0xb0>
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	8b5b      	ldrh	r3, [r3, #26]
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d13f      	bne.n	801357c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff ff79 	bl	80133f4 <tcp_rexmit>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d139      	bne.n	801357c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013514:	4293      	cmp	r3, r2
 8013516:	bf28      	it	cs
 8013518:	4613      	movcs	r3, r2
 801351a:	b29b      	uxth	r3, r3
 801351c:	2b00      	cmp	r3, #0
 801351e:	da00      	bge.n	8013522 <tcp_rexmit_fast+0x56>
 8013520:	3301      	adds	r3, #1
 8013522:	105b      	asrs	r3, r3, #1
 8013524:	b29a      	uxth	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013532:	461a      	mov	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	429a      	cmp	r2, r3
 801353c:	d206      	bcs.n	801354c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013542:	005b      	lsls	r3, r3, #1
 8013544:	b29a      	uxth	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013556:	4619      	mov	r1, r3
 8013558:	0049      	lsls	r1, r1, #1
 801355a:	440b      	add	r3, r1
 801355c:	b29b      	uxth	r3, r3
 801355e:	4413      	add	r3, r2
 8013560:	b29a      	uxth	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	8b5b      	ldrh	r3, [r3, #26]
 801356c:	f043 0304 	orr.w	r3, r3, #4
 8013570:	b29a      	uxth	r2, r3
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2200      	movs	r2, #0
 801357a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801357c:	bf00      	nop
 801357e:	3708      	adds	r7, #8
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	08017604 	.word	0x08017604
 8013588:	08017ce8 	.word	0x08017ce8
 801358c:	08017684 	.word	0x08017684

08013590 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	607b      	str	r3, [r7, #4]
 801359a:	460b      	mov	r3, r1
 801359c:	817b      	strh	r3, [r7, #10]
 801359e:	4613      	mov	r3, r2
 80135a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80135a2:	897a      	ldrh	r2, [r7, #10]
 80135a4:	893b      	ldrh	r3, [r7, #8]
 80135a6:	4413      	add	r3, r2
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	3314      	adds	r3, #20
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135b2:	4619      	mov	r1, r3
 80135b4:	2022      	movs	r0, #34	@ 0x22
 80135b6:	f7fa faf3 	bl	800dba0 <pbuf_alloc>
 80135ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d04d      	beq.n	801365e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80135c2:	897b      	ldrh	r3, [r7, #10]
 80135c4:	3313      	adds	r3, #19
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	8952      	ldrh	r2, [r2, #10]
 80135ca:	4293      	cmp	r3, r2
 80135cc:	db06      	blt.n	80135dc <tcp_output_alloc_header_common+0x4c>
 80135ce:	4b26      	ldr	r3, [pc, #152]	@ (8013668 <tcp_output_alloc_header_common+0xd8>)
 80135d0:	f240 7223 	movw	r2, #1827	@ 0x723
 80135d4:	4925      	ldr	r1, [pc, #148]	@ (801366c <tcp_output_alloc_header_common+0xdc>)
 80135d6:	4826      	ldr	r0, [pc, #152]	@ (8013670 <tcp_output_alloc_header_common+0xe0>)
 80135d8:	f001 f8aa 	bl	8014730 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80135e2:	8c3b      	ldrh	r3, [r7, #32]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7f6 fe39 	bl	800a25c <lwip_htons>
 80135ea:	4603      	mov	r3, r0
 80135ec:	461a      	mov	r2, r3
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80135f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f6 fe31 	bl	800a25c <lwip_htons>
 80135fa:	4603      	mov	r3, r0
 80135fc:	461a      	mov	r2, r3
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	687a      	ldr	r2, [r7, #4]
 8013606:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013608:	68f8      	ldr	r0, [r7, #12]
 801360a:	f7f6 fe3d 	bl	800a288 <lwip_htonl>
 801360e:	4602      	mov	r2, r0
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013614:	897b      	ldrh	r3, [r7, #10]
 8013616:	089b      	lsrs	r3, r3, #2
 8013618:	b29b      	uxth	r3, r3
 801361a:	3305      	adds	r3, #5
 801361c:	b29b      	uxth	r3, r3
 801361e:	031b      	lsls	r3, r3, #12
 8013620:	b29a      	uxth	r2, r3
 8013622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013626:	b29b      	uxth	r3, r3
 8013628:	4313      	orrs	r3, r2
 801362a:	b29b      	uxth	r3, r3
 801362c:	4618      	mov	r0, r3
 801362e:	f7f6 fe15 	bl	800a25c <lwip_htons>
 8013632:	4603      	mov	r3, r0
 8013634:	461a      	mov	r2, r3
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801363a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801363c:	4618      	mov	r0, r3
 801363e:	f7f6 fe0d 	bl	800a25c <lwip_htons>
 8013642:	4603      	mov	r3, r0
 8013644:	461a      	mov	r2, r3
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	2200      	movs	r2, #0
 801364e:	741a      	strb	r2, [r3, #16]
 8013650:	2200      	movs	r2, #0
 8013652:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	2200      	movs	r2, #0
 8013658:	749a      	strb	r2, [r3, #18]
 801365a:	2200      	movs	r2, #0
 801365c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801365e:	697b      	ldr	r3, [r7, #20]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	08017604 	.word	0x08017604
 801366c:	08017d08 	.word	0x08017d08
 8013670:	08017684 	.word	0x08017684

08013674 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013674:	b5b0      	push	{r4, r5, r7, lr}
 8013676:	b08a      	sub	sp, #40	@ 0x28
 8013678:	af04      	add	r7, sp, #16
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	607b      	str	r3, [r7, #4]
 801367e:	460b      	mov	r3, r1
 8013680:	817b      	strh	r3, [r7, #10]
 8013682:	4613      	mov	r3, r2
 8013684:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d106      	bne.n	801369a <tcp_output_alloc_header+0x26>
 801368c:	4b15      	ldr	r3, [pc, #84]	@ (80136e4 <tcp_output_alloc_header+0x70>)
 801368e:	f240 7242 	movw	r2, #1858	@ 0x742
 8013692:	4915      	ldr	r1, [pc, #84]	@ (80136e8 <tcp_output_alloc_header+0x74>)
 8013694:	4815      	ldr	r0, [pc, #84]	@ (80136ec <tcp_output_alloc_header+0x78>)
 8013696:	f001 f84b 	bl	8014730 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	8adb      	ldrh	r3, [r3, #22]
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	8b12      	ldrh	r2, [r2, #24]
 80136a6:	68f9      	ldr	r1, [r7, #12]
 80136a8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80136aa:	893d      	ldrh	r5, [r7, #8]
 80136ac:	897c      	ldrh	r4, [r7, #10]
 80136ae:	9103      	str	r1, [sp, #12]
 80136b0:	2110      	movs	r1, #16
 80136b2:	9102      	str	r1, [sp, #8]
 80136b4:	9201      	str	r2, [sp, #4]
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	462a      	mov	r2, r5
 80136bc:	4621      	mov	r1, r4
 80136be:	f7ff ff67 	bl	8013590 <tcp_output_alloc_header_common>
 80136c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d006      	beq.n	80136d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80136d2:	441a      	add	r2, r3
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80136d8:	697b      	ldr	r3, [r7, #20]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bdb0      	pop	{r4, r5, r7, pc}
 80136e2:	bf00      	nop
 80136e4:	08017604 	.word	0x08017604
 80136e8:	08017d38 	.word	0x08017d38
 80136ec:	08017684 	.word	0x08017684

080136f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b088      	sub	sp, #32
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	4611      	mov	r1, r2
 80136fc:	461a      	mov	r2, r3
 80136fe:	460b      	mov	r3, r1
 8013700:	71fb      	strb	r3, [r7, #7]
 8013702:	4613      	mov	r3, r2
 8013704:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d106      	bne.n	801371e <tcp_output_fill_options+0x2e>
 8013710:	4b12      	ldr	r3, [pc, #72]	@ (801375c <tcp_output_fill_options+0x6c>)
 8013712:	f240 7256 	movw	r2, #1878	@ 0x756
 8013716:	4912      	ldr	r1, [pc, #72]	@ (8013760 <tcp_output_fill_options+0x70>)
 8013718:	4812      	ldr	r0, [pc, #72]	@ (8013764 <tcp_output_fill_options+0x74>)
 801371a:	f001 f809 	bl	8014730 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	3314      	adds	r3, #20
 8013728:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801372a:	8bfb      	ldrh	r3, [r7, #30]
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	461a      	mov	r2, r3
 8013730:	79fb      	ldrb	r3, [r7, #7]
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	4413      	add	r3, r2
 801373a:	3314      	adds	r3, #20
 801373c:	69ba      	ldr	r2, [r7, #24]
 801373e:	4413      	add	r3, r2
 8013740:	697a      	ldr	r2, [r7, #20]
 8013742:	429a      	cmp	r2, r3
 8013744:	d006      	beq.n	8013754 <tcp_output_fill_options+0x64>
 8013746:	4b05      	ldr	r3, [pc, #20]	@ (801375c <tcp_output_fill_options+0x6c>)
 8013748:	f240 7275 	movw	r2, #1909	@ 0x775
 801374c:	4906      	ldr	r1, [pc, #24]	@ (8013768 <tcp_output_fill_options+0x78>)
 801374e:	4805      	ldr	r0, [pc, #20]	@ (8013764 <tcp_output_fill_options+0x74>)
 8013750:	f000 ffee 	bl	8014730 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013754:	bf00      	nop
 8013756:	3720      	adds	r7, #32
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	08017604 	.word	0x08017604
 8013760:	08017d60 	.word	0x08017d60
 8013764:	08017684 	.word	0x08017684
 8013768:	08017c58 	.word	0x08017c58

0801376c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b08a      	sub	sp, #40	@ 0x28
 8013770:	af04      	add	r7, sp, #16
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
 8013778:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d106      	bne.n	801378e <tcp_output_control_segment+0x22>
 8013780:	4b1c      	ldr	r3, [pc, #112]	@ (80137f4 <tcp_output_control_segment+0x88>)
 8013782:	f240 7287 	movw	r2, #1927	@ 0x787
 8013786:	491c      	ldr	r1, [pc, #112]	@ (80137f8 <tcp_output_control_segment+0x8c>)
 8013788:	481c      	ldr	r0, [pc, #112]	@ (80137fc <tcp_output_control_segment+0x90>)
 801378a:	f000 ffd1 	bl	8014730 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801378e:	683a      	ldr	r2, [r7, #0]
 8013790:	6879      	ldr	r1, [r7, #4]
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f7fe ff42 	bl	801261c <tcp_route>
 8013798:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d102      	bne.n	80137a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80137a0:	23fc      	movs	r3, #252	@ 0xfc
 80137a2:	75fb      	strb	r3, [r7, #23]
 80137a4:	e01c      	b.n	80137e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d006      	beq.n	80137ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	7adb      	ldrb	r3, [r3, #11]
 80137b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	7a9b      	ldrb	r3, [r3, #10]
 80137b6:	757b      	strb	r3, [r7, #21]
 80137b8:	e003      	b.n	80137c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80137ba:	23ff      	movs	r3, #255	@ 0xff
 80137bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80137c2:	7dba      	ldrb	r2, [r7, #22]
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	9302      	str	r3, [sp, #8]
 80137c8:	2306      	movs	r3, #6
 80137ca:	9301      	str	r3, [sp, #4]
 80137cc:	7d7b      	ldrb	r3, [r7, #21]
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	4613      	mov	r3, r2
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	68b8      	ldr	r0, [r7, #8]
 80137d8:	f7f8 f9d8 	bl	800bb8c <ip4_output_if>
 80137dc:	4603      	mov	r3, r0
 80137de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80137e0:	68b8      	ldr	r0, [r7, #8]
 80137e2:	f7fa fcc1 	bl	800e168 <pbuf_free>
  return err;
 80137e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3718      	adds	r7, #24
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	08017604 	.word	0x08017604
 80137f8:	08017d88 	.word	0x08017d88
 80137fc:	08017684 	.word	0x08017684

08013800 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013800:	b590      	push	{r4, r7, lr}
 8013802:	b08b      	sub	sp, #44	@ 0x2c
 8013804:	af04      	add	r7, sp, #16
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
 801380c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <tcp_rst+0x22>
 8013814:	4b1f      	ldr	r3, [pc, #124]	@ (8013894 <tcp_rst+0x94>)
 8013816:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801381a:	491f      	ldr	r1, [pc, #124]	@ (8013898 <tcp_rst+0x98>)
 801381c:	481f      	ldr	r0, [pc, #124]	@ (801389c <tcp_rst+0x9c>)
 801381e:	f000 ff87 	bl	8014730 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013824:	2b00      	cmp	r3, #0
 8013826:	d106      	bne.n	8013836 <tcp_rst+0x36>
 8013828:	4b1a      	ldr	r3, [pc, #104]	@ (8013894 <tcp_rst+0x94>)
 801382a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801382e:	491c      	ldr	r1, [pc, #112]	@ (80138a0 <tcp_rst+0xa0>)
 8013830:	481a      	ldr	r0, [pc, #104]	@ (801389c <tcp_rst+0x9c>)
 8013832:	f000 ff7d 	bl	8014730 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013836:	2300      	movs	r3, #0
 8013838:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801383a:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801383e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013840:	7dfb      	ldrb	r3, [r7, #23]
 8013842:	b29c      	uxth	r4, r3
 8013844:	68b8      	ldr	r0, [r7, #8]
 8013846:	f7f6 fd1f 	bl	800a288 <lwip_htonl>
 801384a:	4602      	mov	r2, r0
 801384c:	8abb      	ldrh	r3, [r7, #20]
 801384e:	9303      	str	r3, [sp, #12]
 8013850:	2314      	movs	r3, #20
 8013852:	9302      	str	r3, [sp, #8]
 8013854:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013856:	9301      	str	r3, [sp, #4]
 8013858:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4613      	mov	r3, r2
 801385e:	2200      	movs	r2, #0
 8013860:	4621      	mov	r1, r4
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f7ff fe94 	bl	8013590 <tcp_output_alloc_header_common>
 8013868:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00c      	beq.n	801388a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013870:	7dfb      	ldrb	r3, [r7, #23]
 8013872:	2200      	movs	r2, #0
 8013874:	6939      	ldr	r1, [r7, #16]
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f7ff ff3a 	bl	80136f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	683a      	ldr	r2, [r7, #0]
 8013880:	6939      	ldr	r1, [r7, #16]
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f7ff ff72 	bl	801376c <tcp_output_control_segment>
 8013888:	e000      	b.n	801388c <tcp_rst+0x8c>
    return;
 801388a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801388c:	371c      	adds	r7, #28
 801388e:	46bd      	mov	sp, r7
 8013890:	bd90      	pop	{r4, r7, pc}
 8013892:	bf00      	nop
 8013894:	08017604 	.word	0x08017604
 8013898:	08017db4 	.word	0x08017db4
 801389c:	08017684 	.word	0x08017684
 80138a0:	08017dd0 	.word	0x08017dd0

080138a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80138a4:	b590      	push	{r4, r7, lr}
 80138a6:	b087      	sub	sp, #28
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80138ac:	2300      	movs	r3, #0
 80138ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80138b0:	2300      	movs	r3, #0
 80138b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d106      	bne.n	80138c8 <tcp_send_empty_ack+0x24>
 80138ba:	4b28      	ldr	r3, [pc, #160]	@ (801395c <tcp_send_empty_ack+0xb8>)
 80138bc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80138c0:	4927      	ldr	r1, [pc, #156]	@ (8013960 <tcp_send_empty_ack+0xbc>)
 80138c2:	4828      	ldr	r0, [pc, #160]	@ (8013964 <tcp_send_empty_ack+0xc0>)
 80138c4:	f000 ff34 	bl	8014730 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80138c8:	7dfb      	ldrb	r3, [r7, #23]
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	f003 0304 	and.w	r3, r3, #4
 80138d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80138d4:	7d7b      	ldrb	r3, [r7, #21]
 80138d6:	b29c      	uxth	r4, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f6 fcd3 	bl	800a288 <lwip_htonl>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2200      	movs	r2, #0
 80138e6:	4621      	mov	r1, r4
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f7ff fec3 	bl	8013674 <tcp_output_alloc_header>
 80138ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d109      	bne.n	801390a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	8b5b      	ldrh	r3, [r3, #26]
 80138fa:	f043 0303 	orr.w	r3, r3, #3
 80138fe:	b29a      	uxth	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013904:	f06f 0301 	mvn.w	r3, #1
 8013908:	e023      	b.n	8013952 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801390a:	7dbb      	ldrb	r3, [r7, #22]
 801390c:	7dfa      	ldrb	r2, [r7, #23]
 801390e:	6939      	ldr	r1, [r7, #16]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7ff feed 	bl	80136f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	3304      	adds	r3, #4
 801391c:	6939      	ldr	r1, [r7, #16]
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff ff24 	bl	801376c <tcp_output_control_segment>
 8013924:	4603      	mov	r3, r0
 8013926:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d007      	beq.n	8013940 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	8b5b      	ldrh	r3, [r3, #26]
 8013934:	f043 0303 	orr.w	r3, r3, #3
 8013938:	b29a      	uxth	r2, r3
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	835a      	strh	r2, [r3, #26]
 801393e:	e006      	b.n	801394e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	8b5b      	ldrh	r3, [r3, #26]
 8013944:	f023 0303 	bic.w	r3, r3, #3
 8013948:	b29a      	uxth	r2, r3
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013952:	4618      	mov	r0, r3
 8013954:	371c      	adds	r7, #28
 8013956:	46bd      	mov	sp, r7
 8013958:	bd90      	pop	{r4, r7, pc}
 801395a:	bf00      	nop
 801395c:	08017604 	.word	0x08017604
 8013960:	08017dec 	.word	0x08017dec
 8013964:	08017684 	.word	0x08017684

08013968 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013968:	b590      	push	{r4, r7, lr}
 801396a:	b087      	sub	sp, #28
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013970:	2300      	movs	r3, #0
 8013972:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_keepalive+0x20>
 801397a:	4b18      	ldr	r3, [pc, #96]	@ (80139dc <tcp_keepalive+0x74>)
 801397c:	f640 0224 	movw	r2, #2084	@ 0x824
 8013980:	4917      	ldr	r1, [pc, #92]	@ (80139e0 <tcp_keepalive+0x78>)
 8013982:	4818      	ldr	r0, [pc, #96]	@ (80139e4 <tcp_keepalive+0x7c>)
 8013984:	f000 fed4 	bl	8014730 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013988:	7dfb      	ldrb	r3, [r7, #23]
 801398a:	b29c      	uxth	r4, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013990:	3b01      	subs	r3, #1
 8013992:	4618      	mov	r0, r3
 8013994:	f7f6 fc78 	bl	800a288 <lwip_htonl>
 8013998:	4603      	mov	r3, r0
 801399a:	2200      	movs	r2, #0
 801399c:	4621      	mov	r1, r4
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f7ff fe68 	bl	8013674 <tcp_output_alloc_header>
 80139a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d102      	bne.n	80139b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80139ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80139b0:	e010      	b.n	80139d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139b2:	7dfb      	ldrb	r3, [r7, #23]
 80139b4:	2200      	movs	r2, #0
 80139b6:	6939      	ldr	r1, [r7, #16]
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff fe99 	bl	80136f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	3304      	adds	r3, #4
 80139c4:	6939      	ldr	r1, [r7, #16]
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f7ff fed0 	bl	801376c <tcp_output_control_segment>
 80139cc:	4603      	mov	r3, r0
 80139ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80139d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	371c      	adds	r7, #28
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd90      	pop	{r4, r7, pc}
 80139dc:	08017604 	.word	0x08017604
 80139e0:	08017e0c 	.word	0x08017e0c
 80139e4:	08017684 	.word	0x08017684

080139e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80139e8:	b590      	push	{r4, r7, lr}
 80139ea:	b08b      	sub	sp, #44	@ 0x2c
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80139f0:	2300      	movs	r3, #0
 80139f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d106      	bne.n	8013a0a <tcp_zero_window_probe+0x22>
 80139fc:	4b4c      	ldr	r3, [pc, #304]	@ (8013b30 <tcp_zero_window_probe+0x148>)
 80139fe:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013a02:	494c      	ldr	r1, [pc, #304]	@ (8013b34 <tcp_zero_window_probe+0x14c>)
 8013a04:	484c      	ldr	r0, [pc, #304]	@ (8013b38 <tcp_zero_window_probe+0x150>)
 8013a06:	f000 fe93 	bl	8014730 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013a10:	6a3b      	ldr	r3, [r7, #32]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d101      	bne.n	8013a1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013a16:	2300      	movs	r3, #0
 8013a18:	e086      	b.n	8013b28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013a20:	2bff      	cmp	r3, #255	@ 0xff
 8013a22:	d007      	beq.n	8013a34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013a34:	6a3b      	ldr	r3, [r7, #32]
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	899b      	ldrh	r3, [r3, #12]
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7f6 fc0d 	bl	800a25c <lwip_htons>
 8013a42:	4603      	mov	r3, r0
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d005      	beq.n	8013a5a <tcp_zero_window_probe+0x72>
 8013a4e:	6a3b      	ldr	r3, [r7, #32]
 8013a50:	891b      	ldrh	r3, [r3, #8]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d101      	bne.n	8013a5a <tcp_zero_window_probe+0x72>
 8013a56:	2301      	movs	r3, #1
 8013a58:	e000      	b.n	8013a5c <tcp_zero_window_probe+0x74>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013a5e:	7ffb      	ldrb	r3, [r7, #31]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	bf0c      	ite	eq
 8013a64:	2301      	moveq	r3, #1
 8013a66:	2300      	movne	r3, #0
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a70:	b299      	uxth	r1, r3
 8013a72:	6a3b      	ldr	r3, [r7, #32]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	8bba      	ldrh	r2, [r7, #28]
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f7ff fdfa 	bl	8013674 <tcp_output_alloc_header>
 8013a80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d102      	bne.n	8013a8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a8c:	e04c      	b.n	8013b28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013a94:	7ffb      	ldrb	r3, [r7, #31]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d011      	beq.n	8013abe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	899b      	ldrh	r3, [r3, #12]
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	b21b      	sxth	r3, r3
 8013aa2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013aa6:	b21c      	sxth	r4, r3
 8013aa8:	2011      	movs	r0, #17
 8013aaa:	f7f6 fbd7 	bl	800a25c <lwip_htons>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	b21b      	sxth	r3, r3
 8013ab2:	4323      	orrs	r3, r4
 8013ab4:	b21b      	sxth	r3, r3
 8013ab6:	b29a      	uxth	r2, r3
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	819a      	strh	r2, [r3, #12]
 8013abc:	e010      	b.n	8013ae0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	3314      	adds	r3, #20
 8013ac4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013ac6:	6a3b      	ldr	r3, [r7, #32]
 8013ac8:	6858      	ldr	r0, [r3, #4]
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	891a      	ldrh	r2, [r3, #8]
 8013ad0:	6a3b      	ldr	r3, [r7, #32]
 8013ad2:	891b      	ldrh	r3, [r3, #8]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	2201      	movs	r2, #1
 8013ada:	6939      	ldr	r1, [r7, #16]
 8013adc:	f7fa fd3a 	bl	800e554 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013ae0:	6a3b      	ldr	r3, [r7, #32]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7f6 fbce 	bl	800a288 <lwip_htonl>
 8013aec:	4603      	mov	r3, r0
 8013aee:	3301      	adds	r3, #1
 8013af0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	1ad3      	subs	r3, r2, r3
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	da02      	bge.n	8013b04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	68fa      	ldr	r2, [r7, #12]
 8013b02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b08:	2200      	movs	r2, #0
 8013b0a:	69b9      	ldr	r1, [r7, #24]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7ff fdef 	bl	80136f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	3304      	adds	r3, #4
 8013b18:	69b9      	ldr	r1, [r7, #24]
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7ff fe26 	bl	801376c <tcp_output_control_segment>
 8013b20:	4603      	mov	r3, r0
 8013b22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013b24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	372c      	adds	r7, #44	@ 0x2c
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd90      	pop	{r4, r7, pc}
 8013b30:	08017604 	.word	0x08017604
 8013b34:	08017e28 	.word	0x08017e28
 8013b38:	08017684 	.word	0x08017684

08013b3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013b46:	f000 fb01 	bl	801414c <sys_timeouts_sleeptime>
 8013b4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b52:	d10b      	bne.n	8013b6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013b54:	4813      	ldr	r0, [pc, #76]	@ (8013ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013b56:	f7fa fe66 	bl	800e826 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	6839      	ldr	r1, [r7, #0]
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7fa fdd8 	bl	800e714 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013b64:	480f      	ldr	r0, [pc, #60]	@ (8013ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013b66:	f7fa fe4f 	bl	800e808 <sys_mutex_lock>
    return;
 8013b6a:	e018      	b.n	8013b9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d102      	bne.n	8013b78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013b72:	f000 fab1 	bl	80140d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013b76:	e7e6      	b.n	8013b46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013b78:	480a      	ldr	r0, [pc, #40]	@ (8013ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013b7a:	f7fa fe54 	bl	800e826 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013b7e:	68fa      	ldr	r2, [r7, #12]
 8013b80:	6839      	ldr	r1, [r7, #0]
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f7fa fdc6 	bl	800e714 <sys_arch_mbox_fetch>
 8013b88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013b8a:	4806      	ldr	r0, [pc, #24]	@ (8013ba4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013b8c:	f7fa fe3c 	bl	800e808 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b96:	d102      	bne.n	8013b9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013b98:	f000 fa9e 	bl	80140d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013b9c:	e7d3      	b.n	8013b46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	2400f98c 	.word	0x2400f98c

08013ba8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013bb0:	4810      	ldr	r0, [pc, #64]	@ (8013bf4 <tcpip_thread+0x4c>)
 8013bb2:	f7fa fe29 	bl	800e808 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013bb6:	4b10      	ldr	r3, [pc, #64]	@ (8013bf8 <tcpip_thread+0x50>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d005      	beq.n	8013bca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8013bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8013bf8 <tcpip_thread+0x50>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8013bfc <tcpip_thread+0x54>)
 8013bc4:	6812      	ldr	r2, [r2, #0]
 8013bc6:	4610      	mov	r0, r2
 8013bc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013bca:	f107 030c 	add.w	r3, r7, #12
 8013bce:	4619      	mov	r1, r3
 8013bd0:	480b      	ldr	r0, [pc, #44]	@ (8013c00 <tcpip_thread+0x58>)
 8013bd2:	f7ff ffb3 	bl	8013b3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d106      	bne.n	8013bea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013bdc:	4b09      	ldr	r3, [pc, #36]	@ (8013c04 <tcpip_thread+0x5c>)
 8013bde:	2291      	movs	r2, #145	@ 0x91
 8013be0:	4909      	ldr	r1, [pc, #36]	@ (8013c08 <tcpip_thread+0x60>)
 8013be2:	480a      	ldr	r0, [pc, #40]	@ (8013c0c <tcpip_thread+0x64>)
 8013be4:	f000 fda4 	bl	8014730 <iprintf>
      continue;
 8013be8:	e003      	b.n	8013bf2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f000 f80f 	bl	8013c10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013bf2:	e7ea      	b.n	8013bca <tcpip_thread+0x22>
 8013bf4:	2400f98c 	.word	0x2400f98c
 8013bf8:	2400f980 	.word	0x2400f980
 8013bfc:	2400f984 	.word	0x2400f984
 8013c00:	2400f988 	.word	0x2400f988
 8013c04:	08017e4c 	.word	0x08017e4c
 8013c08:	08017ea8 	.word	0x08017ea8
 8013c0c:	08017ec8 	.word	0x08017ec8

08013c10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b02      	cmp	r3, #2
 8013c1e:	d026      	beq.n	8013c6e <tcpip_thread_handle_msg+0x5e>
 8013c20:	2b02      	cmp	r3, #2
 8013c22:	dc2b      	bgt.n	8013c7c <tcpip_thread_handle_msg+0x6c>
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d002      	beq.n	8013c2e <tcpip_thread_handle_msg+0x1e>
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d015      	beq.n	8013c58 <tcpip_thread_handle_msg+0x48>
 8013c2c:	e026      	b.n	8013c7c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	6850      	ldr	r0, [r2, #4]
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	6892      	ldr	r2, [r2, #8]
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4798      	blx	r3
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d004      	beq.n	8013c4e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7fa fa8d 	bl	800e168 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013c4e:	6879      	ldr	r1, [r7, #4]
 8013c50:	2009      	movs	r0, #9
 8013c52:	f7f9 fbe5 	bl	800d420 <memp_free>
      break;
 8013c56:	e018      	b.n	8013c8a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	6892      	ldr	r2, [r2, #8]
 8013c60:	4610      	mov	r0, r2
 8013c62:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013c64:	6879      	ldr	r1, [r7, #4]
 8013c66:	2008      	movs	r0, #8
 8013c68:	f7f9 fbda 	bl	800d420 <memp_free>
      break;
 8013c6c:	e00d      	b.n	8013c8a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	6892      	ldr	r2, [r2, #8]
 8013c76:	4610      	mov	r0, r2
 8013c78:	4798      	blx	r3
      break;
 8013c7a:	e006      	b.n	8013c8a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013c7c:	4b05      	ldr	r3, [pc, #20]	@ (8013c94 <tcpip_thread_handle_msg+0x84>)
 8013c7e:	22cf      	movs	r2, #207	@ 0xcf
 8013c80:	4905      	ldr	r1, [pc, #20]	@ (8013c98 <tcpip_thread_handle_msg+0x88>)
 8013c82:	4806      	ldr	r0, [pc, #24]	@ (8013c9c <tcpip_thread_handle_msg+0x8c>)
 8013c84:	f000 fd54 	bl	8014730 <iprintf>
      break;
 8013c88:	bf00      	nop
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	08017e4c 	.word	0x08017e4c
 8013c98:	08017ea8 	.word	0x08017ea8
 8013c9c:	08017ec8 	.word	0x08017ec8

08013ca0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b086      	sub	sp, #24
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013cac:	481a      	ldr	r0, [pc, #104]	@ (8013d18 <tcpip_inpkt+0x78>)
 8013cae:	f7fa fd70 	bl	800e792 <sys_mbox_valid>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d105      	bne.n	8013cc4 <tcpip_inpkt+0x24>
 8013cb8:	4b18      	ldr	r3, [pc, #96]	@ (8013d1c <tcpip_inpkt+0x7c>)
 8013cba:	22fc      	movs	r2, #252	@ 0xfc
 8013cbc:	4918      	ldr	r1, [pc, #96]	@ (8013d20 <tcpip_inpkt+0x80>)
 8013cbe:	4819      	ldr	r0, [pc, #100]	@ (8013d24 <tcpip_inpkt+0x84>)
 8013cc0:	f000 fd36 	bl	8014730 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013cc4:	2009      	movs	r0, #9
 8013cc6:	f7f9 fb35 	bl	800d334 <memp_malloc>
 8013cca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d102      	bne.n	8013cd8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013cd6:	e01a      	b.n	8013d0e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	68fa      	ldr	r2, [r7, #12]
 8013ce2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	68ba      	ldr	r2, [r7, #8]
 8013ce8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013cf0:	6979      	ldr	r1, [r7, #20]
 8013cf2:	4809      	ldr	r0, [pc, #36]	@ (8013d18 <tcpip_inpkt+0x78>)
 8013cf4:	f7fa fcf4 	bl	800e6e0 <sys_mbox_trypost>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d006      	beq.n	8013d0c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013cfe:	6979      	ldr	r1, [r7, #20]
 8013d00:	2009      	movs	r0, #9
 8013d02:	f7f9 fb8d 	bl	800d420 <memp_free>
    return ERR_MEM;
 8013d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d0a:	e000      	b.n	8013d0e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013d0c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3718      	adds	r7, #24
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	2400f988 	.word	0x2400f988
 8013d1c:	08017e4c 	.word	0x08017e4c
 8013d20:	08017ef0 	.word	0x08017ef0
 8013d24:	08017ec8 	.word	0x08017ec8

08013d28 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d38:	f003 0318 	and.w	r3, r3, #24
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d006      	beq.n	8013d4e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013d40:	4a08      	ldr	r2, [pc, #32]	@ (8013d64 <tcpip_input+0x3c>)
 8013d42:	6839      	ldr	r1, [r7, #0]
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff ffab 	bl	8013ca0 <tcpip_inpkt>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	e005      	b.n	8013d5a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013d4e:	4a06      	ldr	r2, [pc, #24]	@ (8013d68 <tcpip_input+0x40>)
 8013d50:	6839      	ldr	r1, [r7, #0]
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f7ff ffa4 	bl	8013ca0 <tcpip_inpkt>
 8013d58:	4603      	mov	r3, r0
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	0800b155 	.word	0x0800b155
 8013d68:	0800b945 	.word	0x0800b945

08013d6c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013d76:	4819      	ldr	r0, [pc, #100]	@ (8013ddc <tcpip_try_callback+0x70>)
 8013d78:	f7fa fd0b 	bl	800e792 <sys_mbox_valid>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d106      	bne.n	8013d90 <tcpip_try_callback+0x24>
 8013d82:	4b17      	ldr	r3, [pc, #92]	@ (8013de0 <tcpip_try_callback+0x74>)
 8013d84:	f240 125d 	movw	r2, #349	@ 0x15d
 8013d88:	4916      	ldr	r1, [pc, #88]	@ (8013de4 <tcpip_try_callback+0x78>)
 8013d8a:	4817      	ldr	r0, [pc, #92]	@ (8013de8 <tcpip_try_callback+0x7c>)
 8013d8c:	f000 fcd0 	bl	8014730 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013d90:	2008      	movs	r0, #8
 8013d92:	f7f9 facf 	bl	800d334 <memp_malloc>
 8013d96:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d102      	bne.n	8013da4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013da2:	e017      	b.n	8013dd4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2201      	movs	r2, #1
 8013da8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013db6:	68f9      	ldr	r1, [r7, #12]
 8013db8:	4808      	ldr	r0, [pc, #32]	@ (8013ddc <tcpip_try_callback+0x70>)
 8013dba:	f7fa fc91 	bl	800e6e0 <sys_mbox_trypost>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d006      	beq.n	8013dd2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013dc4:	68f9      	ldr	r1, [r7, #12]
 8013dc6:	2008      	movs	r0, #8
 8013dc8:	f7f9 fb2a 	bl	800d420 <memp_free>
    return ERR_MEM;
 8013dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013dd0:	e000      	b.n	8013dd4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013dd2:	2300      	movs	r3, #0
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	2400f988 	.word	0x2400f988
 8013de0:	08017e4c 	.word	0x08017e4c
 8013de4:	08017ef0 	.word	0x08017ef0
 8013de8:	08017ec8 	.word	0x08017ec8

08013dec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013df6:	f7f7 fcf3 	bl	800b7e0 <lwip_init>

  tcpip_init_done = initfunc;
 8013dfa:	4a17      	ldr	r2, [pc, #92]	@ (8013e58 <tcpip_init+0x6c>)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013e00:	4a16      	ldr	r2, [pc, #88]	@ (8013e5c <tcpip_init+0x70>)
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013e06:	2106      	movs	r1, #6
 8013e08:	4815      	ldr	r0, [pc, #84]	@ (8013e60 <tcpip_init+0x74>)
 8013e0a:	f7fa fc47 	bl	800e69c <sys_mbox_new>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d006      	beq.n	8013e22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013e14:	4b13      	ldr	r3, [pc, #76]	@ (8013e64 <tcpip_init+0x78>)
 8013e16:	f240 2261 	movw	r2, #609	@ 0x261
 8013e1a:	4913      	ldr	r1, [pc, #76]	@ (8013e68 <tcpip_init+0x7c>)
 8013e1c:	4813      	ldr	r0, [pc, #76]	@ (8013e6c <tcpip_init+0x80>)
 8013e1e:	f000 fc87 	bl	8014730 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013e22:	4813      	ldr	r0, [pc, #76]	@ (8013e70 <tcpip_init+0x84>)
 8013e24:	f7fa fcd4 	bl	800e7d0 <sys_mutex_new>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d006      	beq.n	8013e3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013e64 <tcpip_init+0x78>)
 8013e30:	f240 2265 	movw	r2, #613	@ 0x265
 8013e34:	490f      	ldr	r1, [pc, #60]	@ (8013e74 <tcpip_init+0x88>)
 8013e36:	480d      	ldr	r0, [pc, #52]	@ (8013e6c <tcpip_init+0x80>)
 8013e38:	f000 fc7a 	bl	8014730 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e44:	2200      	movs	r2, #0
 8013e46:	490c      	ldr	r1, [pc, #48]	@ (8013e78 <tcpip_init+0x8c>)
 8013e48:	480c      	ldr	r0, [pc, #48]	@ (8013e7c <tcpip_init+0x90>)
 8013e4a:	f7fa fcf9 	bl	800e840 <sys_thread_new>
}
 8013e4e:	bf00      	nop
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	2400f980 	.word	0x2400f980
 8013e5c:	2400f984 	.word	0x2400f984
 8013e60:	2400f988 	.word	0x2400f988
 8013e64:	08017e4c 	.word	0x08017e4c
 8013e68:	08017f00 	.word	0x08017f00
 8013e6c:	08017ec8 	.word	0x08017ec8
 8013e70:	2400f98c 	.word	0x2400f98c
 8013e74:	08017f24 	.word	0x08017f24
 8013e78:	08013ba9 	.word	0x08013ba9
 8013e7c:	08017f48 	.word	0x08017f48

08013e80 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013e88:	f7fa fd68 	bl	800e95c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb8 <tcpip_tcp_timer+0x38>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d103      	bne.n	8013e9c <tcpip_tcp_timer+0x1c>
 8013e94:	4b09      	ldr	r3, [pc, #36]	@ (8013ebc <tcpip_tcp_timer+0x3c>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d005      	beq.n	8013ea8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	4908      	ldr	r1, [pc, #32]	@ (8013ec0 <tcpip_tcp_timer+0x40>)
 8013ea0:	20fa      	movs	r0, #250	@ 0xfa
 8013ea2:	f000 f8f3 	bl	801408c <sys_timeout>
 8013ea6:	e003      	b.n	8013eb0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013ea8:	4b06      	ldr	r3, [pc, #24]	@ (8013ec4 <tcpip_tcp_timer+0x44>)
 8013eaa:	2200      	movs	r2, #0
 8013eac:	601a      	str	r2, [r3, #0]
  }
}
 8013eae:	bf00      	nop
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	2400f93c 	.word	0x2400f93c
 8013ebc:	2400f940 	.word	0x2400f940
 8013ec0:	08013e81 	.word	0x08013e81
 8013ec4:	2400f998 	.word	0x2400f998

08013ec8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8013ef8 <tcp_timer_needed+0x30>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d10f      	bne.n	8013ef4 <tcp_timer_needed+0x2c>
 8013ed4:	4b09      	ldr	r3, [pc, #36]	@ (8013efc <tcp_timer_needed+0x34>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d103      	bne.n	8013ee4 <tcp_timer_needed+0x1c>
 8013edc:	4b08      	ldr	r3, [pc, #32]	@ (8013f00 <tcp_timer_needed+0x38>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d007      	beq.n	8013ef4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013ee4:	4b04      	ldr	r3, [pc, #16]	@ (8013ef8 <tcp_timer_needed+0x30>)
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013eea:	2200      	movs	r2, #0
 8013eec:	4905      	ldr	r1, [pc, #20]	@ (8013f04 <tcp_timer_needed+0x3c>)
 8013eee:	20fa      	movs	r0, #250	@ 0xfa
 8013ef0:	f000 f8cc 	bl	801408c <sys_timeout>
  }
}
 8013ef4:	bf00      	nop
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	2400f998 	.word	0x2400f998
 8013efc:	2400f93c 	.word	0x2400f93c
 8013f00:	2400f940 	.word	0x2400f940
 8013f04:	08013e81 	.word	0x08013e81

08013f08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013f14:	200a      	movs	r0, #10
 8013f16:	f7f9 fa0d 	bl	800d334 <memp_malloc>
 8013f1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d109      	bne.n	8013f36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d151      	bne.n	8013fcc <sys_timeout_abs+0xc4>
 8013f28:	4b2a      	ldr	r3, [pc, #168]	@ (8013fd4 <sys_timeout_abs+0xcc>)
 8013f2a:	22be      	movs	r2, #190	@ 0xbe
 8013f2c:	492a      	ldr	r1, [pc, #168]	@ (8013fd8 <sys_timeout_abs+0xd0>)
 8013f2e:	482b      	ldr	r0, [pc, #172]	@ (8013fdc <sys_timeout_abs+0xd4>)
 8013f30:	f000 fbfe 	bl	8014730 <iprintf>
    return;
 8013f34:	e04a      	b.n	8013fcc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013f4e:	4b24      	ldr	r3, [pc, #144]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d103      	bne.n	8013f5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013f56:	4a22      	ldr	r2, [pc, #136]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	6013      	str	r3, [r2, #0]
    return;
 8013f5c:	e037      	b.n	8013fce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	685a      	ldr	r2, [r3, #4]
 8013f62:	4b1f      	ldr	r3, [pc, #124]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	1ad3      	subs	r3, r2, r3
 8013f6a:	0fdb      	lsrs	r3, r3, #31
 8013f6c:	f003 0301 	and.w	r3, r3, #1
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d007      	beq.n	8013f86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013f76:	4b1a      	ldr	r3, [pc, #104]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013f7e:	4a18      	ldr	r2, [pc, #96]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	e023      	b.n	8013fce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013f86:	4b16      	ldr	r3, [pc, #88]	@ (8013fe0 <sys_timeout_abs+0xd8>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	617b      	str	r3, [r7, #20]
 8013f8c:	e01a      	b.n	8013fc4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d00b      	beq.n	8013fae <sys_timeout_abs+0xa6>
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	685a      	ldr	r2, [r3, #4]
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	1ad3      	subs	r3, r2, r3
 8013fa2:	0fdb      	lsrs	r3, r3, #31
 8013fa4:	f003 0301 	and.w	r3, r3, #1
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d007      	beq.n	8013fbe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	693a      	ldr	r2, [r7, #16]
 8013fba:	601a      	str	r2, [r3, #0]
        break;
 8013fbc:	e007      	b.n	8013fce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	617b      	str	r3, [r7, #20]
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1e1      	bne.n	8013f8e <sys_timeout_abs+0x86>
 8013fca:	e000      	b.n	8013fce <sys_timeout_abs+0xc6>
    return;
 8013fcc:	bf00      	nop
      }
    }
  }
}
 8013fce:	3718      	adds	r7, #24
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	08017f58 	.word	0x08017f58
 8013fd8:	08017fb8 	.word	0x08017fb8
 8013fdc:	08017ff8 	.word	0x08017ff8
 8013fe0:	2400f990 	.word	0x2400f990

08013fe4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	4798      	blx	r3

  now = sys_now();
 8013ff6:	f7f2 ff6b 	bl	8006ed0 <sys_now>
 8013ffa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	4b0f      	ldr	r3, [pc, #60]	@ (8014040 <lwip_cyclic_timer+0x5c>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4413      	add	r3, r2
 8014006:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	0fdb      	lsrs	r3, r3, #31
 8014010:	f003 0301 	and.w	r3, r3, #1
 8014014:	b2db      	uxtb	r3, r3
 8014016:	2b00      	cmp	r3, #0
 8014018:	d009      	beq.n	801402e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	4413      	add	r3, r2
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	4907      	ldr	r1, [pc, #28]	@ (8014044 <lwip_cyclic_timer+0x60>)
 8014026:	4618      	mov	r0, r3
 8014028:	f7ff ff6e 	bl	8013f08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801402c:	e004      	b.n	8014038 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	4904      	ldr	r1, [pc, #16]	@ (8014044 <lwip_cyclic_timer+0x60>)
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	f7ff ff68 	bl	8013f08 <sys_timeout_abs>
}
 8014038:	bf00      	nop
 801403a:	3718      	adds	r7, #24
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	2400f994 	.word	0x2400f994
 8014044:	08013fe5 	.word	0x08013fe5

08014048 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801404e:	2301      	movs	r3, #1
 8014050:	607b      	str	r3, [r7, #4]
 8014052:	e00e      	b.n	8014072 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014054:	4a0b      	ldr	r2, [pc, #44]	@ (8014084 <sys_timeouts_init+0x3c>)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	00db      	lsls	r3, r3, #3
 8014060:	4a08      	ldr	r2, [pc, #32]	@ (8014084 <sys_timeouts_init+0x3c>)
 8014062:	4413      	add	r3, r2
 8014064:	461a      	mov	r2, r3
 8014066:	4908      	ldr	r1, [pc, #32]	@ (8014088 <sys_timeouts_init+0x40>)
 8014068:	f000 f810 	bl	801408c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3301      	adds	r3, #1
 8014070:	607b      	str	r3, [r7, #4]
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2b02      	cmp	r3, #2
 8014076:	d9ed      	bls.n	8014054 <sys_timeouts_init+0xc>
  }
}
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	3708      	adds	r7, #8
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	08018550 	.word	0x08018550
 8014088:	08013fe5 	.word	0x08013fe5

0801408c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b086      	sub	sp, #24
 8014090:	af00      	add	r7, sp, #0
 8014092:	60f8      	str	r0, [r7, #12]
 8014094:	60b9      	str	r1, [r7, #8]
 8014096:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801409e:	d306      	bcc.n	80140ae <sys_timeout+0x22>
 80140a0:	4b0a      	ldr	r3, [pc, #40]	@ (80140cc <sys_timeout+0x40>)
 80140a2:	f240 1229 	movw	r2, #297	@ 0x129
 80140a6:	490a      	ldr	r1, [pc, #40]	@ (80140d0 <sys_timeout+0x44>)
 80140a8:	480a      	ldr	r0, [pc, #40]	@ (80140d4 <sys_timeout+0x48>)
 80140aa:	f000 fb41 	bl	8014730 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80140ae:	f7f2 ff0f 	bl	8006ed0 <sys_now>
 80140b2:	4602      	mov	r2, r0
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	4413      	add	r3, r2
 80140b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	68b9      	ldr	r1, [r7, #8]
 80140be:	6978      	ldr	r0, [r7, #20]
 80140c0:	f7ff ff22 	bl	8013f08 <sys_timeout_abs>
#endif
}
 80140c4:	bf00      	nop
 80140c6:	3718      	adds	r7, #24
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	08017f58 	.word	0x08017f58
 80140d0:	08018020 	.word	0x08018020
 80140d4:	08017ff8 	.word	0x08017ff8

080140d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80140de:	f7f2 fef7 	bl	8006ed0 <sys_now>
 80140e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80140e4:	4b17      	ldr	r3, [pc, #92]	@ (8014144 <sys_check_timeouts+0x6c>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d022      	beq.n	8014136 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	0fdb      	lsrs	r3, r3, #31
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	2b00      	cmp	r3, #0
 8014102:	d11a      	bne.n	801413a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4a0e      	ldr	r2, [pc, #56]	@ (8014144 <sys_check_timeouts+0x6c>)
 801410a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	689b      	ldr	r3, [r3, #8]
 8014110:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	68db      	ldr	r3, [r3, #12]
 8014116:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	4a0a      	ldr	r2, [pc, #40]	@ (8014148 <sys_check_timeouts+0x70>)
 801411e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014120:	68b9      	ldr	r1, [r7, #8]
 8014122:	200a      	movs	r0, #10
 8014124:	f7f9 f97c 	bl	800d420 <memp_free>
    if (handler != NULL) {
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d0da      	beq.n	80140e4 <sys_check_timeouts+0xc>
      handler(arg);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6838      	ldr	r0, [r7, #0]
 8014132:	4798      	blx	r3
  do {
 8014134:	e7d6      	b.n	80140e4 <sys_check_timeouts+0xc>
      return;
 8014136:	bf00      	nop
 8014138:	e000      	b.n	801413c <sys_check_timeouts+0x64>
      return;
 801413a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801413c:	3710      	adds	r7, #16
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	2400f990 	.word	0x2400f990
 8014148:	2400f994 	.word	0x2400f994

0801414c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014152:	4b16      	ldr	r3, [pc, #88]	@ (80141ac <sys_timeouts_sleeptime+0x60>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d102      	bne.n	8014160 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801415a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801415e:	e020      	b.n	80141a2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014160:	f7f2 feb6 	bl	8006ed0 <sys_now>
 8014164:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014166:	4b11      	ldr	r3, [pc, #68]	@ (80141ac <sys_timeouts_sleeptime+0x60>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	685a      	ldr	r2, [r3, #4]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	0fdb      	lsrs	r3, r3, #31
 8014172:	f003 0301 	and.w	r3, r3, #1
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b00      	cmp	r3, #0
 801417a:	d001      	beq.n	8014180 <sys_timeouts_sleeptime+0x34>
    return 0;
 801417c:	2300      	movs	r3, #0
 801417e:	e010      	b.n	80141a2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014180:	4b0a      	ldr	r3, [pc, #40]	@ (80141ac <sys_timeouts_sleeptime+0x60>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	685a      	ldr	r2, [r3, #4]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	da06      	bge.n	80141a0 <sys_timeouts_sleeptime+0x54>
 8014192:	4b07      	ldr	r3, [pc, #28]	@ (80141b0 <sys_timeouts_sleeptime+0x64>)
 8014194:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014198:	4906      	ldr	r1, [pc, #24]	@ (80141b4 <sys_timeouts_sleeptime+0x68>)
 801419a:	4807      	ldr	r0, [pc, #28]	@ (80141b8 <sys_timeouts_sleeptime+0x6c>)
 801419c:	f000 fac8 	bl	8014730 <iprintf>
    return ret;
 80141a0:	683b      	ldr	r3, [r7, #0]
  }
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	2400f990 	.word	0x2400f990
 80141b0:	08017f58 	.word	0x08017f58
 80141b4:	08018058 	.word	0x08018058
 80141b8:	08017ff8 	.word	0x08017ff8

080141bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80141c0:	f000 f9b6 	bl	8014530 <rand>
 80141c4:	4603      	mov	r3, r0
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	4b01      	ldr	r3, [pc, #4]	@ (80141dc <udp_init+0x20>)
 80141d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80141d8:	bf00      	nop
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	2400004c 	.word	0x2400004c

080141e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	4613      	mov	r3, r2
 80141ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d105      	bne.n	8014200 <udp_input_local_match+0x20>
 80141f4:	4b27      	ldr	r3, [pc, #156]	@ (8014294 <udp_input_local_match+0xb4>)
 80141f6:	2287      	movs	r2, #135	@ 0x87
 80141f8:	4927      	ldr	r1, [pc, #156]	@ (8014298 <udp_input_local_match+0xb8>)
 80141fa:	4828      	ldr	r0, [pc, #160]	@ (801429c <udp_input_local_match+0xbc>)
 80141fc:	f000 fa98 	bl	8014730 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d105      	bne.n	8014212 <udp_input_local_match+0x32>
 8014206:	4b23      	ldr	r3, [pc, #140]	@ (8014294 <udp_input_local_match+0xb4>)
 8014208:	2288      	movs	r2, #136	@ 0x88
 801420a:	4925      	ldr	r1, [pc, #148]	@ (80142a0 <udp_input_local_match+0xc0>)
 801420c:	4823      	ldr	r0, [pc, #140]	@ (801429c <udp_input_local_match+0xbc>)
 801420e:	f000 fa8f 	bl	8014730 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	7a1b      	ldrb	r3, [r3, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d00b      	beq.n	8014232 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	7a1a      	ldrb	r2, [r3, #8]
 801421e:	4b21      	ldr	r3, [pc, #132]	@ (80142a4 <udp_input_local_match+0xc4>)
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014226:	3301      	adds	r3, #1
 8014228:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801422a:	429a      	cmp	r2, r3
 801422c:	d001      	beq.n	8014232 <udp_input_local_match+0x52>
    return 0;
 801422e:	2300      	movs	r3, #0
 8014230:	e02b      	b.n	801428a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014232:	79fb      	ldrb	r3, [r7, #7]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d018      	beq.n	801426a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d013      	beq.n	8014266 <udp_input_local_match+0x86>
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00f      	beq.n	8014266 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014246:	4b17      	ldr	r3, [pc, #92]	@ (80142a4 <udp_input_local_match+0xc4>)
 8014248:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801424a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801424e:	d00a      	beq.n	8014266 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	4b13      	ldr	r3, [pc, #76]	@ (80142a4 <udp_input_local_match+0xc4>)
 8014256:	695b      	ldr	r3, [r3, #20]
 8014258:	405a      	eors	r2, r3
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	3308      	adds	r3, #8
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014262:	2b00      	cmp	r3, #0
 8014264:	d110      	bne.n	8014288 <udp_input_local_match+0xa8>
          return 1;
 8014266:	2301      	movs	r3, #1
 8014268:	e00f      	b.n	801428a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d009      	beq.n	8014284 <udp_input_local_match+0xa4>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d005      	beq.n	8014284 <udp_input_local_match+0xa4>
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	4b09      	ldr	r3, [pc, #36]	@ (80142a4 <udp_input_local_match+0xc4>)
 801427e:	695b      	ldr	r3, [r3, #20]
 8014280:	429a      	cmp	r2, r3
 8014282:	d101      	bne.n	8014288 <udp_input_local_match+0xa8>
        return 1;
 8014284:	2301      	movs	r3, #1
 8014286:	e000      	b.n	801428a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	0801806c 	.word	0x0801806c
 8014298:	080180c8 	.word	0x080180c8
 801429c:	080180ec 	.word	0x080180ec
 80142a0:	08018114 	.word	0x08018114
 80142a4:	24008e60 	.word	0x24008e60

080142a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80142a8:	b590      	push	{r4, r7, lr}
 80142aa:	b08d      	sub	sp, #52	@ 0x34
 80142ac:	af02      	add	r7, sp, #8
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d105      	bne.n	80142c8 <udp_input+0x20>
 80142bc:	4b7c      	ldr	r3, [pc, #496]	@ (80144b0 <udp_input+0x208>)
 80142be:	22cf      	movs	r2, #207	@ 0xcf
 80142c0:	497c      	ldr	r1, [pc, #496]	@ (80144b4 <udp_input+0x20c>)
 80142c2:	487d      	ldr	r0, [pc, #500]	@ (80144b8 <udp_input+0x210>)
 80142c4:	f000 fa34 	bl	8014730 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d105      	bne.n	80142da <udp_input+0x32>
 80142ce:	4b78      	ldr	r3, [pc, #480]	@ (80144b0 <udp_input+0x208>)
 80142d0:	22d0      	movs	r2, #208	@ 0xd0
 80142d2:	497a      	ldr	r1, [pc, #488]	@ (80144bc <udp_input+0x214>)
 80142d4:	4878      	ldr	r0, [pc, #480]	@ (80144b8 <udp_input+0x210>)
 80142d6:	f000 fa2b 	bl	8014730 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	895b      	ldrh	r3, [r3, #10]
 80142de:	2b07      	cmp	r3, #7
 80142e0:	d803      	bhi.n	80142ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7f9 ff40 	bl	800e168 <pbuf_free>
    goto end;
 80142e8:	e0de      	b.n	80144a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80142f0:	4b73      	ldr	r3, [pc, #460]	@ (80144c0 <udp_input+0x218>)
 80142f2:	695b      	ldr	r3, [r3, #20]
 80142f4:	4a72      	ldr	r2, [pc, #456]	@ (80144c0 <udp_input+0x218>)
 80142f6:	6812      	ldr	r2, [r2, #0]
 80142f8:	4611      	mov	r1, r2
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7f7 fd1e 	bl	800bd3c <ip4_addr_isbroadcast_u32>
 8014300:	4603      	mov	r3, r0
 8014302:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	881b      	ldrh	r3, [r3, #0]
 8014308:	b29b      	uxth	r3, r3
 801430a:	4618      	mov	r0, r3
 801430c:	f7f5 ffa6 	bl	800a25c <lwip_htons>
 8014310:	4603      	mov	r3, r0
 8014312:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	885b      	ldrh	r3, [r3, #2]
 8014318:	b29b      	uxth	r3, r3
 801431a:	4618      	mov	r0, r3
 801431c:	f7f5 ff9e 	bl	800a25c <lwip_htons>
 8014320:	4603      	mov	r3, r0
 8014322:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014324:	2300      	movs	r3, #0
 8014326:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014328:	2300      	movs	r3, #0
 801432a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801432c:	2300      	movs	r3, #0
 801432e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014330:	4b64      	ldr	r3, [pc, #400]	@ (80144c4 <udp_input+0x21c>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	627b      	str	r3, [r7, #36]	@ 0x24
 8014336:	e054      	b.n	80143e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801433a:	8a5b      	ldrh	r3, [r3, #18]
 801433c:	89fa      	ldrh	r2, [r7, #14]
 801433e:	429a      	cmp	r2, r3
 8014340:	d14a      	bne.n	80143d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014342:	7cfb      	ldrb	r3, [r7, #19]
 8014344:	461a      	mov	r2, r3
 8014346:	6839      	ldr	r1, [r7, #0]
 8014348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801434a:	f7ff ff49 	bl	80141e0 <udp_input_local_match>
 801434e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014350:	2b00      	cmp	r3, #0
 8014352:	d041      	beq.n	80143d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014356:	7c1b      	ldrb	r3, [r3, #16]
 8014358:	f003 0304 	and.w	r3, r3, #4
 801435c:	2b00      	cmp	r3, #0
 801435e:	d11d      	bne.n	801439c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d102      	bne.n	801436c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014368:	61fb      	str	r3, [r7, #28]
 801436a:	e017      	b.n	801439c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801436c:	7cfb      	ldrb	r3, [r7, #19]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d014      	beq.n	801439c <udp_input+0xf4>
 8014372:	4b53      	ldr	r3, [pc, #332]	@ (80144c0 <udp_input+0x218>)
 8014374:	695b      	ldr	r3, [r3, #20]
 8014376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801437a:	d10f      	bne.n	801439c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	3304      	adds	r3, #4
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	429a      	cmp	r2, r3
 8014388:	d008      	beq.n	801439c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	3304      	adds	r3, #4
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	429a      	cmp	r2, r3
 8014396:	d101      	bne.n	801439c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439e:	8a9b      	ldrh	r3, [r3, #20]
 80143a0:	8a3a      	ldrh	r2, [r7, #16]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d118      	bne.n	80143d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80143a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d005      	beq.n	80143ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80143ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b0:	685a      	ldr	r2, [r3, #4]
 80143b2:	4b43      	ldr	r3, [pc, #268]	@ (80144c0 <udp_input+0x218>)
 80143b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d10e      	bne.n	80143d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80143ba:	6a3b      	ldr	r3, [r7, #32]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d014      	beq.n	80143ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80143c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143c2:	68da      	ldr	r2, [r3, #12]
 80143c4:	6a3b      	ldr	r3, [r7, #32]
 80143c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80143c8:	4b3e      	ldr	r3, [pc, #248]	@ (80144c4 <udp_input+0x21c>)
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80143d0:	4a3c      	ldr	r2, [pc, #240]	@ (80144c4 <udp_input+0x21c>)
 80143d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80143d6:	e008      	b.n	80143ea <udp_input+0x142>
      }
    }

    prev = pcb;
 80143d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80143dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80143e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1a7      	bne.n	8014338 <udp_input+0x90>
 80143e8:	e000      	b.n	80143ec <udp_input+0x144>
        break;
 80143ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80143ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d101      	bne.n	80143f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80143f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <udp_input+0x15a>
    for_us = 1;
 80143fc:	2301      	movs	r3, #1
 80143fe:	76fb      	strb	r3, [r7, #27]
 8014400:	e00a      	b.n	8014418 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	3304      	adds	r3, #4
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	4b2d      	ldr	r3, [pc, #180]	@ (80144c0 <udp_input+0x218>)
 801440a:	695b      	ldr	r3, [r3, #20]
 801440c:	429a      	cmp	r2, r3
 801440e:	bf0c      	ite	eq
 8014410:	2301      	moveq	r3, #1
 8014412:	2300      	movne	r3, #0
 8014414:	b2db      	uxtb	r3, r3
 8014416:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014418:	7efb      	ldrb	r3, [r7, #27]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d041      	beq.n	80144a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801441e:	2108      	movs	r1, #8
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f7f9 fe1b 	bl	800e05c <pbuf_remove_header>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d00a      	beq.n	8014442 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801442c:	4b20      	ldr	r3, [pc, #128]	@ (80144b0 <udp_input+0x208>)
 801442e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014432:	4925      	ldr	r1, [pc, #148]	@ (80144c8 <udp_input+0x220>)
 8014434:	4820      	ldr	r0, [pc, #128]	@ (80144b8 <udp_input+0x210>)
 8014436:	f000 f97b 	bl	8014730 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7f9 fe94 	bl	800e168 <pbuf_free>
      goto end;
 8014440:	e032      	b.n	80144a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014444:	2b00      	cmp	r3, #0
 8014446:	d012      	beq.n	801446e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801444a:	699b      	ldr	r3, [r3, #24]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d00a      	beq.n	8014466 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014452:	699c      	ldr	r4, [r3, #24]
 8014454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014456:	69d8      	ldr	r0, [r3, #28]
 8014458:	8a3b      	ldrh	r3, [r7, #16]
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	4b1b      	ldr	r3, [pc, #108]	@ (80144cc <udp_input+0x224>)
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014462:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014464:	e021      	b.n	80144aa <udp_input+0x202>
        pbuf_free(p);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7f9 fe7e 	bl	800e168 <pbuf_free>
        goto end;
 801446c:	e01c      	b.n	80144a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801446e:	7cfb      	ldrb	r3, [r7, #19]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d112      	bne.n	801449a <udp_input+0x1f2>
 8014474:	4b12      	ldr	r3, [pc, #72]	@ (80144c0 <udp_input+0x218>)
 8014476:	695b      	ldr	r3, [r3, #20]
 8014478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801447c:	2be0      	cmp	r3, #224	@ 0xe0
 801447e:	d00c      	beq.n	801449a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014480:	4b0f      	ldr	r3, [pc, #60]	@ (80144c0 <udp_input+0x218>)
 8014482:	899b      	ldrh	r3, [r3, #12]
 8014484:	3308      	adds	r3, #8
 8014486:	b29b      	uxth	r3, r3
 8014488:	b21b      	sxth	r3, r3
 801448a:	4619      	mov	r1, r3
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7f9 fe58 	bl	800e142 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014492:	2103      	movs	r1, #3
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7f7 f853 	bl	800b540 <icmp_dest_unreach>
      pbuf_free(p);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7f9 fe64 	bl	800e168 <pbuf_free>
  return;
 80144a0:	e003      	b.n	80144aa <udp_input+0x202>
    pbuf_free(p);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7f9 fe60 	bl	800e168 <pbuf_free>
  return;
 80144a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80144aa:	372c      	adds	r7, #44	@ 0x2c
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd90      	pop	{r4, r7, pc}
 80144b0:	0801806c 	.word	0x0801806c
 80144b4:	0801813c 	.word	0x0801813c
 80144b8:	080180ec 	.word	0x080180ec
 80144bc:	08018154 	.word	0x08018154
 80144c0:	24008e60 	.word	0x24008e60
 80144c4:	2400f99c 	.word	0x2400f99c
 80144c8:	08018170 	.word	0x08018170
 80144cc:	24008e70 	.word	0x24008e70

080144d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b085      	sub	sp, #20
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01e      	beq.n	801451e <udp_netif_ip_addr_changed+0x4e>
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d01a      	beq.n	801451e <udp_netif_ip_addr_changed+0x4e>
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d017      	beq.n	801451e <udp_netif_ip_addr_changed+0x4e>
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d013      	beq.n	801451e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80144f6:	4b0d      	ldr	r3, [pc, #52]	@ (801452c <udp_netif_ip_addr_changed+0x5c>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	60fb      	str	r3, [r7, #12]
 80144fc:	e00c      	b.n	8014518 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	681a      	ldr	r2, [r3, #0]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	429a      	cmp	r2, r3
 8014508:	d103      	bne.n	8014512 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d1ef      	bne.n	80144fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801451e:	bf00      	nop
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop
 801452c:	2400f99c 	.word	0x2400f99c

08014530 <rand>:
 8014530:	4b16      	ldr	r3, [pc, #88]	@ (801458c <rand+0x5c>)
 8014532:	b510      	push	{r4, lr}
 8014534:	681c      	ldr	r4, [r3, #0]
 8014536:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014538:	b9b3      	cbnz	r3, 8014568 <rand+0x38>
 801453a:	2018      	movs	r0, #24
 801453c:	f000 faa8 	bl	8014a90 <malloc>
 8014540:	4602      	mov	r2, r0
 8014542:	6320      	str	r0, [r4, #48]	@ 0x30
 8014544:	b920      	cbnz	r0, 8014550 <rand+0x20>
 8014546:	4b12      	ldr	r3, [pc, #72]	@ (8014590 <rand+0x60>)
 8014548:	4812      	ldr	r0, [pc, #72]	@ (8014594 <rand+0x64>)
 801454a:	2152      	movs	r1, #82	@ 0x52
 801454c:	f000 fa38 	bl	80149c0 <__assert_func>
 8014550:	4911      	ldr	r1, [pc, #68]	@ (8014598 <rand+0x68>)
 8014552:	4b12      	ldr	r3, [pc, #72]	@ (801459c <rand+0x6c>)
 8014554:	e9c0 1300 	strd	r1, r3, [r0]
 8014558:	4b11      	ldr	r3, [pc, #68]	@ (80145a0 <rand+0x70>)
 801455a:	6083      	str	r3, [r0, #8]
 801455c:	230b      	movs	r3, #11
 801455e:	8183      	strh	r3, [r0, #12]
 8014560:	2100      	movs	r1, #0
 8014562:	2001      	movs	r0, #1
 8014564:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014568:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801456a:	480e      	ldr	r0, [pc, #56]	@ (80145a4 <rand+0x74>)
 801456c:	690b      	ldr	r3, [r1, #16]
 801456e:	694c      	ldr	r4, [r1, #20]
 8014570:	4a0d      	ldr	r2, [pc, #52]	@ (80145a8 <rand+0x78>)
 8014572:	4358      	muls	r0, r3
 8014574:	fb02 0004 	mla	r0, r2, r4, r0
 8014578:	fba3 3202 	umull	r3, r2, r3, r2
 801457c:	3301      	adds	r3, #1
 801457e:	eb40 0002 	adc.w	r0, r0, r2
 8014582:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014586:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801458a:	bd10      	pop	{r4, pc}
 801458c:	2400005c 	.word	0x2400005c
 8014590:	08018568 	.word	0x08018568
 8014594:	0801857f 	.word	0x0801857f
 8014598:	abcd330e 	.word	0xabcd330e
 801459c:	e66d1234 	.word	0xe66d1234
 80145a0:	0005deec 	.word	0x0005deec
 80145a4:	5851f42d 	.word	0x5851f42d
 80145a8:	4c957f2d 	.word	0x4c957f2d

080145ac <std>:
 80145ac:	2300      	movs	r3, #0
 80145ae:	b510      	push	{r4, lr}
 80145b0:	4604      	mov	r4, r0
 80145b2:	e9c0 3300 	strd	r3, r3, [r0]
 80145b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145ba:	6083      	str	r3, [r0, #8]
 80145bc:	8181      	strh	r1, [r0, #12]
 80145be:	6643      	str	r3, [r0, #100]	@ 0x64
 80145c0:	81c2      	strh	r2, [r0, #14]
 80145c2:	6183      	str	r3, [r0, #24]
 80145c4:	4619      	mov	r1, r3
 80145c6:	2208      	movs	r2, #8
 80145c8:	305c      	adds	r0, #92	@ 0x5c
 80145ca:	f000 f916 	bl	80147fa <memset>
 80145ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014604 <std+0x58>)
 80145d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80145d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014608 <std+0x5c>)
 80145d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80145d6:	4b0d      	ldr	r3, [pc, #52]	@ (801460c <std+0x60>)
 80145d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80145da:	4b0d      	ldr	r3, [pc, #52]	@ (8014610 <std+0x64>)
 80145dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80145de:	4b0d      	ldr	r3, [pc, #52]	@ (8014614 <std+0x68>)
 80145e0:	6224      	str	r4, [r4, #32]
 80145e2:	429c      	cmp	r4, r3
 80145e4:	d006      	beq.n	80145f4 <std+0x48>
 80145e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145ea:	4294      	cmp	r4, r2
 80145ec:	d002      	beq.n	80145f4 <std+0x48>
 80145ee:	33d0      	adds	r3, #208	@ 0xd0
 80145f0:	429c      	cmp	r4, r3
 80145f2:	d105      	bne.n	8014600 <std+0x54>
 80145f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80145f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145fc:	f000 b9ce 	b.w	801499c <__retarget_lock_init_recursive>
 8014600:	bd10      	pop	{r4, pc}
 8014602:	bf00      	nop
 8014604:	08014755 	.word	0x08014755
 8014608:	08014777 	.word	0x08014777
 801460c:	080147af 	.word	0x080147af
 8014610:	080147d3 	.word	0x080147d3
 8014614:	2400f9a0 	.word	0x2400f9a0

08014618 <stdio_exit_handler>:
 8014618:	4a02      	ldr	r2, [pc, #8]	@ (8014624 <stdio_exit_handler+0xc>)
 801461a:	4903      	ldr	r1, [pc, #12]	@ (8014628 <stdio_exit_handler+0x10>)
 801461c:	4803      	ldr	r0, [pc, #12]	@ (801462c <stdio_exit_handler+0x14>)
 801461e:	f000 b869 	b.w	80146f4 <_fwalk_sglue>
 8014622:	bf00      	nop
 8014624:	24000050 	.word	0x24000050
 8014628:	080152a1 	.word	0x080152a1
 801462c:	24000060 	.word	0x24000060

08014630 <cleanup_stdio>:
 8014630:	6841      	ldr	r1, [r0, #4]
 8014632:	4b0c      	ldr	r3, [pc, #48]	@ (8014664 <cleanup_stdio+0x34>)
 8014634:	4299      	cmp	r1, r3
 8014636:	b510      	push	{r4, lr}
 8014638:	4604      	mov	r4, r0
 801463a:	d001      	beq.n	8014640 <cleanup_stdio+0x10>
 801463c:	f000 fe30 	bl	80152a0 <_fflush_r>
 8014640:	68a1      	ldr	r1, [r4, #8]
 8014642:	4b09      	ldr	r3, [pc, #36]	@ (8014668 <cleanup_stdio+0x38>)
 8014644:	4299      	cmp	r1, r3
 8014646:	d002      	beq.n	801464e <cleanup_stdio+0x1e>
 8014648:	4620      	mov	r0, r4
 801464a:	f000 fe29 	bl	80152a0 <_fflush_r>
 801464e:	68e1      	ldr	r1, [r4, #12]
 8014650:	4b06      	ldr	r3, [pc, #24]	@ (801466c <cleanup_stdio+0x3c>)
 8014652:	4299      	cmp	r1, r3
 8014654:	d004      	beq.n	8014660 <cleanup_stdio+0x30>
 8014656:	4620      	mov	r0, r4
 8014658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801465c:	f000 be20 	b.w	80152a0 <_fflush_r>
 8014660:	bd10      	pop	{r4, pc}
 8014662:	bf00      	nop
 8014664:	2400f9a0 	.word	0x2400f9a0
 8014668:	2400fa08 	.word	0x2400fa08
 801466c:	2400fa70 	.word	0x2400fa70

08014670 <global_stdio_init.part.0>:
 8014670:	b510      	push	{r4, lr}
 8014672:	4b0b      	ldr	r3, [pc, #44]	@ (80146a0 <global_stdio_init.part.0+0x30>)
 8014674:	4c0b      	ldr	r4, [pc, #44]	@ (80146a4 <global_stdio_init.part.0+0x34>)
 8014676:	4a0c      	ldr	r2, [pc, #48]	@ (80146a8 <global_stdio_init.part.0+0x38>)
 8014678:	601a      	str	r2, [r3, #0]
 801467a:	4620      	mov	r0, r4
 801467c:	2200      	movs	r2, #0
 801467e:	2104      	movs	r1, #4
 8014680:	f7ff ff94 	bl	80145ac <std>
 8014684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014688:	2201      	movs	r2, #1
 801468a:	2109      	movs	r1, #9
 801468c:	f7ff ff8e 	bl	80145ac <std>
 8014690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014694:	2202      	movs	r2, #2
 8014696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801469a:	2112      	movs	r1, #18
 801469c:	f7ff bf86 	b.w	80145ac <std>
 80146a0:	2400fad8 	.word	0x2400fad8
 80146a4:	2400f9a0 	.word	0x2400f9a0
 80146a8:	08014619 	.word	0x08014619

080146ac <__sfp_lock_acquire>:
 80146ac:	4801      	ldr	r0, [pc, #4]	@ (80146b4 <__sfp_lock_acquire+0x8>)
 80146ae:	f000 b976 	b.w	801499e <__retarget_lock_acquire_recursive>
 80146b2:	bf00      	nop
 80146b4:	2400fae1 	.word	0x2400fae1

080146b8 <__sfp_lock_release>:
 80146b8:	4801      	ldr	r0, [pc, #4]	@ (80146c0 <__sfp_lock_release+0x8>)
 80146ba:	f000 b971 	b.w	80149a0 <__retarget_lock_release_recursive>
 80146be:	bf00      	nop
 80146c0:	2400fae1 	.word	0x2400fae1

080146c4 <__sinit>:
 80146c4:	b510      	push	{r4, lr}
 80146c6:	4604      	mov	r4, r0
 80146c8:	f7ff fff0 	bl	80146ac <__sfp_lock_acquire>
 80146cc:	6a23      	ldr	r3, [r4, #32]
 80146ce:	b11b      	cbz	r3, 80146d8 <__sinit+0x14>
 80146d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d4:	f7ff bff0 	b.w	80146b8 <__sfp_lock_release>
 80146d8:	4b04      	ldr	r3, [pc, #16]	@ (80146ec <__sinit+0x28>)
 80146da:	6223      	str	r3, [r4, #32]
 80146dc:	4b04      	ldr	r3, [pc, #16]	@ (80146f0 <__sinit+0x2c>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1f5      	bne.n	80146d0 <__sinit+0xc>
 80146e4:	f7ff ffc4 	bl	8014670 <global_stdio_init.part.0>
 80146e8:	e7f2      	b.n	80146d0 <__sinit+0xc>
 80146ea:	bf00      	nop
 80146ec:	08014631 	.word	0x08014631
 80146f0:	2400fad8 	.word	0x2400fad8

080146f4 <_fwalk_sglue>:
 80146f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f8:	4607      	mov	r7, r0
 80146fa:	4688      	mov	r8, r1
 80146fc:	4614      	mov	r4, r2
 80146fe:	2600      	movs	r6, #0
 8014700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014704:	f1b9 0901 	subs.w	r9, r9, #1
 8014708:	d505      	bpl.n	8014716 <_fwalk_sglue+0x22>
 801470a:	6824      	ldr	r4, [r4, #0]
 801470c:	2c00      	cmp	r4, #0
 801470e:	d1f7      	bne.n	8014700 <_fwalk_sglue+0xc>
 8014710:	4630      	mov	r0, r6
 8014712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014716:	89ab      	ldrh	r3, [r5, #12]
 8014718:	2b01      	cmp	r3, #1
 801471a:	d907      	bls.n	801472c <_fwalk_sglue+0x38>
 801471c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014720:	3301      	adds	r3, #1
 8014722:	d003      	beq.n	801472c <_fwalk_sglue+0x38>
 8014724:	4629      	mov	r1, r5
 8014726:	4638      	mov	r0, r7
 8014728:	47c0      	blx	r8
 801472a:	4306      	orrs	r6, r0
 801472c:	3568      	adds	r5, #104	@ 0x68
 801472e:	e7e9      	b.n	8014704 <_fwalk_sglue+0x10>

08014730 <iprintf>:
 8014730:	b40f      	push	{r0, r1, r2, r3}
 8014732:	b507      	push	{r0, r1, r2, lr}
 8014734:	4906      	ldr	r1, [pc, #24]	@ (8014750 <iprintf+0x20>)
 8014736:	ab04      	add	r3, sp, #16
 8014738:	6808      	ldr	r0, [r1, #0]
 801473a:	f853 2b04 	ldr.w	r2, [r3], #4
 801473e:	6881      	ldr	r1, [r0, #8]
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	f000 fa85 	bl	8014c50 <_vfiprintf_r>
 8014746:	b003      	add	sp, #12
 8014748:	f85d eb04 	ldr.w	lr, [sp], #4
 801474c:	b004      	add	sp, #16
 801474e:	4770      	bx	lr
 8014750:	2400005c 	.word	0x2400005c

08014754 <__sread>:
 8014754:	b510      	push	{r4, lr}
 8014756:	460c      	mov	r4, r1
 8014758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475c:	f000 f8d6 	bl	801490c <_read_r>
 8014760:	2800      	cmp	r0, #0
 8014762:	bfab      	itete	ge
 8014764:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014766:	89a3      	ldrhlt	r3, [r4, #12]
 8014768:	181b      	addge	r3, r3, r0
 801476a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801476e:	bfac      	ite	ge
 8014770:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014772:	81a3      	strhlt	r3, [r4, #12]
 8014774:	bd10      	pop	{r4, pc}

08014776 <__swrite>:
 8014776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477a:	461f      	mov	r7, r3
 801477c:	898b      	ldrh	r3, [r1, #12]
 801477e:	05db      	lsls	r3, r3, #23
 8014780:	4605      	mov	r5, r0
 8014782:	460c      	mov	r4, r1
 8014784:	4616      	mov	r6, r2
 8014786:	d505      	bpl.n	8014794 <__swrite+0x1e>
 8014788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801478c:	2302      	movs	r3, #2
 801478e:	2200      	movs	r2, #0
 8014790:	f000 f8aa 	bl	80148e8 <_lseek_r>
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801479a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801479e:	81a3      	strh	r3, [r4, #12]
 80147a0:	4632      	mov	r2, r6
 80147a2:	463b      	mov	r3, r7
 80147a4:	4628      	mov	r0, r5
 80147a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147aa:	f000 b8c1 	b.w	8014930 <_write_r>

080147ae <__sseek>:
 80147ae:	b510      	push	{r4, lr}
 80147b0:	460c      	mov	r4, r1
 80147b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147b6:	f000 f897 	bl	80148e8 <_lseek_r>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	89a3      	ldrh	r3, [r4, #12]
 80147be:	bf15      	itete	ne
 80147c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80147c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80147c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147ca:	81a3      	strheq	r3, [r4, #12]
 80147cc:	bf18      	it	ne
 80147ce:	81a3      	strhne	r3, [r4, #12]
 80147d0:	bd10      	pop	{r4, pc}

080147d2 <__sclose>:
 80147d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147d6:	f000 b819 	b.w	801480c <_close_r>

080147da <memcmp>:
 80147da:	b510      	push	{r4, lr}
 80147dc:	3901      	subs	r1, #1
 80147de:	4402      	add	r2, r0
 80147e0:	4290      	cmp	r0, r2
 80147e2:	d101      	bne.n	80147e8 <memcmp+0xe>
 80147e4:	2000      	movs	r0, #0
 80147e6:	e005      	b.n	80147f4 <memcmp+0x1a>
 80147e8:	7803      	ldrb	r3, [r0, #0]
 80147ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80147ee:	42a3      	cmp	r3, r4
 80147f0:	d001      	beq.n	80147f6 <memcmp+0x1c>
 80147f2:	1b18      	subs	r0, r3, r4
 80147f4:	bd10      	pop	{r4, pc}
 80147f6:	3001      	adds	r0, #1
 80147f8:	e7f2      	b.n	80147e0 <memcmp+0x6>

080147fa <memset>:
 80147fa:	4402      	add	r2, r0
 80147fc:	4603      	mov	r3, r0
 80147fe:	4293      	cmp	r3, r2
 8014800:	d100      	bne.n	8014804 <memset+0xa>
 8014802:	4770      	bx	lr
 8014804:	f803 1b01 	strb.w	r1, [r3], #1
 8014808:	e7f9      	b.n	80147fe <memset+0x4>
	...

0801480c <_close_r>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	4d06      	ldr	r5, [pc, #24]	@ (8014828 <_close_r+0x1c>)
 8014810:	2300      	movs	r3, #0
 8014812:	4604      	mov	r4, r0
 8014814:	4608      	mov	r0, r1
 8014816:	602b      	str	r3, [r5, #0]
 8014818:	f7ec fb88 	bl	8000f2c <_close>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_close_r+0x1a>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_close_r+0x1a>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	2400fadc 	.word	0x2400fadc

0801482c <_reclaim_reent>:
 801482c:	4b2d      	ldr	r3, [pc, #180]	@ (80148e4 <_reclaim_reent+0xb8>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4283      	cmp	r3, r0
 8014832:	b570      	push	{r4, r5, r6, lr}
 8014834:	4604      	mov	r4, r0
 8014836:	d053      	beq.n	80148e0 <_reclaim_reent+0xb4>
 8014838:	69c3      	ldr	r3, [r0, #28]
 801483a:	b31b      	cbz	r3, 8014884 <_reclaim_reent+0x58>
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	b163      	cbz	r3, 801485a <_reclaim_reent+0x2e>
 8014840:	2500      	movs	r5, #0
 8014842:	69e3      	ldr	r3, [r4, #28]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	5959      	ldr	r1, [r3, r5]
 8014848:	b9b1      	cbnz	r1, 8014878 <_reclaim_reent+0x4c>
 801484a:	3504      	adds	r5, #4
 801484c:	2d80      	cmp	r5, #128	@ 0x80
 801484e:	d1f8      	bne.n	8014842 <_reclaim_reent+0x16>
 8014850:	69e3      	ldr	r3, [r4, #28]
 8014852:	4620      	mov	r0, r4
 8014854:	68d9      	ldr	r1, [r3, #12]
 8014856:	f000 f8d1 	bl	80149fc <_free_r>
 801485a:	69e3      	ldr	r3, [r4, #28]
 801485c:	6819      	ldr	r1, [r3, #0]
 801485e:	b111      	cbz	r1, 8014866 <_reclaim_reent+0x3a>
 8014860:	4620      	mov	r0, r4
 8014862:	f000 f8cb 	bl	80149fc <_free_r>
 8014866:	69e3      	ldr	r3, [r4, #28]
 8014868:	689d      	ldr	r5, [r3, #8]
 801486a:	b15d      	cbz	r5, 8014884 <_reclaim_reent+0x58>
 801486c:	4629      	mov	r1, r5
 801486e:	4620      	mov	r0, r4
 8014870:	682d      	ldr	r5, [r5, #0]
 8014872:	f000 f8c3 	bl	80149fc <_free_r>
 8014876:	e7f8      	b.n	801486a <_reclaim_reent+0x3e>
 8014878:	680e      	ldr	r6, [r1, #0]
 801487a:	4620      	mov	r0, r4
 801487c:	f000 f8be 	bl	80149fc <_free_r>
 8014880:	4631      	mov	r1, r6
 8014882:	e7e1      	b.n	8014848 <_reclaim_reent+0x1c>
 8014884:	6961      	ldr	r1, [r4, #20]
 8014886:	b111      	cbz	r1, 801488e <_reclaim_reent+0x62>
 8014888:	4620      	mov	r0, r4
 801488a:	f000 f8b7 	bl	80149fc <_free_r>
 801488e:	69e1      	ldr	r1, [r4, #28]
 8014890:	b111      	cbz	r1, 8014898 <_reclaim_reent+0x6c>
 8014892:	4620      	mov	r0, r4
 8014894:	f000 f8b2 	bl	80149fc <_free_r>
 8014898:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801489a:	b111      	cbz	r1, 80148a2 <_reclaim_reent+0x76>
 801489c:	4620      	mov	r0, r4
 801489e:	f000 f8ad 	bl	80149fc <_free_r>
 80148a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148a4:	b111      	cbz	r1, 80148ac <_reclaim_reent+0x80>
 80148a6:	4620      	mov	r0, r4
 80148a8:	f000 f8a8 	bl	80149fc <_free_r>
 80148ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80148ae:	b111      	cbz	r1, 80148b6 <_reclaim_reent+0x8a>
 80148b0:	4620      	mov	r0, r4
 80148b2:	f000 f8a3 	bl	80149fc <_free_r>
 80148b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80148b8:	b111      	cbz	r1, 80148c0 <_reclaim_reent+0x94>
 80148ba:	4620      	mov	r0, r4
 80148bc:	f000 f89e 	bl	80149fc <_free_r>
 80148c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80148c2:	b111      	cbz	r1, 80148ca <_reclaim_reent+0x9e>
 80148c4:	4620      	mov	r0, r4
 80148c6:	f000 f899 	bl	80149fc <_free_r>
 80148ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80148cc:	b111      	cbz	r1, 80148d4 <_reclaim_reent+0xa8>
 80148ce:	4620      	mov	r0, r4
 80148d0:	f000 f894 	bl	80149fc <_free_r>
 80148d4:	6a23      	ldr	r3, [r4, #32]
 80148d6:	b11b      	cbz	r3, 80148e0 <_reclaim_reent+0xb4>
 80148d8:	4620      	mov	r0, r4
 80148da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148de:	4718      	bx	r3
 80148e0:	bd70      	pop	{r4, r5, r6, pc}
 80148e2:	bf00      	nop
 80148e4:	2400005c 	.word	0x2400005c

080148e8 <_lseek_r>:
 80148e8:	b538      	push	{r3, r4, r5, lr}
 80148ea:	4d07      	ldr	r5, [pc, #28]	@ (8014908 <_lseek_r+0x20>)
 80148ec:	4604      	mov	r4, r0
 80148ee:	4608      	mov	r0, r1
 80148f0:	4611      	mov	r1, r2
 80148f2:	2200      	movs	r2, #0
 80148f4:	602a      	str	r2, [r5, #0]
 80148f6:	461a      	mov	r2, r3
 80148f8:	f7ec fb3f 	bl	8000f7a <_lseek>
 80148fc:	1c43      	adds	r3, r0, #1
 80148fe:	d102      	bne.n	8014906 <_lseek_r+0x1e>
 8014900:	682b      	ldr	r3, [r5, #0]
 8014902:	b103      	cbz	r3, 8014906 <_lseek_r+0x1e>
 8014904:	6023      	str	r3, [r4, #0]
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	2400fadc 	.word	0x2400fadc

0801490c <_read_r>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	4d07      	ldr	r5, [pc, #28]	@ (801492c <_read_r+0x20>)
 8014910:	4604      	mov	r4, r0
 8014912:	4608      	mov	r0, r1
 8014914:	4611      	mov	r1, r2
 8014916:	2200      	movs	r2, #0
 8014918:	602a      	str	r2, [r5, #0]
 801491a:	461a      	mov	r2, r3
 801491c:	f7ec facd 	bl	8000eba <_read>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	d102      	bne.n	801492a <_read_r+0x1e>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	b103      	cbz	r3, 801492a <_read_r+0x1e>
 8014928:	6023      	str	r3, [r4, #0]
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	2400fadc 	.word	0x2400fadc

08014930 <_write_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4d07      	ldr	r5, [pc, #28]	@ (8014950 <_write_r+0x20>)
 8014934:	4604      	mov	r4, r0
 8014936:	4608      	mov	r0, r1
 8014938:	4611      	mov	r1, r2
 801493a:	2200      	movs	r2, #0
 801493c:	602a      	str	r2, [r5, #0]
 801493e:	461a      	mov	r2, r3
 8014940:	f7ec fad8 	bl	8000ef4 <_write>
 8014944:	1c43      	adds	r3, r0, #1
 8014946:	d102      	bne.n	801494e <_write_r+0x1e>
 8014948:	682b      	ldr	r3, [r5, #0]
 801494a:	b103      	cbz	r3, 801494e <_write_r+0x1e>
 801494c:	6023      	str	r3, [r4, #0]
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	2400fadc 	.word	0x2400fadc

08014954 <__libc_init_array>:
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	4d0d      	ldr	r5, [pc, #52]	@ (801498c <__libc_init_array+0x38>)
 8014958:	4c0d      	ldr	r4, [pc, #52]	@ (8014990 <__libc_init_array+0x3c>)
 801495a:	1b64      	subs	r4, r4, r5
 801495c:	10a4      	asrs	r4, r4, #2
 801495e:	2600      	movs	r6, #0
 8014960:	42a6      	cmp	r6, r4
 8014962:	d109      	bne.n	8014978 <__libc_init_array+0x24>
 8014964:	4d0b      	ldr	r5, [pc, #44]	@ (8014994 <__libc_init_array+0x40>)
 8014966:	4c0c      	ldr	r4, [pc, #48]	@ (8014998 <__libc_init_array+0x44>)
 8014968:	f000 fe48 	bl	80155fc <_init>
 801496c:	1b64      	subs	r4, r4, r5
 801496e:	10a4      	asrs	r4, r4, #2
 8014970:	2600      	movs	r6, #0
 8014972:	42a6      	cmp	r6, r4
 8014974:	d105      	bne.n	8014982 <__libc_init_array+0x2e>
 8014976:	bd70      	pop	{r4, r5, r6, pc}
 8014978:	f855 3b04 	ldr.w	r3, [r5], #4
 801497c:	4798      	blx	r3
 801497e:	3601      	adds	r6, #1
 8014980:	e7ee      	b.n	8014960 <__libc_init_array+0xc>
 8014982:	f855 3b04 	ldr.w	r3, [r5], #4
 8014986:	4798      	blx	r3
 8014988:	3601      	adds	r6, #1
 801498a:	e7f2      	b.n	8014972 <__libc_init_array+0x1e>
 801498c:	08018650 	.word	0x08018650
 8014990:	08018650 	.word	0x08018650
 8014994:	08018650 	.word	0x08018650
 8014998:	08018654 	.word	0x08018654

0801499c <__retarget_lock_init_recursive>:
 801499c:	4770      	bx	lr

0801499e <__retarget_lock_acquire_recursive>:
 801499e:	4770      	bx	lr

080149a0 <__retarget_lock_release_recursive>:
 80149a0:	4770      	bx	lr

080149a2 <memcpy>:
 80149a2:	440a      	add	r2, r1
 80149a4:	4291      	cmp	r1, r2
 80149a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80149aa:	d100      	bne.n	80149ae <memcpy+0xc>
 80149ac:	4770      	bx	lr
 80149ae:	b510      	push	{r4, lr}
 80149b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149b8:	4291      	cmp	r1, r2
 80149ba:	d1f9      	bne.n	80149b0 <memcpy+0xe>
 80149bc:	bd10      	pop	{r4, pc}
	...

080149c0 <__assert_func>:
 80149c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149c2:	4614      	mov	r4, r2
 80149c4:	461a      	mov	r2, r3
 80149c6:	4b09      	ldr	r3, [pc, #36]	@ (80149ec <__assert_func+0x2c>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	4605      	mov	r5, r0
 80149cc:	68d8      	ldr	r0, [r3, #12]
 80149ce:	b14c      	cbz	r4, 80149e4 <__assert_func+0x24>
 80149d0:	4b07      	ldr	r3, [pc, #28]	@ (80149f0 <__assert_func+0x30>)
 80149d2:	9100      	str	r1, [sp, #0]
 80149d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149d8:	4906      	ldr	r1, [pc, #24]	@ (80149f4 <__assert_func+0x34>)
 80149da:	462b      	mov	r3, r5
 80149dc:	f000 fc88 	bl	80152f0 <fiprintf>
 80149e0:	f000 fd3c 	bl	801545c <abort>
 80149e4:	4b04      	ldr	r3, [pc, #16]	@ (80149f8 <__assert_func+0x38>)
 80149e6:	461c      	mov	r4, r3
 80149e8:	e7f3      	b.n	80149d2 <__assert_func+0x12>
 80149ea:	bf00      	nop
 80149ec:	2400005c 	.word	0x2400005c
 80149f0:	080185d7 	.word	0x080185d7
 80149f4:	080185e4 	.word	0x080185e4
 80149f8:	08018612 	.word	0x08018612

080149fc <_free_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4605      	mov	r5, r0
 8014a00:	2900      	cmp	r1, #0
 8014a02:	d041      	beq.n	8014a88 <_free_r+0x8c>
 8014a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a08:	1f0c      	subs	r4, r1, #4
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	bfb8      	it	lt
 8014a0e:	18e4      	addlt	r4, r4, r3
 8014a10:	f000 f8e8 	bl	8014be4 <__malloc_lock>
 8014a14:	4a1d      	ldr	r2, [pc, #116]	@ (8014a8c <_free_r+0x90>)
 8014a16:	6813      	ldr	r3, [r2, #0]
 8014a18:	b933      	cbnz	r3, 8014a28 <_free_r+0x2c>
 8014a1a:	6063      	str	r3, [r4, #4]
 8014a1c:	6014      	str	r4, [r2, #0]
 8014a1e:	4628      	mov	r0, r5
 8014a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a24:	f000 b8e4 	b.w	8014bf0 <__malloc_unlock>
 8014a28:	42a3      	cmp	r3, r4
 8014a2a:	d908      	bls.n	8014a3e <_free_r+0x42>
 8014a2c:	6820      	ldr	r0, [r4, #0]
 8014a2e:	1821      	adds	r1, r4, r0
 8014a30:	428b      	cmp	r3, r1
 8014a32:	bf01      	itttt	eq
 8014a34:	6819      	ldreq	r1, [r3, #0]
 8014a36:	685b      	ldreq	r3, [r3, #4]
 8014a38:	1809      	addeq	r1, r1, r0
 8014a3a:	6021      	streq	r1, [r4, #0]
 8014a3c:	e7ed      	b.n	8014a1a <_free_r+0x1e>
 8014a3e:	461a      	mov	r2, r3
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	b10b      	cbz	r3, 8014a48 <_free_r+0x4c>
 8014a44:	42a3      	cmp	r3, r4
 8014a46:	d9fa      	bls.n	8014a3e <_free_r+0x42>
 8014a48:	6811      	ldr	r1, [r2, #0]
 8014a4a:	1850      	adds	r0, r2, r1
 8014a4c:	42a0      	cmp	r0, r4
 8014a4e:	d10b      	bne.n	8014a68 <_free_r+0x6c>
 8014a50:	6820      	ldr	r0, [r4, #0]
 8014a52:	4401      	add	r1, r0
 8014a54:	1850      	adds	r0, r2, r1
 8014a56:	4283      	cmp	r3, r0
 8014a58:	6011      	str	r1, [r2, #0]
 8014a5a:	d1e0      	bne.n	8014a1e <_free_r+0x22>
 8014a5c:	6818      	ldr	r0, [r3, #0]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	6053      	str	r3, [r2, #4]
 8014a62:	4408      	add	r0, r1
 8014a64:	6010      	str	r0, [r2, #0]
 8014a66:	e7da      	b.n	8014a1e <_free_r+0x22>
 8014a68:	d902      	bls.n	8014a70 <_free_r+0x74>
 8014a6a:	230c      	movs	r3, #12
 8014a6c:	602b      	str	r3, [r5, #0]
 8014a6e:	e7d6      	b.n	8014a1e <_free_r+0x22>
 8014a70:	6820      	ldr	r0, [r4, #0]
 8014a72:	1821      	adds	r1, r4, r0
 8014a74:	428b      	cmp	r3, r1
 8014a76:	bf04      	itt	eq
 8014a78:	6819      	ldreq	r1, [r3, #0]
 8014a7a:	685b      	ldreq	r3, [r3, #4]
 8014a7c:	6063      	str	r3, [r4, #4]
 8014a7e:	bf04      	itt	eq
 8014a80:	1809      	addeq	r1, r1, r0
 8014a82:	6021      	streq	r1, [r4, #0]
 8014a84:	6054      	str	r4, [r2, #4]
 8014a86:	e7ca      	b.n	8014a1e <_free_r+0x22>
 8014a88:	bd38      	pop	{r3, r4, r5, pc}
 8014a8a:	bf00      	nop
 8014a8c:	2400fae8 	.word	0x2400fae8

08014a90 <malloc>:
 8014a90:	4b02      	ldr	r3, [pc, #8]	@ (8014a9c <malloc+0xc>)
 8014a92:	4601      	mov	r1, r0
 8014a94:	6818      	ldr	r0, [r3, #0]
 8014a96:	f000 b825 	b.w	8014ae4 <_malloc_r>
 8014a9a:	bf00      	nop
 8014a9c:	2400005c 	.word	0x2400005c

08014aa0 <sbrk_aligned>:
 8014aa0:	b570      	push	{r4, r5, r6, lr}
 8014aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8014ae0 <sbrk_aligned+0x40>)
 8014aa4:	460c      	mov	r4, r1
 8014aa6:	6831      	ldr	r1, [r6, #0]
 8014aa8:	4605      	mov	r5, r0
 8014aaa:	b911      	cbnz	r1, 8014ab2 <sbrk_aligned+0x12>
 8014aac:	f000 fcc6 	bl	801543c <_sbrk_r>
 8014ab0:	6030      	str	r0, [r6, #0]
 8014ab2:	4621      	mov	r1, r4
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	f000 fcc1 	bl	801543c <_sbrk_r>
 8014aba:	1c43      	adds	r3, r0, #1
 8014abc:	d103      	bne.n	8014ac6 <sbrk_aligned+0x26>
 8014abe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	bd70      	pop	{r4, r5, r6, pc}
 8014ac6:	1cc4      	adds	r4, r0, #3
 8014ac8:	f024 0403 	bic.w	r4, r4, #3
 8014acc:	42a0      	cmp	r0, r4
 8014ace:	d0f8      	beq.n	8014ac2 <sbrk_aligned+0x22>
 8014ad0:	1a21      	subs	r1, r4, r0
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	f000 fcb2 	bl	801543c <_sbrk_r>
 8014ad8:	3001      	adds	r0, #1
 8014ada:	d1f2      	bne.n	8014ac2 <sbrk_aligned+0x22>
 8014adc:	e7ef      	b.n	8014abe <sbrk_aligned+0x1e>
 8014ade:	bf00      	nop
 8014ae0:	2400fae4 	.word	0x2400fae4

08014ae4 <_malloc_r>:
 8014ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae8:	1ccd      	adds	r5, r1, #3
 8014aea:	f025 0503 	bic.w	r5, r5, #3
 8014aee:	3508      	adds	r5, #8
 8014af0:	2d0c      	cmp	r5, #12
 8014af2:	bf38      	it	cc
 8014af4:	250c      	movcc	r5, #12
 8014af6:	2d00      	cmp	r5, #0
 8014af8:	4606      	mov	r6, r0
 8014afa:	db01      	blt.n	8014b00 <_malloc_r+0x1c>
 8014afc:	42a9      	cmp	r1, r5
 8014afe:	d904      	bls.n	8014b0a <_malloc_r+0x26>
 8014b00:	230c      	movs	r3, #12
 8014b02:	6033      	str	r3, [r6, #0]
 8014b04:	2000      	movs	r0, #0
 8014b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014be0 <_malloc_r+0xfc>
 8014b0e:	f000 f869 	bl	8014be4 <__malloc_lock>
 8014b12:	f8d8 3000 	ldr.w	r3, [r8]
 8014b16:	461c      	mov	r4, r3
 8014b18:	bb44      	cbnz	r4, 8014b6c <_malloc_r+0x88>
 8014b1a:	4629      	mov	r1, r5
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	f7ff ffbf 	bl	8014aa0 <sbrk_aligned>
 8014b22:	1c43      	adds	r3, r0, #1
 8014b24:	4604      	mov	r4, r0
 8014b26:	d158      	bne.n	8014bda <_malloc_r+0xf6>
 8014b28:	f8d8 4000 	ldr.w	r4, [r8]
 8014b2c:	4627      	mov	r7, r4
 8014b2e:	2f00      	cmp	r7, #0
 8014b30:	d143      	bne.n	8014bba <_malloc_r+0xd6>
 8014b32:	2c00      	cmp	r4, #0
 8014b34:	d04b      	beq.n	8014bce <_malloc_r+0xea>
 8014b36:	6823      	ldr	r3, [r4, #0]
 8014b38:	4639      	mov	r1, r7
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	eb04 0903 	add.w	r9, r4, r3
 8014b40:	f000 fc7c 	bl	801543c <_sbrk_r>
 8014b44:	4581      	cmp	r9, r0
 8014b46:	d142      	bne.n	8014bce <_malloc_r+0xea>
 8014b48:	6821      	ldr	r1, [r4, #0]
 8014b4a:	1a6d      	subs	r5, r5, r1
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	4630      	mov	r0, r6
 8014b50:	f7ff ffa6 	bl	8014aa0 <sbrk_aligned>
 8014b54:	3001      	adds	r0, #1
 8014b56:	d03a      	beq.n	8014bce <_malloc_r+0xea>
 8014b58:	6823      	ldr	r3, [r4, #0]
 8014b5a:	442b      	add	r3, r5
 8014b5c:	6023      	str	r3, [r4, #0]
 8014b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8014b62:	685a      	ldr	r2, [r3, #4]
 8014b64:	bb62      	cbnz	r2, 8014bc0 <_malloc_r+0xdc>
 8014b66:	f8c8 7000 	str.w	r7, [r8]
 8014b6a:	e00f      	b.n	8014b8c <_malloc_r+0xa8>
 8014b6c:	6822      	ldr	r2, [r4, #0]
 8014b6e:	1b52      	subs	r2, r2, r5
 8014b70:	d420      	bmi.n	8014bb4 <_malloc_r+0xd0>
 8014b72:	2a0b      	cmp	r2, #11
 8014b74:	d917      	bls.n	8014ba6 <_malloc_r+0xc2>
 8014b76:	1961      	adds	r1, r4, r5
 8014b78:	42a3      	cmp	r3, r4
 8014b7a:	6025      	str	r5, [r4, #0]
 8014b7c:	bf18      	it	ne
 8014b7e:	6059      	strne	r1, [r3, #4]
 8014b80:	6863      	ldr	r3, [r4, #4]
 8014b82:	bf08      	it	eq
 8014b84:	f8c8 1000 	streq.w	r1, [r8]
 8014b88:	5162      	str	r2, [r4, r5]
 8014b8a:	604b      	str	r3, [r1, #4]
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f000 f82f 	bl	8014bf0 <__malloc_unlock>
 8014b92:	f104 000b 	add.w	r0, r4, #11
 8014b96:	1d23      	adds	r3, r4, #4
 8014b98:	f020 0007 	bic.w	r0, r0, #7
 8014b9c:	1ac2      	subs	r2, r0, r3
 8014b9e:	bf1c      	itt	ne
 8014ba0:	1a1b      	subne	r3, r3, r0
 8014ba2:	50a3      	strne	r3, [r4, r2]
 8014ba4:	e7af      	b.n	8014b06 <_malloc_r+0x22>
 8014ba6:	6862      	ldr	r2, [r4, #4]
 8014ba8:	42a3      	cmp	r3, r4
 8014baa:	bf0c      	ite	eq
 8014bac:	f8c8 2000 	streq.w	r2, [r8]
 8014bb0:	605a      	strne	r2, [r3, #4]
 8014bb2:	e7eb      	b.n	8014b8c <_malloc_r+0xa8>
 8014bb4:	4623      	mov	r3, r4
 8014bb6:	6864      	ldr	r4, [r4, #4]
 8014bb8:	e7ae      	b.n	8014b18 <_malloc_r+0x34>
 8014bba:	463c      	mov	r4, r7
 8014bbc:	687f      	ldr	r7, [r7, #4]
 8014bbe:	e7b6      	b.n	8014b2e <_malloc_r+0x4a>
 8014bc0:	461a      	mov	r2, r3
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	42a3      	cmp	r3, r4
 8014bc6:	d1fb      	bne.n	8014bc0 <_malloc_r+0xdc>
 8014bc8:	2300      	movs	r3, #0
 8014bca:	6053      	str	r3, [r2, #4]
 8014bcc:	e7de      	b.n	8014b8c <_malloc_r+0xa8>
 8014bce:	230c      	movs	r3, #12
 8014bd0:	6033      	str	r3, [r6, #0]
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f000 f80c 	bl	8014bf0 <__malloc_unlock>
 8014bd8:	e794      	b.n	8014b04 <_malloc_r+0x20>
 8014bda:	6005      	str	r5, [r0, #0]
 8014bdc:	e7d6      	b.n	8014b8c <_malloc_r+0xa8>
 8014bde:	bf00      	nop
 8014be0:	2400fae8 	.word	0x2400fae8

08014be4 <__malloc_lock>:
 8014be4:	4801      	ldr	r0, [pc, #4]	@ (8014bec <__malloc_lock+0x8>)
 8014be6:	f7ff beda 	b.w	801499e <__retarget_lock_acquire_recursive>
 8014bea:	bf00      	nop
 8014bec:	2400fae0 	.word	0x2400fae0

08014bf0 <__malloc_unlock>:
 8014bf0:	4801      	ldr	r0, [pc, #4]	@ (8014bf8 <__malloc_unlock+0x8>)
 8014bf2:	f7ff bed5 	b.w	80149a0 <__retarget_lock_release_recursive>
 8014bf6:	bf00      	nop
 8014bf8:	2400fae0 	.word	0x2400fae0

08014bfc <__sfputc_r>:
 8014bfc:	6893      	ldr	r3, [r2, #8]
 8014bfe:	3b01      	subs	r3, #1
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	b410      	push	{r4}
 8014c04:	6093      	str	r3, [r2, #8]
 8014c06:	da08      	bge.n	8014c1a <__sfputc_r+0x1e>
 8014c08:	6994      	ldr	r4, [r2, #24]
 8014c0a:	42a3      	cmp	r3, r4
 8014c0c:	db01      	blt.n	8014c12 <__sfputc_r+0x16>
 8014c0e:	290a      	cmp	r1, #10
 8014c10:	d103      	bne.n	8014c1a <__sfputc_r+0x1e>
 8014c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c16:	f000 bb7d 	b.w	8015314 <__swbuf_r>
 8014c1a:	6813      	ldr	r3, [r2, #0]
 8014c1c:	1c58      	adds	r0, r3, #1
 8014c1e:	6010      	str	r0, [r2, #0]
 8014c20:	7019      	strb	r1, [r3, #0]
 8014c22:	4608      	mov	r0, r1
 8014c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c28:	4770      	bx	lr

08014c2a <__sfputs_r>:
 8014c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2c:	4606      	mov	r6, r0
 8014c2e:	460f      	mov	r7, r1
 8014c30:	4614      	mov	r4, r2
 8014c32:	18d5      	adds	r5, r2, r3
 8014c34:	42ac      	cmp	r4, r5
 8014c36:	d101      	bne.n	8014c3c <__sfputs_r+0x12>
 8014c38:	2000      	movs	r0, #0
 8014c3a:	e007      	b.n	8014c4c <__sfputs_r+0x22>
 8014c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c40:	463a      	mov	r2, r7
 8014c42:	4630      	mov	r0, r6
 8014c44:	f7ff ffda 	bl	8014bfc <__sfputc_r>
 8014c48:	1c43      	adds	r3, r0, #1
 8014c4a:	d1f3      	bne.n	8014c34 <__sfputs_r+0xa>
 8014c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c50 <_vfiprintf_r>:
 8014c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c54:	460d      	mov	r5, r1
 8014c56:	b09d      	sub	sp, #116	@ 0x74
 8014c58:	4614      	mov	r4, r2
 8014c5a:	4698      	mov	r8, r3
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	b118      	cbz	r0, 8014c68 <_vfiprintf_r+0x18>
 8014c60:	6a03      	ldr	r3, [r0, #32]
 8014c62:	b90b      	cbnz	r3, 8014c68 <_vfiprintf_r+0x18>
 8014c64:	f7ff fd2e 	bl	80146c4 <__sinit>
 8014c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c6a:	07d9      	lsls	r1, r3, #31
 8014c6c:	d405      	bmi.n	8014c7a <_vfiprintf_r+0x2a>
 8014c6e:	89ab      	ldrh	r3, [r5, #12]
 8014c70:	059a      	lsls	r2, r3, #22
 8014c72:	d402      	bmi.n	8014c7a <_vfiprintf_r+0x2a>
 8014c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c76:	f7ff fe92 	bl	801499e <__retarget_lock_acquire_recursive>
 8014c7a:	89ab      	ldrh	r3, [r5, #12]
 8014c7c:	071b      	lsls	r3, r3, #28
 8014c7e:	d501      	bpl.n	8014c84 <_vfiprintf_r+0x34>
 8014c80:	692b      	ldr	r3, [r5, #16]
 8014c82:	b99b      	cbnz	r3, 8014cac <_vfiprintf_r+0x5c>
 8014c84:	4629      	mov	r1, r5
 8014c86:	4630      	mov	r0, r6
 8014c88:	f000 fb82 	bl	8015390 <__swsetup_r>
 8014c8c:	b170      	cbz	r0, 8014cac <_vfiprintf_r+0x5c>
 8014c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c90:	07dc      	lsls	r4, r3, #31
 8014c92:	d504      	bpl.n	8014c9e <_vfiprintf_r+0x4e>
 8014c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c98:	b01d      	add	sp, #116	@ 0x74
 8014c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9e:	89ab      	ldrh	r3, [r5, #12]
 8014ca0:	0598      	lsls	r0, r3, #22
 8014ca2:	d4f7      	bmi.n	8014c94 <_vfiprintf_r+0x44>
 8014ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ca6:	f7ff fe7b 	bl	80149a0 <__retarget_lock_release_recursive>
 8014caa:	e7f3      	b.n	8014c94 <_vfiprintf_r+0x44>
 8014cac:	2300      	movs	r3, #0
 8014cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cb0:	2320      	movs	r3, #32
 8014cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cba:	2330      	movs	r3, #48	@ 0x30
 8014cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014e6c <_vfiprintf_r+0x21c>
 8014cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014cc4:	f04f 0901 	mov.w	r9, #1
 8014cc8:	4623      	mov	r3, r4
 8014cca:	469a      	mov	sl, r3
 8014ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cd0:	b10a      	cbz	r2, 8014cd6 <_vfiprintf_r+0x86>
 8014cd2:	2a25      	cmp	r2, #37	@ 0x25
 8014cd4:	d1f9      	bne.n	8014cca <_vfiprintf_r+0x7a>
 8014cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8014cda:	d00b      	beq.n	8014cf4 <_vfiprintf_r+0xa4>
 8014cdc:	465b      	mov	r3, fp
 8014cde:	4622      	mov	r2, r4
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f7ff ffa1 	bl	8014c2a <__sfputs_r>
 8014ce8:	3001      	adds	r0, #1
 8014cea:	f000 80a7 	beq.w	8014e3c <_vfiprintf_r+0x1ec>
 8014cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cf0:	445a      	add	r2, fp
 8014cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 809f 	beq.w	8014e3c <_vfiprintf_r+0x1ec>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d08:	f10a 0a01 	add.w	sl, sl, #1
 8014d0c:	9304      	str	r3, [sp, #16]
 8014d0e:	9307      	str	r3, [sp, #28]
 8014d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d16:	4654      	mov	r4, sl
 8014d18:	2205      	movs	r2, #5
 8014d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d1e:	4853      	ldr	r0, [pc, #332]	@ (8014e6c <_vfiprintf_r+0x21c>)
 8014d20:	f7eb fade 	bl	80002e0 <memchr>
 8014d24:	9a04      	ldr	r2, [sp, #16]
 8014d26:	b9d8      	cbnz	r0, 8014d60 <_vfiprintf_r+0x110>
 8014d28:	06d1      	lsls	r1, r2, #27
 8014d2a:	bf44      	itt	mi
 8014d2c:	2320      	movmi	r3, #32
 8014d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d32:	0713      	lsls	r3, r2, #28
 8014d34:	bf44      	itt	mi
 8014d36:	232b      	movmi	r3, #43	@ 0x2b
 8014d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d42:	d015      	beq.n	8014d70 <_vfiprintf_r+0x120>
 8014d44:	9a07      	ldr	r2, [sp, #28]
 8014d46:	4654      	mov	r4, sl
 8014d48:	2000      	movs	r0, #0
 8014d4a:	f04f 0c0a 	mov.w	ip, #10
 8014d4e:	4621      	mov	r1, r4
 8014d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d54:	3b30      	subs	r3, #48	@ 0x30
 8014d56:	2b09      	cmp	r3, #9
 8014d58:	d94b      	bls.n	8014df2 <_vfiprintf_r+0x1a2>
 8014d5a:	b1b0      	cbz	r0, 8014d8a <_vfiprintf_r+0x13a>
 8014d5c:	9207      	str	r2, [sp, #28]
 8014d5e:	e014      	b.n	8014d8a <_vfiprintf_r+0x13a>
 8014d60:	eba0 0308 	sub.w	r3, r0, r8
 8014d64:	fa09 f303 	lsl.w	r3, r9, r3
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	9304      	str	r3, [sp, #16]
 8014d6c:	46a2      	mov	sl, r4
 8014d6e:	e7d2      	b.n	8014d16 <_vfiprintf_r+0xc6>
 8014d70:	9b03      	ldr	r3, [sp, #12]
 8014d72:	1d19      	adds	r1, r3, #4
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	9103      	str	r1, [sp, #12]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	bfbb      	ittet	lt
 8014d7c:	425b      	neglt	r3, r3
 8014d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8014d82:	9307      	strge	r3, [sp, #28]
 8014d84:	9307      	strlt	r3, [sp, #28]
 8014d86:	bfb8      	it	lt
 8014d88:	9204      	strlt	r2, [sp, #16]
 8014d8a:	7823      	ldrb	r3, [r4, #0]
 8014d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d8e:	d10a      	bne.n	8014da6 <_vfiprintf_r+0x156>
 8014d90:	7863      	ldrb	r3, [r4, #1]
 8014d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d94:	d132      	bne.n	8014dfc <_vfiprintf_r+0x1ac>
 8014d96:	9b03      	ldr	r3, [sp, #12]
 8014d98:	1d1a      	adds	r2, r3, #4
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	9203      	str	r2, [sp, #12]
 8014d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014da2:	3402      	adds	r4, #2
 8014da4:	9305      	str	r3, [sp, #20]
 8014da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014e7c <_vfiprintf_r+0x22c>
 8014daa:	7821      	ldrb	r1, [r4, #0]
 8014dac:	2203      	movs	r2, #3
 8014dae:	4650      	mov	r0, sl
 8014db0:	f7eb fa96 	bl	80002e0 <memchr>
 8014db4:	b138      	cbz	r0, 8014dc6 <_vfiprintf_r+0x176>
 8014db6:	9b04      	ldr	r3, [sp, #16]
 8014db8:	eba0 000a 	sub.w	r0, r0, sl
 8014dbc:	2240      	movs	r2, #64	@ 0x40
 8014dbe:	4082      	lsls	r2, r0
 8014dc0:	4313      	orrs	r3, r2
 8014dc2:	3401      	adds	r4, #1
 8014dc4:	9304      	str	r3, [sp, #16]
 8014dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dca:	4829      	ldr	r0, [pc, #164]	@ (8014e70 <_vfiprintf_r+0x220>)
 8014dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014dd0:	2206      	movs	r2, #6
 8014dd2:	f7eb fa85 	bl	80002e0 <memchr>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d03f      	beq.n	8014e5a <_vfiprintf_r+0x20a>
 8014dda:	4b26      	ldr	r3, [pc, #152]	@ (8014e74 <_vfiprintf_r+0x224>)
 8014ddc:	bb1b      	cbnz	r3, 8014e26 <_vfiprintf_r+0x1d6>
 8014dde:	9b03      	ldr	r3, [sp, #12]
 8014de0:	3307      	adds	r3, #7
 8014de2:	f023 0307 	bic.w	r3, r3, #7
 8014de6:	3308      	adds	r3, #8
 8014de8:	9303      	str	r3, [sp, #12]
 8014dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014dec:	443b      	add	r3, r7
 8014dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8014df0:	e76a      	b.n	8014cc8 <_vfiprintf_r+0x78>
 8014df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014df6:	460c      	mov	r4, r1
 8014df8:	2001      	movs	r0, #1
 8014dfa:	e7a8      	b.n	8014d4e <_vfiprintf_r+0xfe>
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	3401      	adds	r4, #1
 8014e00:	9305      	str	r3, [sp, #20]
 8014e02:	4619      	mov	r1, r3
 8014e04:	f04f 0c0a 	mov.w	ip, #10
 8014e08:	4620      	mov	r0, r4
 8014e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e0e:	3a30      	subs	r2, #48	@ 0x30
 8014e10:	2a09      	cmp	r2, #9
 8014e12:	d903      	bls.n	8014e1c <_vfiprintf_r+0x1cc>
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d0c6      	beq.n	8014da6 <_vfiprintf_r+0x156>
 8014e18:	9105      	str	r1, [sp, #20]
 8014e1a:	e7c4      	b.n	8014da6 <_vfiprintf_r+0x156>
 8014e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e20:	4604      	mov	r4, r0
 8014e22:	2301      	movs	r3, #1
 8014e24:	e7f0      	b.n	8014e08 <_vfiprintf_r+0x1b8>
 8014e26:	ab03      	add	r3, sp, #12
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	462a      	mov	r2, r5
 8014e2c:	4b12      	ldr	r3, [pc, #72]	@ (8014e78 <_vfiprintf_r+0x228>)
 8014e2e:	a904      	add	r1, sp, #16
 8014e30:	4630      	mov	r0, r6
 8014e32:	f3af 8000 	nop.w
 8014e36:	4607      	mov	r7, r0
 8014e38:	1c78      	adds	r0, r7, #1
 8014e3a:	d1d6      	bne.n	8014dea <_vfiprintf_r+0x19a>
 8014e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e3e:	07d9      	lsls	r1, r3, #31
 8014e40:	d405      	bmi.n	8014e4e <_vfiprintf_r+0x1fe>
 8014e42:	89ab      	ldrh	r3, [r5, #12]
 8014e44:	059a      	lsls	r2, r3, #22
 8014e46:	d402      	bmi.n	8014e4e <_vfiprintf_r+0x1fe>
 8014e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e4a:	f7ff fda9 	bl	80149a0 <__retarget_lock_release_recursive>
 8014e4e:	89ab      	ldrh	r3, [r5, #12]
 8014e50:	065b      	lsls	r3, r3, #25
 8014e52:	f53f af1f 	bmi.w	8014c94 <_vfiprintf_r+0x44>
 8014e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e58:	e71e      	b.n	8014c98 <_vfiprintf_r+0x48>
 8014e5a:	ab03      	add	r3, sp, #12
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	462a      	mov	r2, r5
 8014e60:	4b05      	ldr	r3, [pc, #20]	@ (8014e78 <_vfiprintf_r+0x228>)
 8014e62:	a904      	add	r1, sp, #16
 8014e64:	4630      	mov	r0, r6
 8014e66:	f000 f879 	bl	8014f5c <_printf_i>
 8014e6a:	e7e4      	b.n	8014e36 <_vfiprintf_r+0x1e6>
 8014e6c:	08018613 	.word	0x08018613
 8014e70:	0801861d 	.word	0x0801861d
 8014e74:	00000000 	.word	0x00000000
 8014e78:	08014c2b 	.word	0x08014c2b
 8014e7c:	08018619 	.word	0x08018619

08014e80 <_printf_common>:
 8014e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e84:	4616      	mov	r6, r2
 8014e86:	4698      	mov	r8, r3
 8014e88:	688a      	ldr	r2, [r1, #8]
 8014e8a:	690b      	ldr	r3, [r1, #16]
 8014e8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e90:	4293      	cmp	r3, r2
 8014e92:	bfb8      	it	lt
 8014e94:	4613      	movlt	r3, r2
 8014e96:	6033      	str	r3, [r6, #0]
 8014e98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014e9c:	4607      	mov	r7, r0
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	b10a      	cbz	r2, 8014ea6 <_printf_common+0x26>
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	6033      	str	r3, [r6, #0]
 8014ea6:	6823      	ldr	r3, [r4, #0]
 8014ea8:	0699      	lsls	r1, r3, #26
 8014eaa:	bf42      	ittt	mi
 8014eac:	6833      	ldrmi	r3, [r6, #0]
 8014eae:	3302      	addmi	r3, #2
 8014eb0:	6033      	strmi	r3, [r6, #0]
 8014eb2:	6825      	ldr	r5, [r4, #0]
 8014eb4:	f015 0506 	ands.w	r5, r5, #6
 8014eb8:	d106      	bne.n	8014ec8 <_printf_common+0x48>
 8014eba:	f104 0a19 	add.w	sl, r4, #25
 8014ebe:	68e3      	ldr	r3, [r4, #12]
 8014ec0:	6832      	ldr	r2, [r6, #0]
 8014ec2:	1a9b      	subs	r3, r3, r2
 8014ec4:	42ab      	cmp	r3, r5
 8014ec6:	dc26      	bgt.n	8014f16 <_printf_common+0x96>
 8014ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014ecc:	6822      	ldr	r2, [r4, #0]
 8014ece:	3b00      	subs	r3, #0
 8014ed0:	bf18      	it	ne
 8014ed2:	2301      	movne	r3, #1
 8014ed4:	0692      	lsls	r2, r2, #26
 8014ed6:	d42b      	bmi.n	8014f30 <_printf_common+0xb0>
 8014ed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014edc:	4641      	mov	r1, r8
 8014ede:	4638      	mov	r0, r7
 8014ee0:	47c8      	blx	r9
 8014ee2:	3001      	adds	r0, #1
 8014ee4:	d01e      	beq.n	8014f24 <_printf_common+0xa4>
 8014ee6:	6823      	ldr	r3, [r4, #0]
 8014ee8:	6922      	ldr	r2, [r4, #16]
 8014eea:	f003 0306 	and.w	r3, r3, #6
 8014eee:	2b04      	cmp	r3, #4
 8014ef0:	bf02      	ittt	eq
 8014ef2:	68e5      	ldreq	r5, [r4, #12]
 8014ef4:	6833      	ldreq	r3, [r6, #0]
 8014ef6:	1aed      	subeq	r5, r5, r3
 8014ef8:	68a3      	ldr	r3, [r4, #8]
 8014efa:	bf0c      	ite	eq
 8014efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f00:	2500      	movne	r5, #0
 8014f02:	4293      	cmp	r3, r2
 8014f04:	bfc4      	itt	gt
 8014f06:	1a9b      	subgt	r3, r3, r2
 8014f08:	18ed      	addgt	r5, r5, r3
 8014f0a:	2600      	movs	r6, #0
 8014f0c:	341a      	adds	r4, #26
 8014f0e:	42b5      	cmp	r5, r6
 8014f10:	d11a      	bne.n	8014f48 <_printf_common+0xc8>
 8014f12:	2000      	movs	r0, #0
 8014f14:	e008      	b.n	8014f28 <_printf_common+0xa8>
 8014f16:	2301      	movs	r3, #1
 8014f18:	4652      	mov	r2, sl
 8014f1a:	4641      	mov	r1, r8
 8014f1c:	4638      	mov	r0, r7
 8014f1e:	47c8      	blx	r9
 8014f20:	3001      	adds	r0, #1
 8014f22:	d103      	bne.n	8014f2c <_printf_common+0xac>
 8014f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f2c:	3501      	adds	r5, #1
 8014f2e:	e7c6      	b.n	8014ebe <_printf_common+0x3e>
 8014f30:	18e1      	adds	r1, r4, r3
 8014f32:	1c5a      	adds	r2, r3, #1
 8014f34:	2030      	movs	r0, #48	@ 0x30
 8014f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014f3a:	4422      	add	r2, r4
 8014f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014f40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014f44:	3302      	adds	r3, #2
 8014f46:	e7c7      	b.n	8014ed8 <_printf_common+0x58>
 8014f48:	2301      	movs	r3, #1
 8014f4a:	4622      	mov	r2, r4
 8014f4c:	4641      	mov	r1, r8
 8014f4e:	4638      	mov	r0, r7
 8014f50:	47c8      	blx	r9
 8014f52:	3001      	adds	r0, #1
 8014f54:	d0e6      	beq.n	8014f24 <_printf_common+0xa4>
 8014f56:	3601      	adds	r6, #1
 8014f58:	e7d9      	b.n	8014f0e <_printf_common+0x8e>
	...

08014f5c <_printf_i>:
 8014f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f60:	7e0f      	ldrb	r7, [r1, #24]
 8014f62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014f64:	2f78      	cmp	r7, #120	@ 0x78
 8014f66:	4691      	mov	r9, r2
 8014f68:	4680      	mov	r8, r0
 8014f6a:	460c      	mov	r4, r1
 8014f6c:	469a      	mov	sl, r3
 8014f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014f72:	d807      	bhi.n	8014f84 <_printf_i+0x28>
 8014f74:	2f62      	cmp	r7, #98	@ 0x62
 8014f76:	d80a      	bhi.n	8014f8e <_printf_i+0x32>
 8014f78:	2f00      	cmp	r7, #0
 8014f7a:	f000 80d1 	beq.w	8015120 <_printf_i+0x1c4>
 8014f7e:	2f58      	cmp	r7, #88	@ 0x58
 8014f80:	f000 80b8 	beq.w	80150f4 <_printf_i+0x198>
 8014f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014f8c:	e03a      	b.n	8015004 <_printf_i+0xa8>
 8014f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014f92:	2b15      	cmp	r3, #21
 8014f94:	d8f6      	bhi.n	8014f84 <_printf_i+0x28>
 8014f96:	a101      	add	r1, pc, #4	@ (adr r1, 8014f9c <_printf_i+0x40>)
 8014f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f9c:	08014ff5 	.word	0x08014ff5
 8014fa0:	08015009 	.word	0x08015009
 8014fa4:	08014f85 	.word	0x08014f85
 8014fa8:	08014f85 	.word	0x08014f85
 8014fac:	08014f85 	.word	0x08014f85
 8014fb0:	08014f85 	.word	0x08014f85
 8014fb4:	08015009 	.word	0x08015009
 8014fb8:	08014f85 	.word	0x08014f85
 8014fbc:	08014f85 	.word	0x08014f85
 8014fc0:	08014f85 	.word	0x08014f85
 8014fc4:	08014f85 	.word	0x08014f85
 8014fc8:	08015107 	.word	0x08015107
 8014fcc:	08015033 	.word	0x08015033
 8014fd0:	080150c1 	.word	0x080150c1
 8014fd4:	08014f85 	.word	0x08014f85
 8014fd8:	08014f85 	.word	0x08014f85
 8014fdc:	08015129 	.word	0x08015129
 8014fe0:	08014f85 	.word	0x08014f85
 8014fe4:	08015033 	.word	0x08015033
 8014fe8:	08014f85 	.word	0x08014f85
 8014fec:	08014f85 	.word	0x08014f85
 8014ff0:	080150c9 	.word	0x080150c9
 8014ff4:	6833      	ldr	r3, [r6, #0]
 8014ff6:	1d1a      	adds	r2, r3, #4
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6032      	str	r2, [r6, #0]
 8014ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015004:	2301      	movs	r3, #1
 8015006:	e09c      	b.n	8015142 <_printf_i+0x1e6>
 8015008:	6833      	ldr	r3, [r6, #0]
 801500a:	6820      	ldr	r0, [r4, #0]
 801500c:	1d19      	adds	r1, r3, #4
 801500e:	6031      	str	r1, [r6, #0]
 8015010:	0606      	lsls	r6, r0, #24
 8015012:	d501      	bpl.n	8015018 <_printf_i+0xbc>
 8015014:	681d      	ldr	r5, [r3, #0]
 8015016:	e003      	b.n	8015020 <_printf_i+0xc4>
 8015018:	0645      	lsls	r5, r0, #25
 801501a:	d5fb      	bpl.n	8015014 <_printf_i+0xb8>
 801501c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015020:	2d00      	cmp	r5, #0
 8015022:	da03      	bge.n	801502c <_printf_i+0xd0>
 8015024:	232d      	movs	r3, #45	@ 0x2d
 8015026:	426d      	negs	r5, r5
 8015028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801502c:	4858      	ldr	r0, [pc, #352]	@ (8015190 <_printf_i+0x234>)
 801502e:	230a      	movs	r3, #10
 8015030:	e011      	b.n	8015056 <_printf_i+0xfa>
 8015032:	6821      	ldr	r1, [r4, #0]
 8015034:	6833      	ldr	r3, [r6, #0]
 8015036:	0608      	lsls	r0, r1, #24
 8015038:	f853 5b04 	ldr.w	r5, [r3], #4
 801503c:	d402      	bmi.n	8015044 <_printf_i+0xe8>
 801503e:	0649      	lsls	r1, r1, #25
 8015040:	bf48      	it	mi
 8015042:	b2ad      	uxthmi	r5, r5
 8015044:	2f6f      	cmp	r7, #111	@ 0x6f
 8015046:	4852      	ldr	r0, [pc, #328]	@ (8015190 <_printf_i+0x234>)
 8015048:	6033      	str	r3, [r6, #0]
 801504a:	bf14      	ite	ne
 801504c:	230a      	movne	r3, #10
 801504e:	2308      	moveq	r3, #8
 8015050:	2100      	movs	r1, #0
 8015052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015056:	6866      	ldr	r6, [r4, #4]
 8015058:	60a6      	str	r6, [r4, #8]
 801505a:	2e00      	cmp	r6, #0
 801505c:	db05      	blt.n	801506a <_printf_i+0x10e>
 801505e:	6821      	ldr	r1, [r4, #0]
 8015060:	432e      	orrs	r6, r5
 8015062:	f021 0104 	bic.w	r1, r1, #4
 8015066:	6021      	str	r1, [r4, #0]
 8015068:	d04b      	beq.n	8015102 <_printf_i+0x1a6>
 801506a:	4616      	mov	r6, r2
 801506c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015070:	fb03 5711 	mls	r7, r3, r1, r5
 8015074:	5dc7      	ldrb	r7, [r0, r7]
 8015076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801507a:	462f      	mov	r7, r5
 801507c:	42bb      	cmp	r3, r7
 801507e:	460d      	mov	r5, r1
 8015080:	d9f4      	bls.n	801506c <_printf_i+0x110>
 8015082:	2b08      	cmp	r3, #8
 8015084:	d10b      	bne.n	801509e <_printf_i+0x142>
 8015086:	6823      	ldr	r3, [r4, #0]
 8015088:	07df      	lsls	r7, r3, #31
 801508a:	d508      	bpl.n	801509e <_printf_i+0x142>
 801508c:	6923      	ldr	r3, [r4, #16]
 801508e:	6861      	ldr	r1, [r4, #4]
 8015090:	4299      	cmp	r1, r3
 8015092:	bfde      	ittt	le
 8015094:	2330      	movle	r3, #48	@ 0x30
 8015096:	f806 3c01 	strble.w	r3, [r6, #-1]
 801509a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801509e:	1b92      	subs	r2, r2, r6
 80150a0:	6122      	str	r2, [r4, #16]
 80150a2:	f8cd a000 	str.w	sl, [sp]
 80150a6:	464b      	mov	r3, r9
 80150a8:	aa03      	add	r2, sp, #12
 80150aa:	4621      	mov	r1, r4
 80150ac:	4640      	mov	r0, r8
 80150ae:	f7ff fee7 	bl	8014e80 <_printf_common>
 80150b2:	3001      	adds	r0, #1
 80150b4:	d14a      	bne.n	801514c <_printf_i+0x1f0>
 80150b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150ba:	b004      	add	sp, #16
 80150bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150c0:	6823      	ldr	r3, [r4, #0]
 80150c2:	f043 0320 	orr.w	r3, r3, #32
 80150c6:	6023      	str	r3, [r4, #0]
 80150c8:	4832      	ldr	r0, [pc, #200]	@ (8015194 <_printf_i+0x238>)
 80150ca:	2778      	movs	r7, #120	@ 0x78
 80150cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80150d0:	6823      	ldr	r3, [r4, #0]
 80150d2:	6831      	ldr	r1, [r6, #0]
 80150d4:	061f      	lsls	r7, r3, #24
 80150d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80150da:	d402      	bmi.n	80150e2 <_printf_i+0x186>
 80150dc:	065f      	lsls	r7, r3, #25
 80150de:	bf48      	it	mi
 80150e0:	b2ad      	uxthmi	r5, r5
 80150e2:	6031      	str	r1, [r6, #0]
 80150e4:	07d9      	lsls	r1, r3, #31
 80150e6:	bf44      	itt	mi
 80150e8:	f043 0320 	orrmi.w	r3, r3, #32
 80150ec:	6023      	strmi	r3, [r4, #0]
 80150ee:	b11d      	cbz	r5, 80150f8 <_printf_i+0x19c>
 80150f0:	2310      	movs	r3, #16
 80150f2:	e7ad      	b.n	8015050 <_printf_i+0xf4>
 80150f4:	4826      	ldr	r0, [pc, #152]	@ (8015190 <_printf_i+0x234>)
 80150f6:	e7e9      	b.n	80150cc <_printf_i+0x170>
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	f023 0320 	bic.w	r3, r3, #32
 80150fe:	6023      	str	r3, [r4, #0]
 8015100:	e7f6      	b.n	80150f0 <_printf_i+0x194>
 8015102:	4616      	mov	r6, r2
 8015104:	e7bd      	b.n	8015082 <_printf_i+0x126>
 8015106:	6833      	ldr	r3, [r6, #0]
 8015108:	6825      	ldr	r5, [r4, #0]
 801510a:	6961      	ldr	r1, [r4, #20]
 801510c:	1d18      	adds	r0, r3, #4
 801510e:	6030      	str	r0, [r6, #0]
 8015110:	062e      	lsls	r6, r5, #24
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	d501      	bpl.n	801511a <_printf_i+0x1be>
 8015116:	6019      	str	r1, [r3, #0]
 8015118:	e002      	b.n	8015120 <_printf_i+0x1c4>
 801511a:	0668      	lsls	r0, r5, #25
 801511c:	d5fb      	bpl.n	8015116 <_printf_i+0x1ba>
 801511e:	8019      	strh	r1, [r3, #0]
 8015120:	2300      	movs	r3, #0
 8015122:	6123      	str	r3, [r4, #16]
 8015124:	4616      	mov	r6, r2
 8015126:	e7bc      	b.n	80150a2 <_printf_i+0x146>
 8015128:	6833      	ldr	r3, [r6, #0]
 801512a:	1d1a      	adds	r2, r3, #4
 801512c:	6032      	str	r2, [r6, #0]
 801512e:	681e      	ldr	r6, [r3, #0]
 8015130:	6862      	ldr	r2, [r4, #4]
 8015132:	2100      	movs	r1, #0
 8015134:	4630      	mov	r0, r6
 8015136:	f7eb f8d3 	bl	80002e0 <memchr>
 801513a:	b108      	cbz	r0, 8015140 <_printf_i+0x1e4>
 801513c:	1b80      	subs	r0, r0, r6
 801513e:	6060      	str	r0, [r4, #4]
 8015140:	6863      	ldr	r3, [r4, #4]
 8015142:	6123      	str	r3, [r4, #16]
 8015144:	2300      	movs	r3, #0
 8015146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801514a:	e7aa      	b.n	80150a2 <_printf_i+0x146>
 801514c:	6923      	ldr	r3, [r4, #16]
 801514e:	4632      	mov	r2, r6
 8015150:	4649      	mov	r1, r9
 8015152:	4640      	mov	r0, r8
 8015154:	47d0      	blx	sl
 8015156:	3001      	adds	r0, #1
 8015158:	d0ad      	beq.n	80150b6 <_printf_i+0x15a>
 801515a:	6823      	ldr	r3, [r4, #0]
 801515c:	079b      	lsls	r3, r3, #30
 801515e:	d413      	bmi.n	8015188 <_printf_i+0x22c>
 8015160:	68e0      	ldr	r0, [r4, #12]
 8015162:	9b03      	ldr	r3, [sp, #12]
 8015164:	4298      	cmp	r0, r3
 8015166:	bfb8      	it	lt
 8015168:	4618      	movlt	r0, r3
 801516a:	e7a6      	b.n	80150ba <_printf_i+0x15e>
 801516c:	2301      	movs	r3, #1
 801516e:	4632      	mov	r2, r6
 8015170:	4649      	mov	r1, r9
 8015172:	4640      	mov	r0, r8
 8015174:	47d0      	blx	sl
 8015176:	3001      	adds	r0, #1
 8015178:	d09d      	beq.n	80150b6 <_printf_i+0x15a>
 801517a:	3501      	adds	r5, #1
 801517c:	68e3      	ldr	r3, [r4, #12]
 801517e:	9903      	ldr	r1, [sp, #12]
 8015180:	1a5b      	subs	r3, r3, r1
 8015182:	42ab      	cmp	r3, r5
 8015184:	dcf2      	bgt.n	801516c <_printf_i+0x210>
 8015186:	e7eb      	b.n	8015160 <_printf_i+0x204>
 8015188:	2500      	movs	r5, #0
 801518a:	f104 0619 	add.w	r6, r4, #25
 801518e:	e7f5      	b.n	801517c <_printf_i+0x220>
 8015190:	08018624 	.word	0x08018624
 8015194:	08018635 	.word	0x08018635

08015198 <__sflush_r>:
 8015198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	0716      	lsls	r6, r2, #28
 80151a2:	4605      	mov	r5, r0
 80151a4:	460c      	mov	r4, r1
 80151a6:	d454      	bmi.n	8015252 <__sflush_r+0xba>
 80151a8:	684b      	ldr	r3, [r1, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	dc02      	bgt.n	80151b4 <__sflush_r+0x1c>
 80151ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	dd48      	ble.n	8015246 <__sflush_r+0xae>
 80151b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80151b6:	2e00      	cmp	r6, #0
 80151b8:	d045      	beq.n	8015246 <__sflush_r+0xae>
 80151ba:	2300      	movs	r3, #0
 80151bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80151c0:	682f      	ldr	r7, [r5, #0]
 80151c2:	6a21      	ldr	r1, [r4, #32]
 80151c4:	602b      	str	r3, [r5, #0]
 80151c6:	d030      	beq.n	801522a <__sflush_r+0x92>
 80151c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80151ca:	89a3      	ldrh	r3, [r4, #12]
 80151cc:	0759      	lsls	r1, r3, #29
 80151ce:	d505      	bpl.n	80151dc <__sflush_r+0x44>
 80151d0:	6863      	ldr	r3, [r4, #4]
 80151d2:	1ad2      	subs	r2, r2, r3
 80151d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80151d6:	b10b      	cbz	r3, 80151dc <__sflush_r+0x44>
 80151d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80151da:	1ad2      	subs	r2, r2, r3
 80151dc:	2300      	movs	r3, #0
 80151de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80151e0:	6a21      	ldr	r1, [r4, #32]
 80151e2:	4628      	mov	r0, r5
 80151e4:	47b0      	blx	r6
 80151e6:	1c43      	adds	r3, r0, #1
 80151e8:	89a3      	ldrh	r3, [r4, #12]
 80151ea:	d106      	bne.n	80151fa <__sflush_r+0x62>
 80151ec:	6829      	ldr	r1, [r5, #0]
 80151ee:	291d      	cmp	r1, #29
 80151f0:	d82b      	bhi.n	801524a <__sflush_r+0xb2>
 80151f2:	4a2a      	ldr	r2, [pc, #168]	@ (801529c <__sflush_r+0x104>)
 80151f4:	40ca      	lsrs	r2, r1
 80151f6:	07d6      	lsls	r6, r2, #31
 80151f8:	d527      	bpl.n	801524a <__sflush_r+0xb2>
 80151fa:	2200      	movs	r2, #0
 80151fc:	6062      	str	r2, [r4, #4]
 80151fe:	04d9      	lsls	r1, r3, #19
 8015200:	6922      	ldr	r2, [r4, #16]
 8015202:	6022      	str	r2, [r4, #0]
 8015204:	d504      	bpl.n	8015210 <__sflush_r+0x78>
 8015206:	1c42      	adds	r2, r0, #1
 8015208:	d101      	bne.n	801520e <__sflush_r+0x76>
 801520a:	682b      	ldr	r3, [r5, #0]
 801520c:	b903      	cbnz	r3, 8015210 <__sflush_r+0x78>
 801520e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015212:	602f      	str	r7, [r5, #0]
 8015214:	b1b9      	cbz	r1, 8015246 <__sflush_r+0xae>
 8015216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801521a:	4299      	cmp	r1, r3
 801521c:	d002      	beq.n	8015224 <__sflush_r+0x8c>
 801521e:	4628      	mov	r0, r5
 8015220:	f7ff fbec 	bl	80149fc <_free_r>
 8015224:	2300      	movs	r3, #0
 8015226:	6363      	str	r3, [r4, #52]	@ 0x34
 8015228:	e00d      	b.n	8015246 <__sflush_r+0xae>
 801522a:	2301      	movs	r3, #1
 801522c:	4628      	mov	r0, r5
 801522e:	47b0      	blx	r6
 8015230:	4602      	mov	r2, r0
 8015232:	1c50      	adds	r0, r2, #1
 8015234:	d1c9      	bne.n	80151ca <__sflush_r+0x32>
 8015236:	682b      	ldr	r3, [r5, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d0c6      	beq.n	80151ca <__sflush_r+0x32>
 801523c:	2b1d      	cmp	r3, #29
 801523e:	d001      	beq.n	8015244 <__sflush_r+0xac>
 8015240:	2b16      	cmp	r3, #22
 8015242:	d11e      	bne.n	8015282 <__sflush_r+0xea>
 8015244:	602f      	str	r7, [r5, #0]
 8015246:	2000      	movs	r0, #0
 8015248:	e022      	b.n	8015290 <__sflush_r+0xf8>
 801524a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801524e:	b21b      	sxth	r3, r3
 8015250:	e01b      	b.n	801528a <__sflush_r+0xf2>
 8015252:	690f      	ldr	r7, [r1, #16]
 8015254:	2f00      	cmp	r7, #0
 8015256:	d0f6      	beq.n	8015246 <__sflush_r+0xae>
 8015258:	0793      	lsls	r3, r2, #30
 801525a:	680e      	ldr	r6, [r1, #0]
 801525c:	bf08      	it	eq
 801525e:	694b      	ldreq	r3, [r1, #20]
 8015260:	600f      	str	r7, [r1, #0]
 8015262:	bf18      	it	ne
 8015264:	2300      	movne	r3, #0
 8015266:	eba6 0807 	sub.w	r8, r6, r7
 801526a:	608b      	str	r3, [r1, #8]
 801526c:	f1b8 0f00 	cmp.w	r8, #0
 8015270:	dde9      	ble.n	8015246 <__sflush_r+0xae>
 8015272:	6a21      	ldr	r1, [r4, #32]
 8015274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015276:	4643      	mov	r3, r8
 8015278:	463a      	mov	r2, r7
 801527a:	4628      	mov	r0, r5
 801527c:	47b0      	blx	r6
 801527e:	2800      	cmp	r0, #0
 8015280:	dc08      	bgt.n	8015294 <__sflush_r+0xfc>
 8015282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801528a:	81a3      	strh	r3, [r4, #12]
 801528c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015294:	4407      	add	r7, r0
 8015296:	eba8 0800 	sub.w	r8, r8, r0
 801529a:	e7e7      	b.n	801526c <__sflush_r+0xd4>
 801529c:	20400001 	.word	0x20400001

080152a0 <_fflush_r>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	690b      	ldr	r3, [r1, #16]
 80152a4:	4605      	mov	r5, r0
 80152a6:	460c      	mov	r4, r1
 80152a8:	b913      	cbnz	r3, 80152b0 <_fflush_r+0x10>
 80152aa:	2500      	movs	r5, #0
 80152ac:	4628      	mov	r0, r5
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	b118      	cbz	r0, 80152ba <_fflush_r+0x1a>
 80152b2:	6a03      	ldr	r3, [r0, #32]
 80152b4:	b90b      	cbnz	r3, 80152ba <_fflush_r+0x1a>
 80152b6:	f7ff fa05 	bl	80146c4 <__sinit>
 80152ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d0f3      	beq.n	80152aa <_fflush_r+0xa>
 80152c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80152c4:	07d0      	lsls	r0, r2, #31
 80152c6:	d404      	bmi.n	80152d2 <_fflush_r+0x32>
 80152c8:	0599      	lsls	r1, r3, #22
 80152ca:	d402      	bmi.n	80152d2 <_fflush_r+0x32>
 80152cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152ce:	f7ff fb66 	bl	801499e <__retarget_lock_acquire_recursive>
 80152d2:	4628      	mov	r0, r5
 80152d4:	4621      	mov	r1, r4
 80152d6:	f7ff ff5f 	bl	8015198 <__sflush_r>
 80152da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80152dc:	07da      	lsls	r2, r3, #31
 80152de:	4605      	mov	r5, r0
 80152e0:	d4e4      	bmi.n	80152ac <_fflush_r+0xc>
 80152e2:	89a3      	ldrh	r3, [r4, #12]
 80152e4:	059b      	lsls	r3, r3, #22
 80152e6:	d4e1      	bmi.n	80152ac <_fflush_r+0xc>
 80152e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152ea:	f7ff fb59 	bl	80149a0 <__retarget_lock_release_recursive>
 80152ee:	e7dd      	b.n	80152ac <_fflush_r+0xc>

080152f0 <fiprintf>:
 80152f0:	b40e      	push	{r1, r2, r3}
 80152f2:	b503      	push	{r0, r1, lr}
 80152f4:	4601      	mov	r1, r0
 80152f6:	ab03      	add	r3, sp, #12
 80152f8:	4805      	ldr	r0, [pc, #20]	@ (8015310 <fiprintf+0x20>)
 80152fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80152fe:	6800      	ldr	r0, [r0, #0]
 8015300:	9301      	str	r3, [sp, #4]
 8015302:	f7ff fca5 	bl	8014c50 <_vfiprintf_r>
 8015306:	b002      	add	sp, #8
 8015308:	f85d eb04 	ldr.w	lr, [sp], #4
 801530c:	b003      	add	sp, #12
 801530e:	4770      	bx	lr
 8015310:	2400005c 	.word	0x2400005c

08015314 <__swbuf_r>:
 8015314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015316:	460e      	mov	r6, r1
 8015318:	4614      	mov	r4, r2
 801531a:	4605      	mov	r5, r0
 801531c:	b118      	cbz	r0, 8015326 <__swbuf_r+0x12>
 801531e:	6a03      	ldr	r3, [r0, #32]
 8015320:	b90b      	cbnz	r3, 8015326 <__swbuf_r+0x12>
 8015322:	f7ff f9cf 	bl	80146c4 <__sinit>
 8015326:	69a3      	ldr	r3, [r4, #24]
 8015328:	60a3      	str	r3, [r4, #8]
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	071a      	lsls	r2, r3, #28
 801532e:	d501      	bpl.n	8015334 <__swbuf_r+0x20>
 8015330:	6923      	ldr	r3, [r4, #16]
 8015332:	b943      	cbnz	r3, 8015346 <__swbuf_r+0x32>
 8015334:	4621      	mov	r1, r4
 8015336:	4628      	mov	r0, r5
 8015338:	f000 f82a 	bl	8015390 <__swsetup_r>
 801533c:	b118      	cbz	r0, 8015346 <__swbuf_r+0x32>
 801533e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015342:	4638      	mov	r0, r7
 8015344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	6922      	ldr	r2, [r4, #16]
 801534a:	1a98      	subs	r0, r3, r2
 801534c:	6963      	ldr	r3, [r4, #20]
 801534e:	b2f6      	uxtb	r6, r6
 8015350:	4283      	cmp	r3, r0
 8015352:	4637      	mov	r7, r6
 8015354:	dc05      	bgt.n	8015362 <__swbuf_r+0x4e>
 8015356:	4621      	mov	r1, r4
 8015358:	4628      	mov	r0, r5
 801535a:	f7ff ffa1 	bl	80152a0 <_fflush_r>
 801535e:	2800      	cmp	r0, #0
 8015360:	d1ed      	bne.n	801533e <__swbuf_r+0x2a>
 8015362:	68a3      	ldr	r3, [r4, #8]
 8015364:	3b01      	subs	r3, #1
 8015366:	60a3      	str	r3, [r4, #8]
 8015368:	6823      	ldr	r3, [r4, #0]
 801536a:	1c5a      	adds	r2, r3, #1
 801536c:	6022      	str	r2, [r4, #0]
 801536e:	701e      	strb	r6, [r3, #0]
 8015370:	6962      	ldr	r2, [r4, #20]
 8015372:	1c43      	adds	r3, r0, #1
 8015374:	429a      	cmp	r2, r3
 8015376:	d004      	beq.n	8015382 <__swbuf_r+0x6e>
 8015378:	89a3      	ldrh	r3, [r4, #12]
 801537a:	07db      	lsls	r3, r3, #31
 801537c:	d5e1      	bpl.n	8015342 <__swbuf_r+0x2e>
 801537e:	2e0a      	cmp	r6, #10
 8015380:	d1df      	bne.n	8015342 <__swbuf_r+0x2e>
 8015382:	4621      	mov	r1, r4
 8015384:	4628      	mov	r0, r5
 8015386:	f7ff ff8b 	bl	80152a0 <_fflush_r>
 801538a:	2800      	cmp	r0, #0
 801538c:	d0d9      	beq.n	8015342 <__swbuf_r+0x2e>
 801538e:	e7d6      	b.n	801533e <__swbuf_r+0x2a>

08015390 <__swsetup_r>:
 8015390:	b538      	push	{r3, r4, r5, lr}
 8015392:	4b29      	ldr	r3, [pc, #164]	@ (8015438 <__swsetup_r+0xa8>)
 8015394:	4605      	mov	r5, r0
 8015396:	6818      	ldr	r0, [r3, #0]
 8015398:	460c      	mov	r4, r1
 801539a:	b118      	cbz	r0, 80153a4 <__swsetup_r+0x14>
 801539c:	6a03      	ldr	r3, [r0, #32]
 801539e:	b90b      	cbnz	r3, 80153a4 <__swsetup_r+0x14>
 80153a0:	f7ff f990 	bl	80146c4 <__sinit>
 80153a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153a8:	0719      	lsls	r1, r3, #28
 80153aa:	d422      	bmi.n	80153f2 <__swsetup_r+0x62>
 80153ac:	06da      	lsls	r2, r3, #27
 80153ae:	d407      	bmi.n	80153c0 <__swsetup_r+0x30>
 80153b0:	2209      	movs	r2, #9
 80153b2:	602a      	str	r2, [r5, #0]
 80153b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153b8:	81a3      	strh	r3, [r4, #12]
 80153ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153be:	e033      	b.n	8015428 <__swsetup_r+0x98>
 80153c0:	0758      	lsls	r0, r3, #29
 80153c2:	d512      	bpl.n	80153ea <__swsetup_r+0x5a>
 80153c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80153c6:	b141      	cbz	r1, 80153da <__swsetup_r+0x4a>
 80153c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80153cc:	4299      	cmp	r1, r3
 80153ce:	d002      	beq.n	80153d6 <__swsetup_r+0x46>
 80153d0:	4628      	mov	r0, r5
 80153d2:	f7ff fb13 	bl	80149fc <_free_r>
 80153d6:	2300      	movs	r3, #0
 80153d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80153da:	89a3      	ldrh	r3, [r4, #12]
 80153dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80153e0:	81a3      	strh	r3, [r4, #12]
 80153e2:	2300      	movs	r3, #0
 80153e4:	6063      	str	r3, [r4, #4]
 80153e6:	6923      	ldr	r3, [r4, #16]
 80153e8:	6023      	str	r3, [r4, #0]
 80153ea:	89a3      	ldrh	r3, [r4, #12]
 80153ec:	f043 0308 	orr.w	r3, r3, #8
 80153f0:	81a3      	strh	r3, [r4, #12]
 80153f2:	6923      	ldr	r3, [r4, #16]
 80153f4:	b94b      	cbnz	r3, 801540a <__swsetup_r+0x7a>
 80153f6:	89a3      	ldrh	r3, [r4, #12]
 80153f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80153fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015400:	d003      	beq.n	801540a <__swsetup_r+0x7a>
 8015402:	4621      	mov	r1, r4
 8015404:	4628      	mov	r0, r5
 8015406:	f000 f856 	bl	80154b6 <__smakebuf_r>
 801540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540e:	f013 0201 	ands.w	r2, r3, #1
 8015412:	d00a      	beq.n	801542a <__swsetup_r+0x9a>
 8015414:	2200      	movs	r2, #0
 8015416:	60a2      	str	r2, [r4, #8]
 8015418:	6962      	ldr	r2, [r4, #20]
 801541a:	4252      	negs	r2, r2
 801541c:	61a2      	str	r2, [r4, #24]
 801541e:	6922      	ldr	r2, [r4, #16]
 8015420:	b942      	cbnz	r2, 8015434 <__swsetup_r+0xa4>
 8015422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015426:	d1c5      	bne.n	80153b4 <__swsetup_r+0x24>
 8015428:	bd38      	pop	{r3, r4, r5, pc}
 801542a:	0799      	lsls	r1, r3, #30
 801542c:	bf58      	it	pl
 801542e:	6962      	ldrpl	r2, [r4, #20]
 8015430:	60a2      	str	r2, [r4, #8]
 8015432:	e7f4      	b.n	801541e <__swsetup_r+0x8e>
 8015434:	2000      	movs	r0, #0
 8015436:	e7f7      	b.n	8015428 <__swsetup_r+0x98>
 8015438:	2400005c 	.word	0x2400005c

0801543c <_sbrk_r>:
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	4d06      	ldr	r5, [pc, #24]	@ (8015458 <_sbrk_r+0x1c>)
 8015440:	2300      	movs	r3, #0
 8015442:	4604      	mov	r4, r0
 8015444:	4608      	mov	r0, r1
 8015446:	602b      	str	r3, [r5, #0]
 8015448:	f7eb fda4 	bl	8000f94 <_sbrk>
 801544c:	1c43      	adds	r3, r0, #1
 801544e:	d102      	bne.n	8015456 <_sbrk_r+0x1a>
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	b103      	cbz	r3, 8015456 <_sbrk_r+0x1a>
 8015454:	6023      	str	r3, [r4, #0]
 8015456:	bd38      	pop	{r3, r4, r5, pc}
 8015458:	2400fadc 	.word	0x2400fadc

0801545c <abort>:
 801545c:	b508      	push	{r3, lr}
 801545e:	2006      	movs	r0, #6
 8015460:	f000 f88e 	bl	8015580 <raise>
 8015464:	2001      	movs	r0, #1
 8015466:	f7eb fd1d 	bl	8000ea4 <_exit>

0801546a <__swhatbuf_r>:
 801546a:	b570      	push	{r4, r5, r6, lr}
 801546c:	460c      	mov	r4, r1
 801546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015472:	2900      	cmp	r1, #0
 8015474:	b096      	sub	sp, #88	@ 0x58
 8015476:	4615      	mov	r5, r2
 8015478:	461e      	mov	r6, r3
 801547a:	da0d      	bge.n	8015498 <__swhatbuf_r+0x2e>
 801547c:	89a3      	ldrh	r3, [r4, #12]
 801547e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015482:	f04f 0100 	mov.w	r1, #0
 8015486:	bf14      	ite	ne
 8015488:	2340      	movne	r3, #64	@ 0x40
 801548a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801548e:	2000      	movs	r0, #0
 8015490:	6031      	str	r1, [r6, #0]
 8015492:	602b      	str	r3, [r5, #0]
 8015494:	b016      	add	sp, #88	@ 0x58
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	466a      	mov	r2, sp
 801549a:	f000 f879 	bl	8015590 <_fstat_r>
 801549e:	2800      	cmp	r0, #0
 80154a0:	dbec      	blt.n	801547c <__swhatbuf_r+0x12>
 80154a2:	9901      	ldr	r1, [sp, #4]
 80154a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80154a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154ac:	4259      	negs	r1, r3
 80154ae:	4159      	adcs	r1, r3
 80154b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154b4:	e7eb      	b.n	801548e <__swhatbuf_r+0x24>

080154b6 <__smakebuf_r>:
 80154b6:	898b      	ldrh	r3, [r1, #12]
 80154b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154ba:	079d      	lsls	r5, r3, #30
 80154bc:	4606      	mov	r6, r0
 80154be:	460c      	mov	r4, r1
 80154c0:	d507      	bpl.n	80154d2 <__smakebuf_r+0x1c>
 80154c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80154c6:	6023      	str	r3, [r4, #0]
 80154c8:	6123      	str	r3, [r4, #16]
 80154ca:	2301      	movs	r3, #1
 80154cc:	6163      	str	r3, [r4, #20]
 80154ce:	b003      	add	sp, #12
 80154d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154d2:	ab01      	add	r3, sp, #4
 80154d4:	466a      	mov	r2, sp
 80154d6:	f7ff ffc8 	bl	801546a <__swhatbuf_r>
 80154da:	9f00      	ldr	r7, [sp, #0]
 80154dc:	4605      	mov	r5, r0
 80154de:	4639      	mov	r1, r7
 80154e0:	4630      	mov	r0, r6
 80154e2:	f7ff faff 	bl	8014ae4 <_malloc_r>
 80154e6:	b948      	cbnz	r0, 80154fc <__smakebuf_r+0x46>
 80154e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ec:	059a      	lsls	r2, r3, #22
 80154ee:	d4ee      	bmi.n	80154ce <__smakebuf_r+0x18>
 80154f0:	f023 0303 	bic.w	r3, r3, #3
 80154f4:	f043 0302 	orr.w	r3, r3, #2
 80154f8:	81a3      	strh	r3, [r4, #12]
 80154fa:	e7e2      	b.n	80154c2 <__smakebuf_r+0xc>
 80154fc:	89a3      	ldrh	r3, [r4, #12]
 80154fe:	6020      	str	r0, [r4, #0]
 8015500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015504:	81a3      	strh	r3, [r4, #12]
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801550c:	b15b      	cbz	r3, 8015526 <__smakebuf_r+0x70>
 801550e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015512:	4630      	mov	r0, r6
 8015514:	f000 f84e 	bl	80155b4 <_isatty_r>
 8015518:	b128      	cbz	r0, 8015526 <__smakebuf_r+0x70>
 801551a:	89a3      	ldrh	r3, [r4, #12]
 801551c:	f023 0303 	bic.w	r3, r3, #3
 8015520:	f043 0301 	orr.w	r3, r3, #1
 8015524:	81a3      	strh	r3, [r4, #12]
 8015526:	89a3      	ldrh	r3, [r4, #12]
 8015528:	431d      	orrs	r5, r3
 801552a:	81a5      	strh	r5, [r4, #12]
 801552c:	e7cf      	b.n	80154ce <__smakebuf_r+0x18>

0801552e <_raise_r>:
 801552e:	291f      	cmp	r1, #31
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	4605      	mov	r5, r0
 8015534:	460c      	mov	r4, r1
 8015536:	d904      	bls.n	8015542 <_raise_r+0x14>
 8015538:	2316      	movs	r3, #22
 801553a:	6003      	str	r3, [r0, #0]
 801553c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015540:	bd38      	pop	{r3, r4, r5, pc}
 8015542:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015544:	b112      	cbz	r2, 801554c <_raise_r+0x1e>
 8015546:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801554a:	b94b      	cbnz	r3, 8015560 <_raise_r+0x32>
 801554c:	4628      	mov	r0, r5
 801554e:	f000 f853 	bl	80155f8 <_getpid_r>
 8015552:	4622      	mov	r2, r4
 8015554:	4601      	mov	r1, r0
 8015556:	4628      	mov	r0, r5
 8015558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801555c:	f000 b83a 	b.w	80155d4 <_kill_r>
 8015560:	2b01      	cmp	r3, #1
 8015562:	d00a      	beq.n	801557a <_raise_r+0x4c>
 8015564:	1c59      	adds	r1, r3, #1
 8015566:	d103      	bne.n	8015570 <_raise_r+0x42>
 8015568:	2316      	movs	r3, #22
 801556a:	6003      	str	r3, [r0, #0]
 801556c:	2001      	movs	r0, #1
 801556e:	e7e7      	b.n	8015540 <_raise_r+0x12>
 8015570:	2100      	movs	r1, #0
 8015572:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015576:	4620      	mov	r0, r4
 8015578:	4798      	blx	r3
 801557a:	2000      	movs	r0, #0
 801557c:	e7e0      	b.n	8015540 <_raise_r+0x12>
	...

08015580 <raise>:
 8015580:	4b02      	ldr	r3, [pc, #8]	@ (801558c <raise+0xc>)
 8015582:	4601      	mov	r1, r0
 8015584:	6818      	ldr	r0, [r3, #0]
 8015586:	f7ff bfd2 	b.w	801552e <_raise_r>
 801558a:	bf00      	nop
 801558c:	2400005c 	.word	0x2400005c

08015590 <_fstat_r>:
 8015590:	b538      	push	{r3, r4, r5, lr}
 8015592:	4d07      	ldr	r5, [pc, #28]	@ (80155b0 <_fstat_r+0x20>)
 8015594:	2300      	movs	r3, #0
 8015596:	4604      	mov	r4, r0
 8015598:	4608      	mov	r0, r1
 801559a:	4611      	mov	r1, r2
 801559c:	602b      	str	r3, [r5, #0]
 801559e:	f7eb fcd1 	bl	8000f44 <_fstat>
 80155a2:	1c43      	adds	r3, r0, #1
 80155a4:	d102      	bne.n	80155ac <_fstat_r+0x1c>
 80155a6:	682b      	ldr	r3, [r5, #0]
 80155a8:	b103      	cbz	r3, 80155ac <_fstat_r+0x1c>
 80155aa:	6023      	str	r3, [r4, #0]
 80155ac:	bd38      	pop	{r3, r4, r5, pc}
 80155ae:	bf00      	nop
 80155b0:	2400fadc 	.word	0x2400fadc

080155b4 <_isatty_r>:
 80155b4:	b538      	push	{r3, r4, r5, lr}
 80155b6:	4d06      	ldr	r5, [pc, #24]	@ (80155d0 <_isatty_r+0x1c>)
 80155b8:	2300      	movs	r3, #0
 80155ba:	4604      	mov	r4, r0
 80155bc:	4608      	mov	r0, r1
 80155be:	602b      	str	r3, [r5, #0]
 80155c0:	f7eb fcd0 	bl	8000f64 <_isatty>
 80155c4:	1c43      	adds	r3, r0, #1
 80155c6:	d102      	bne.n	80155ce <_isatty_r+0x1a>
 80155c8:	682b      	ldr	r3, [r5, #0]
 80155ca:	b103      	cbz	r3, 80155ce <_isatty_r+0x1a>
 80155cc:	6023      	str	r3, [r4, #0]
 80155ce:	bd38      	pop	{r3, r4, r5, pc}
 80155d0:	2400fadc 	.word	0x2400fadc

080155d4 <_kill_r>:
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	4d07      	ldr	r5, [pc, #28]	@ (80155f4 <_kill_r+0x20>)
 80155d8:	2300      	movs	r3, #0
 80155da:	4604      	mov	r4, r0
 80155dc:	4608      	mov	r0, r1
 80155de:	4611      	mov	r1, r2
 80155e0:	602b      	str	r3, [r5, #0]
 80155e2:	f7eb fc4d 	bl	8000e80 <_kill>
 80155e6:	1c43      	adds	r3, r0, #1
 80155e8:	d102      	bne.n	80155f0 <_kill_r+0x1c>
 80155ea:	682b      	ldr	r3, [r5, #0]
 80155ec:	b103      	cbz	r3, 80155f0 <_kill_r+0x1c>
 80155ee:	6023      	str	r3, [r4, #0]
 80155f0:	bd38      	pop	{r3, r4, r5, pc}
 80155f2:	bf00      	nop
 80155f4:	2400fadc 	.word	0x2400fadc

080155f8 <_getpid_r>:
 80155f8:	f7eb bc3a 	b.w	8000e70 <_getpid>

080155fc <_init>:
 80155fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155fe:	bf00      	nop
 8015600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015602:	bc08      	pop	{r3}
 8015604:	469e      	mov	lr, r3
 8015606:	4770      	bx	lr

08015608 <_fini>:
 8015608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560a:	bf00      	nop
 801560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801560e:	bc08      	pop	{r3}
 8015610:	469e      	mov	lr, r3
 8015612:	4770      	bx	lr
